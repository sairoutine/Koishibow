(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports=[
{
"images":["koishi.png"],
"name":"wait_anime_1",
"animation": {
"fps": 30,
"CanvasWidth": 500,
"CanvasHeight": 500,
"MarginWidth": 250,
"MarginHeight": 0,
"parts": ["instance","effect","root","Chara","koishi0_bottom0","koishi0_thighs_l0","koishi0_calf_l0","koishi0_foot_l0","koishi0_thighs_r0","koishi0_calf_r0","koishi0_foot_r0","koishi0_body","koishi0_arm0_r0","koishi0_arm0_l0","koishi0_head0","koishi0_hear_b0","koishi0_hear_f1","koishi0_hear_f0","koishi0_mouth0","koishi0_eye0_l0","koishi0_eye0_l1","koishi0_eye0_l2","koishi0_eye1_l0","koishi0_eye0_r0","koishi0_eye0_r1","koishi0_eye0_r2","koishi0_eye1_r0","koishi0_hat0_f0","koishi0_hat0_b0","koishi0_hat0_obj0","3rdeye0_all","3rdeye0_cord_b0","3rdeye0_cord_f0","3rdeye0_body0","3rdeye0_eye0","3rdeye0_light0","3rdeye0_eye1"],
"ssa": [
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,2,-173,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133,183,137,183,-133,163,137,163],
[15,0,214,2,174,170,-27,-300,0,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89,328,85,328,-89,158,85,158],
[13,0,554,100,70,140,26,-205,0,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,219,76,219,6,79,76,79],
[11,0,2,2,210,176,-8,-134,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,238,98,238,-112,62.000008,98,62.000008],
[12,0,926,2,74,142,-40,-201,-0.104720,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.317474,219.104446,-4.722858,211.369339,-93.160522,77.882332,-19.565899,70.147232],
[14,0,658,84,138,126,-9,-210,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,330,69,330,-69,204,69,204],
[23,0,278,202,34,28,-5,-263,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,277,12,277,-22,249,12,249],
[18,0,414,202,22,6,17,-209,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,212,28,212,6,206,28,206],
[16,0,798,84,106,150,-60,-270,0,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-118,305,-12,305,-118,155,-12,155],
[32,0,2,180,236,30,-18,-158,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136,173,100,173,-136,143,100,143],
[33,0,512,180,40,54,100,-168,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80,195,120,195,80,141,120,141],
[34,0,1002,84,8,10,106,-171,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102,176,110,176,102,166,110,166],
[35,0,1014,100,6,2,102,-170,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99,171,105,171,99,169,105,169]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.909091,-172.909088,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.090912,182.909088,136.909088,182.909088,-133.090912,162.909088,136.909088,162.909088],
[15,0,214,2,174,170,-27,-299.817810,0.000831,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.023247,327.766266,84.976692,327.910889,-88.881958,157.766327,85.117981,157.910934],
[13,0,554,100,70,140,26,-204.904755,0.001662,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.976755,218.871490,75.976662,218.987854,6.209467,78.871689,76.209366,78.988045],
[11,0,2,2,210,176,-8,-133.904755,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.904755,98,237.904755,-112,61.904762,98,61.904762],
[12,0,926,2,74,142,-40,-200.904755,-0.106382,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.287331,219.072876,-4.705666,211.215439,-93.365097,77.875626,-19.783432,70.018188],
[14,0,658,84,138,126,-9,-209.817795,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.817810,69,329.817810,-69,203.817795,69,203.817795],
[23,0,278,202,34,28,-5,-262.817810,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.817810,12,276.817810,-22,248.817810,12,248.817810],
[18,0,414,202,22,6,17,-208.817795,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.817795,28,211.817795,6,205.817795,28,205.817795],
[16,0,798,84,106,150,-60,-269.817810,-0.001662,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.941742,304.914154,-11.941887,304.737976,-118.191071,154.914368,-12.191219,154.738190],
[32,0,2,180,236,30,-18.090910,-157.909088,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.090912,172.909088,99.909088,172.909088,-136.090912,142.909088,99.909088,142.909088],
[33,0,512,180,40,54,99.909088,-167.909088,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.909088,194.909088,119.909088,194.909088,79.909088,140.909088,119.909088,140.909088],
[34,0,1002,84,8,10,105.909088,-170.909088,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.909088,175.909088,109.909088,175.909088,101.909088,165.909088,109.909088,165.909088],
[35,0,1014,100,6,2,101.909088,-169.909088,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.909088,170.909088,104.909088,170.909088,98.909088,168.909088,104.909088,168.909088]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.818182,-172.818176,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.181824,182.818176,136.818176,182.818176,-133.181824,162.818176,136.818176,162.818176],
[15,0,214,2,174,170,-27,-299.635620,0.001662,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.046463,327.532532,84.953308,327.821747,-88.763885,157.532761,85.235886,157.821991],
[13,0,554,100,70,140,26,-204.809525,0.003324,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.953569,218.742966,75.953178,218.975662,6.418989,78.743736,76.418594,78.976448],
[11,0,2,2,210,176,-8,-133.809525,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.809540,98,237.809540,-112,61.809532,98,61.809532],
[12,0,926,2,74,142,-40,-200.809525,-0.108044,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.257080,219.041260,-4.688580,211.061523,-93.569519,77.869270,-20.001022,69.889542],
[14,0,658,84,138,126,-9,-209.635620,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.635620,69,329.635620,-69,203.635620,69,203.635620],
[23,0,278,202,34,28,-5,-262.635620,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.635620,12,276.635620,-22,248.635620,12,248.635620],
[18,0,414,202,22,6,17,-208.635620,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.635620,28,211.635620,6,205.635620,28,205.635620],
[16,0,798,84,106,150,-60,-269.635620,-0.003324,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.883324,304.828247,-11.883911,304.475861,-118.381989,154.829071,-12.382576,154.476685],
[32,0,2,180,236,30,-18.181818,-157.818176,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.181824,172.818176,99.818184,172.818176,-136.181824,142.818176,99.818184,142.818176],
[33,0,512,180,40,54,99.818184,-167.818176,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.818184,194.818176,119.818184,194.818176,79.818184,140.818176,119.818184,140.818176],
[34,0,1002,84,8,10,105.818184,-170.818176,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.818184,175.818176,109.818184,175.818176,101.818184,165.818176,109.818184,165.818176],
[35,0,1014,100,6,2,101.818184,-169.818176,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.818184,170.818176,104.818184,170.818176,98.818184,168.818176,104.818184,168.818176]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.727273,-172.727280,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.272720,182.727280,136.727280,182.727280,-133.272720,162.727280,136.727280,162.727280],
[15,0,214,2,174,170,-27,-299.453400,0.002493,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.069626,327.298737,84.929832,327.732574,-88.645752,157.299255,85.353699,157.733093],
[13,0,554,100,70,140,26,-204.714279,0.004987,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.930437,218.614380,75.929565,218.963440,6.628567,78.616119,76.627693,78.965179],
[11,0,2,2,210,176,-8,-133.714279,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.714294,98,237.714294,-112,61.714287,98,61.714287],
[12,0,926,2,74,142,-40,-200.714279,-0.109706,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.226715,219.009583,-4.671589,210.907578,-93.773804,77.863235,-20.218670,69.761246],
[14,0,658,84,138,126,-9,-209.453400,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.453400,69,329.453400,-69,203.453400,69,203.453400],
[23,0,278,202,34,28,-5,-262.453400,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.453400,12,276.453400,-22,248.453400,12,248.453400],
[18,0,414,202,22,6,17,-208.453400,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.453400,28,211.453400,6,205.453400,28,205.453400],
[16,0,798,84,106,150,-60,-269.453400,-0.004987,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.824745,304.742188,-11.826065,304.213593,-118.572739,154.744049,-12.574062,154.215485],
[32,0,2,180,236,30,-18.272728,-157.727280,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.272736,172.727280,99.727272,172.727280,-136.272736,142.727280,99.727272,142.727280],
[33,0,512,180,40,54,99.727272,-167.727280,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.727272,194.727280,119.727272,194.727280,79.727272,140.727280,119.727272,140.727280],
[34,0,1002,84,8,10,105.727272,-170.727280,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.727272,175.727280,109.727272,175.727280,101.727272,165.727280,109.727272,165.727280],
[35,0,1014,100,6,2,101.727272,-169.727280,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.727272,170.727280,104.727272,170.727280,98.727272,168.727280,104.727272,168.727280]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.636364,-172.636368,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.363632,182.636368,136.636368,182.636368,-133.363632,162.636368,136.636368,162.636368],
[15,0,214,2,174,170,-27,-299.271240,0.003324,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.092743,327.064972,84.906296,327.643433,-88.527588,157.065918,85.471451,157.644363],
[13,0,554,100,70,140,26,-204.619049,0.006649,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.907358,218.485764,75.905807,218.951187,6.838194,78.488861,76.836647,78.954277],
[11,0,2,2,210,176,-8,-133.619049,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.619049,98,237.619049,-112,61.619057,98,61.619057],
[12,0,926,2,74,142,-40,-200.619049,-0.111369,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.196259,218.977859,-4.654694,210.753601,-93.977936,77.857559,-20.436367,69.633301],
[14,0,658,84,138,126,-9,-209.271225,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.271240,69,329.271240,-69,203.271225,69,203.271225],
[23,0,278,202,34,28,-5,-262.271240,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.271240,12,276.271240,-22,248.271240,12,248.271240],
[18,0,414,202,22,6,17,-208.271225,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.271225,28,211.271225,6,205.271225,28,205.271225],
[16,0,798,84,106,150,-60,-269.271240,-0.006649,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.766006,304.656097,-11.768353,303.951324,-118.763336,154.659424,-12.765675,153.954636],
[32,0,2,180,236,30,-18.363636,-157.636368,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.363632,172.636368,99.636368,172.636368,-136.363632,142.636368,99.636368,142.636368],
[33,0,512,180,40,54,99.636360,-167.636368,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.636360,194.636368,119.636360,194.636368,79.636360,140.636368,119.636360,140.636368],
[34,0,1002,84,8,10,105.636360,-170.636368,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.636360,175.636368,109.636360,175.636368,101.636360,165.636368,109.636360,165.636368],
[35,0,1014,100,6,2,101.636360,-169.636368,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.636360,170.636368,104.636360,170.636368,98.636360,168.636368,104.636360,168.636368]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.545455,-172.545456,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.454544,182.545456,136.545456,182.545456,-133.454544,162.545456,136.545456,162.545456],
[15,0,214,2,174,170,-27,-299.089020,0.004156,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.115822,326.831146,84.882675,327.554199,-88.409378,156.832596,85.589119,157.555664],
[13,0,554,100,70,140,26,-204.523804,0.008311,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.884336,218.357101,75.881927,218.938873,7.047876,78.361931,77.045456,78.943703],
[11,0,2,2,210,176,-8,-133.523804,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.523804,98,237.523804,-112,61.523811,98,61.523811],
[12,0,926,2,74,142,-40,-200.523804,-0.113031,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.165688,218.946075,-4.637897,210.599594,-94.181915,77.852211,-20.654121,69.505722],
[14,0,658,84,138,126,-9,-209.089020,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.089020,69,329.089020,-69,203.089020,69,203.089020],
[23,0,278,202,34,28,-5,-262.089020,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.089020,12,276.089020,-22,248.089020,12,248.089020],
[18,0,414,202,22,6,17,-208.089020,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.089020,28,211.089020,6,205.089020,28,205.089020],
[16,0,798,84,106,150,-60,-269.089020,-0.008311,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.707108,304.569855,-11.710770,303.688873,-118.953766,154.575027,-12.957420,153.694061],
[32,0,2,180,236,30,-18.454546,-157.545456,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.454544,172.545456,99.545456,172.545456,-136.454544,142.545456,99.545456,142.545456],
[33,0,512,180,40,54,99.545456,-167.545456,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.545456,194.545456,119.545456,194.545456,79.545456,140.545456,119.545456,140.545456],
[34,0,1002,84,8,10,105.545456,-170.545456,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.545456,175.545456,109.545456,175.545456,101.545456,165.545456,109.545456,165.545456],
[35,0,1014,100,6,2,101.545456,-169.545456,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.545456,170.545456,104.545456,170.545456,98.545456,168.545456,104.545456,168.545456]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.454545,-172.454544,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.545456,182.454544,136.454544,182.454544,-133.545456,162.454544,136.454544,162.454544],
[15,0,214,2,174,170,-27,-298.906830,0.004987,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.138855,326.597321,84.858978,327.464996,-88.291122,156.599426,85.706703,157.467102],
[13,0,554,100,70,140,26,-204.428574,0.009973,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.861370,218.228409,75.857887,218.926529,7.257610,78.235374,77.254128,78.933495],
[11,0,2,2,210,176,-8,-133.428574,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.428589,98,237.428589,-112,61.428581,98,61.428581],
[12,0,926,2,74,142,-40,-200.428574,-0.114693,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.135010,218.914261,-4.621197,210.445572,-94.385742,77.847214,-20.871929,69.378525],
[14,0,658,84,138,126,-9,-208.906830,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.906830,69,328.906830,-69,202.906830,69,202.906830],
[23,0,278,202,34,28,-5,-261.906830,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.906830,12,275.906830,-22,247.906830,12,247.906830],
[18,0,414,202,22,6,17,-207.906830,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.906830,28,210.906830,6,204.906830,28,204.906830],
[16,0,798,84,106,150,-60,-268.906830,-0.009973,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.648056,304.483521,-11.653328,303.426392,-119.144028,154.490997,-13.149300,153.433838],
[32,0,2,180,236,30,-18.545454,-157.454544,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.545456,172.454544,99.454544,172.454544,-136.545456,142.454544,99.454544,142.454544],
[33,0,512,180,40,54,99.454544,-167.454544,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.454544,194.454544,119.454544,194.454544,79.454544,140.454544,119.454544,140.454544],
[34,0,1002,84,8,10,105.454544,-170.454544,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.454544,175.454544,109.454544,175.454544,101.454544,165.454544,109.454544,165.454544],
[35,0,1014,100,6,2,101.454544,-169.454544,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.454544,170.454544,104.454544,170.454544,98.454544,168.454544,104.454544,168.454544]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.363636,-172.363632,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.636368,182.363632,136.363632,182.363632,-133.636368,162.363632,136.363632,162.363632],
[28,0,658,2,266,80,-9.918551,-290.724884,0.005818,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.149002,329.950439,122.846481,331.497955,-142.683578,249.951813,123.311905,251.499329],
[15,0,214,2,174,170,-27,-298.724640,0.005818,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.161850,326.363464,84.835213,327.375763,-88.172836,156.366348,85.824226,157.378632],
[13,0,554,100,70,140,26,-204.333328,0.011636,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.838461,218.099670,75.833717,218.914139,7.467398,78.109154,77.462662,78.923622],
[11,0,2,2,210,176,-8,-133.333328,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.333344,98,237.333344,-112,61.333336,98,61.333336],
[12,0,926,2,74,142,-40,-200.333328,-0.116355,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.104233,218.882385,-4.604595,210.291504,-94.589424,77.842537,-21.089788,69.251663],
[14,0,658,84,138,126,-9,-208.724640,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.724640,69,328.724640,-69,202.724640,69,202.724640],
[23,0,278,202,34,28,-5,-261.724640,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.724640,12,275.724640,-22,247.724640,12,247.724640],
[18,0,414,202,22,6,17,-207.724640,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.724640,28,210.724640,6,204.724640,28,204.724640],
[16,0,798,84,106,150,-60,-268.724640,-0.011636,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.588837,304.397125,-11.596016,303.163757,-119.334122,154.407272,-13.341305,153.173935],
[32,0,2,180,236,30,-18.636364,-157.363632,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.636368,172.363632,99.363632,172.363632,-136.636368,142.363632,99.363632,142.363632],
[33,0,512,180,40,54,99.363640,-167.363632,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.363640,194.363632,119.363640,194.363632,79.363640,140.363632,119.363640,140.363632],
[34,0,1002,84,8,10,105.363640,-170.363632,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.363640,175.363632,109.363640,175.363632,101.363640,165.363632,109.363640,165.363632],
[35,0,1014,100,6,2,101.363640,-169.363632,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.363640,170.363632,104.363640,170.363632,98.363640,168.363632,104.363640,168.363632]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.272727,-172.272720,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.727280,182.272720,136.272720,182.272720,-133.727280,162.272720,136.272720,162.272720],
[28,0,658,2,266,80,-9.906917,-290.542755,0.006649,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.169922,329.657593,122.824196,331.426147,-142.638031,249.659348,123.356087,251.427933],
[15,0,214,2,174,170,-27,-298.542450,0.006649,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.184799,326.129608,84.811356,327.286499,-88.054497,156.133362,85.941650,157.290268],
[13,0,554,100,70,140,26,-204.238098,0.013298,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.815605,217.970917,75.809418,218.901733,7.677235,77.983292,77.671051,78.914108],
[11,0,2,2,210,176,-8,-133.238098,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.238098,98,237.238098,-112,61.238106,98,61.238106],
[12,0,926,2,74,142,-40,-200.238098,-0.118018,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.073349,218.850464,-4.588093,210.137421,-94.792953,77.838211,-21.307701,69.125183],
[14,0,658,84,138,126,-9,-208.542450,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.542450,69,328.542450,-69,202.542450,69,202.542450],
[23,0,278,202,34,28,-5,-261.542450,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.542450,12,275.542450,-22,247.542450,12,247.542450],
[18,0,414,202,22,6,17,-207.542450,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.542450,28,210.542450,6,204.542450,28,204.542450],
[16,0,798,84,106,150,-60,-268.542450,-0.013298,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.529465,304.310608,-11.538834,302.901093,-119.524071,154.323853,-13.533440,152.914337],
[32,0,2,180,236,30,-18.727272,-157.272720,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.727264,172.272720,99.272728,172.272720,-136.727264,142.272720,99.272728,142.272720],
[33,0,512,180,40,54,99.272728,-167.272720,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.272728,194.272720,119.272728,194.272720,79.272728,140.272720,119.272728,140.272720],
[34,0,1002,84,8,10,105.272728,-170.272720,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.272728,175.272720,109.272728,175.272720,101.272728,165.272720,109.272728,165.272720],
[35,0,1014,100,6,2,101.272728,-169.272720,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.272728,170.272720,104.272728,170.272720,98.272728,168.272720,104.272728,168.272720]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.181818,-172.181824,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.818176,182.181824,136.181824,182.181824,-133.818176,162.181824,136.181824,162.181824],
[28,0,658,2,266,80,-9.895281,-290.360626,0.007480,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.190750,329.364685,122.801804,331.354340,-142.592361,249.366913,123.400192,251.356567],
[15,0,214,2,174,170,-27,-298.360229,0.007480,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.207703,325.895691,84.787437,327.197205,-87.936119,155.900436,86.059021,157.201950],
[13,0,554,100,70,140,26,-204.142853,0.014960,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.792805,217.842102,75.784973,218.889252,7.887123,77.857765,77.879288,78.904922],
[11,0,2,2,210,176,-8,-133.142853,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.142853,98,237.142853,-112,61.142860,98,61.142860],
[12,0,926,2,74,142,-40,-200.142853,-0.119680,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.042358,218.818481,-4.571686,209.983307,-94.996338,77.834221,-21.525665,68.999039],
[14,0,658,84,138,126,-9,-208.360245,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.360229,69,328.360229,-69,202.360245,69,202.360245],
[23,0,278,202,34,28,-5,-261.360229,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.360229,12,275.360229,-22,247.360229,12,247.360229],
[18,0,414,202,22,6,17,-207.360245,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.360245,28,210.360245,6,204.360245,28,204.360245],
[16,0,798,84,106,150,-60,-268.360229,-0.014960,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.469933,304.223969,-11.481792,302.638245,-119.713844,154.240738,-13.725704,152.655045],
[32,0,2,180,236,30,-18.818182,-157.181824,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.818176,172.181824,99.181816,172.181824,-136.818176,142.181824,99.181816,142.181824],
[33,0,512,180,40,54,99.181816,-167.181824,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.181816,194.181824,119.181816,194.181824,79.181816,140.181824,119.181816,140.181824],
[34,0,1002,84,8,10,105.181816,-170.181824,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.181816,175.181824,109.181816,175.181824,101.181816,165.181824,109.181816,165.181824],
[35,0,1014,100,6,2,101.181816,-169.181824,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.181816,170.181824,104.181816,170.181824,98.181816,168.181824,104.181816,168.181824]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.090909,-172.090912,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.909088,182.090912,136.090912,182.090912,-133.909088,162.090912,136.090912,162.090912],
[28,0,658,2,266,80,-9.883646,-290.178528,0.008311,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.211502,329.071777,122.779320,331.282501,-142.546616,249.074554,123.444206,251.285278],
[15,0,214,2,174,170,-27,-298.178040,0.008311,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.230568,325.661804,84.763428,327.107910,-87.817703,155.667648,86.176292,157.113770],
[13,0,554,100,70,140,26,-204.047623,0.016622,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.770063,217.713257,75.760391,218.876755,8.097063,77.732605,78.087387,78.896103],
[11,0,2,2,210,176,-8,-133.047623,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.047638,98,237.047638,-112,61.047630,98,61.047630],
[12,0,926,2,74,142,-40,-200.047623,-0.121342,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.011261,218.786453,-4.555378,209.829178,-95.199570,77.830566,-21.743683,68.873276],
[14,0,658,84,138,126,-9,-208.178055,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.178040,69,328.178040,-69,202.178055,69,202.178055],
[23,0,278,202,34,28,-5,-261.178040,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.178040,12,275.178040,-22,247.178040,12,247.178040],
[18,0,414,202,22,6,17,-207.178055,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.178055,28,210.178055,6,204.178055,28,204.178055],
[16,0,798,84,106,150,-60,-268.178040,-0.016622,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.410233,304.137238,-11.424881,302.375366,-119.903450,154.157974,-13.918095,152.396103],
[32,0,2,180,236,30,-18.909090,-157.090912,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.909088,172.090912,99.090912,172.090912,-136.909088,142.090912,99.090912,142.090912],
[33,0,512,180,40,54,99.090912,-167.090912,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.090912,194.090912,119.090912,194.090912,79.090912,140.090912,119.090912,140.090912],
[34,0,1002,84,8,10,105.090912,-170.090912,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.090912,175.090912,109.090912,175.090912,101.090912,165.090912,109.090912,165.090912],
[35,0,1014,100,6,2,101.090912,-169.090912,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.090912,170.090912,104.090912,170.090912,98.090912,168.090912,104.090912,168.090912]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1,-172,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134,182,136,182,-134,162,136,162],
[28,0,658,2,266,80,-9.872011,-289.996429,0.009142,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.232132,328.778870,122.756760,331.210663,-142.500778,248.782196,123.488113,251.213989],
[15,0,214,2,174,170,-27,-297.995850,0.009142,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.253387,325.427856,84.739342,327.018585,-87.699234,155.434982,86.293495,157.025696],
[13,0,554,100,70,140,26,-203.952377,0.018284,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.747374,217.584366,75.735672,218.864212,8.307049,77.607765,78.295349,78.887604],
[11,0,2,2,210,176,-8,-132.952377,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.952393,98,236.952393,-112,60.952385,98,60.952385],
[12,0,926,2,74,142,-40,-199.952377,-0.123004,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.980057,218.754364,-4.539165,209.675003,-95.402641,77.827248,-21.961744,68.747879],
[14,0,658,84,138,126,-9,-207.995850,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.995850,69,327.995850,-69,201.995850,69,201.995850],
[23,0,278,202,34,28,-5,-260.995850,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.995850,12,274.995850,-22,246.995850,12,246.995850],
[18,0,414,202,22,6,17,-206.995850,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.995850,28,209.995850,6,203.995850,28,203.995850],
[16,0,798,84,106,150,-60,-267.995850,-0.018284,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.350388,304.050446,-11.368103,302.112396,-120.092896,154.075500,-14.110611,152.137466],
[32,0,2,180,236,30,-19,-157,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137,172,99,172,-137,142,99,142],
[33,0,512,180,40,54,99,-167,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79,194,119,194,79,140,119,140],
[34,0,1002,84,8,10,105,-170,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101,175,109,175,101,165,109,165],
[35,0,1014,100,6,2,101,-169,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98,170,104,170,98,168,104,168]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.909091,-171.909088,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.090912,181.909088,135.909088,181.909088,-134.090912,161.909088,135.909088,161.909088],
[28,0,658,2,266,80,-9.860376,-289.814362,0.009973,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.252701,328.485962,122.734093,331.138794,-142.454849,248.489929,123.531944,251.142776],
[15,0,214,2,174,170,-27,-297.813660,0.009973,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.276169,325.193939,84.715179,326.929260,-87.580734,155.202393,86.410614,156.937714],
[13,0,554,100,70,140,26,-203.857147,0.019947,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.724745,217.455460,75.710815,218.851624,8.517086,77.483307,78.503159,78.879471],
[11,0,2,2,210,176,-8,-132.857147,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.857147,98,236.857147,-112,60.857155,98,60.857155],
[12,0,926,2,74,142,-40,-199.857147,-0.124666,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.948761,218.722244,-4.523056,209.520813,-95.605560,77.824272,-22.179859,68.622833],
[14,0,658,84,138,126,-9,-207.813660,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.813660,69,327.813660,-69,201.813660,69,201.813660],
[23,0,278,202,34,28,-5,-260.813660,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.813660,12,274.813660,-22,246.813660,12,246.813660],
[18,0,414,202,22,6,17,-206.813660,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.813660,28,209.813660,6,203.813660,28,203.813660],
[16,0,798,84,106,150,-60,-267.813660,-0.019947,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.290375,303.963531,-11.311462,301.849304,-120.282173,153.993362,-14.303257,151.879150],
[32,0,2,180,236,30,-19.090910,-156.909088,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.090912,171.909088,98.909088,171.909088,-137.090912,141.909088,98.909088,141.909088],
[33,0,512,180,40,54,98.909088,-166.909088,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.909088,193.909088,118.909088,193.909088,78.909088,139.909088,118.909088,139.909088],
[34,0,1002,84,8,10,104.909088,-169.909088,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.909088,174.909088,108.909088,174.909088,100.909088,164.909088,108.909088,164.909088],
[35,0,1014,100,6,2,100.909088,-168.909088,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.909088,169.909088,103.909088,169.909088,97.909088,167.909088,103.909088,167.909088]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.818182,-171.818176,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.181824,181.818176,135.818176,181.818176,-134.181824,161.818176,135.818176,161.818176],
[28,0,658,2,266,80,-9.848742,-289.632294,0.010804,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.273148,328.192993,122.711319,331.066925,-142.408798,248.197662,123.575668,251.071594],
[15,0,214,2,174,170,-27,-297.631470,0.010804,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.298904,324.959961,84.690941,326.839905,-87.462189,154.969894,86.527657,156.849823],
[13,0,554,100,70,140,26,-203.761902,0.021609,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.702169,217.326492,75.685822,218.838989,8.727171,77.359177,78.710831,78.871681],
[11,0,2,2,210,176,-8,-132.761902,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.761902,98,236.761902,-112,60.761909,98,60.761909],
[12,0,926,2,74,142,-40,-199.761902,-0.126329,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.917343,218.690048,-4.507038,209.366577,-95.808334,77.821625,-22.398024,68.498154],
[14,0,658,84,138,126,-9,-207.631470,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.631470,69,327.631470,-69,201.631470,69,201.631470],
[23,0,278,202,34,28,-5,-260.631470,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.631470,12,274.631470,-22,246.631470,12,246.631470],
[18,0,414,202,22,6,17,-206.631470,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.631470,28,209.631470,6,203.631470,28,203.631470],
[16,0,798,84,106,150,-60,-267.631470,-0.021609,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.230209,303.876526,-11.254959,301.586151,-120.471283,153.911530,-14.496029,151.621185],
[32,0,2,180,236,30,-19.181818,-156.818176,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.181824,171.818176,98.818184,171.818176,-137.181824,141.818176,98.818184,141.818176],
[33,0,512,180,40,54,98.818184,-166.818176,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.818184,193.818176,118.818184,193.818176,78.818184,139.818176,118.818184,139.818176],
[34,0,1002,84,8,10,104.818184,-169.818176,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.818184,174.818176,108.818184,174.818176,100.818184,164.818176,108.818184,164.818176],
[35,0,1014,100,6,2,100.818184,-168.818176,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.818184,169.818176,103.818184,169.818176,97.818184,167.818176,103.818184,167.818176]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.727273,-171.727280,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.272720,181.727280,135.727280,181.727280,-134.272720,161.727280,135.727280,161.727280],
[28,0,658,2,266,80,-9.837107,-289.450226,0.011636,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.293518,327.900024,122.688484,330.994995,-142.362701,247.905441,123.619301,251.000427],
[15,0,214,2,174,170,-27,-297.449280,0.011636,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.321594,324.726013,84.666626,326.750549,-87.343597,154.737503,86.644623,156.762039],
[13,0,554,100,70,140,26,-203.666672,0.023271,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.679649,217.197510,75.660698,218.826324,8.937304,77.235413,78.918350,78.864235],
[11,0,2,2,210,176,-8,-132.666672,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.666687,98,236.666687,-112,60.666679,98,60.666679],
[12,0,926,2,74,142,-40,-199.666672,-0.127991,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.885834,218.657822,-4.491123,209.212341,-96.010941,77.819336,-22.616238,68.373856],
[14,0,658,84,138,126,-9,-207.449280,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.449280,69,327.449280,-69,201.449280,69,201.449280],
[23,0,278,202,34,28,-5,-260.449280,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.449280,12,274.449280,-22,246.449280,12,246.449280],
[18,0,414,202,22,6,17,-206.449280,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.449280,28,209.449280,6,203.449280,28,203.449280],
[16,0,798,84,106,150,-60,-267.449280,-0.023271,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.169876,303.789398,-11.198582,301.322876,-120.660225,153.830017,-14.688927,151.363510],
[32,0,2,180,236,30,-19.272728,-156.727280,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.272736,171.727280,98.727272,171.727280,-137.272736,141.727280,98.727272,141.727280],
[33,0,512,180,40,54,98.727272,-166.727280,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.727272,193.727280,118.727272,193.727280,78.727272,139.727280,118.727272,139.727280],
[34,0,1002,84,8,10,104.727272,-169.727280,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.727272,174.727280,108.727272,174.727280,100.727272,164.727280,108.727272,164.727280],
[35,0,1014,100,6,2,100.727272,-168.727280,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.727272,169.727280,103.727272,169.727280,97.727272,167.727280,103.727272,167.727280]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.636364,-171.636368,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.363632,181.636368,135.636368,181.636368,-134.363632,161.636368,135.636368,161.636368],
[28,0,658,2,266,80,-9.825472,-289.268188,0.012467,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.313797,327.607056,122.665543,330.923096,-142.316483,247.613281,123.662857,250.929321],
[15,0,214,2,174,170,-27,-297.267090,0.012467,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.344238,324.492004,84.642235,326.661133,-87.224960,154.505203,86.761513,156.674347],
[13,0,554,100,70,140,26,-203.571426,0.024933,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.657187,217.068466,75.635429,218.813614,9.147484,77.111984,79.125725,78.857132],
[11,0,2,2,210,176,-8,-132.571426,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.571442,98,236.571442,-112,60.571434,98,60.571434],
[12,0,926,2,74,142,-40,-199.571426,-0.129653,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.854210,218.625519,-4.475304,209.058060,-96.213409,77.817352,-22.834499,68.249893],
[14,0,658,84,138,126,-9,-207.267090,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.267090,69,327.267090,-69,201.267090,69,201.267090],
[23,0,278,202,34,28,-5,-260.267090,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.267090,12,274.267090,-22,246.267090,12,246.267090],
[18,0,414,202,22,6,17,-206.267090,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.267090,28,209.267090,6,203.267090,28,203.267090],
[16,0,798,84,106,150,-60,-267.267090,-0.024933,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.109398,303.702179,-11.142345,301.059540,-120.848999,153.748810,-14.881950,151.106171],
[32,0,2,180,236,30,-19.363636,-156.636368,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.363632,171.636368,98.636368,171.636368,-137.363632,141.636368,98.636368,141.636368],
[33,0,512,180,40,54,98.636360,-166.636368,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.636360,193.636368,118.636360,193.636368,78.636360,139.636368,118.636360,139.636368],
[34,0,1002,84,8,10,104.636360,-169.636368,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.636360,174.636368,108.636360,174.636368,100.636360,164.636368,108.636360,164.636368],
[35,0,1014,100,6,2,100.636360,-168.636368,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.636360,169.636368,103.636360,169.636368,97.636360,167.636368,103.636360,167.636368]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.545455,-171.545456,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.454544,181.545456,135.545456,181.545456,-134.454544,161.545456,135.545456,161.545456],
[28,0,658,2,266,80,-9.813837,-289.086151,0.013298,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.333984,327.314056,122.642525,330.851166,-142.270203,247.321136,123.706306,250.858231],
[15,0,214,2,174,170,-27,-297.084900,0.013298,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.366844,324.257996,84.617767,326.571716,-87.106293,154.273026,86.878319,156.586761],
[13,0,554,100,70,140,26,-203.476196,0.026595,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.634779,216.939392,75.610031,218.800858,9.357710,76.988907,79.332954,78.850372],
[11,0,2,2,210,176,-8,-132.476196,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.476196,98,236.476196,-112,60.476204,98,60.476204],
[12,0,926,2,74,142,-40,-199.476196,-0.131315,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.822487,218.593185,-4.459587,208.903763,-96.415710,77.815735,-23.052807,68.126312],
[14,0,658,84,138,126,-9,-207.084900,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.084900,69,327.084900,-69,201.084900,69,201.084900],
[23,0,278,202,34,28,-5,-260.084900,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.084900,12,274.084900,-22,246.084900,12,246.084900],
[18,0,414,202,22,6,17,-206.084900,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.084900,28,209.084900,6,203.084900,28,203.084900],
[16,0,798,84,106,150,-60,-267.084900,-0.026595,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.048752,303.614868,-11.086243,300.796082,-121.037613,153.667923,-15.075096,150.849121],
[32,0,2,180,236,30,-19.454546,-156.545456,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.454544,171.545456,98.545456,171.545456,-137.454544,141.545456,98.545456,141.545456],
[33,0,512,180,40,54,98.545456,-166.545456,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.545456,193.545456,118.545456,193.545456,78.545456,139.545456,118.545456,139.545456],
[34,0,1002,84,8,10,104.545456,-169.545456,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.545456,174.545456,108.545456,174.545456,100.545456,164.545456,108.545456,164.545456],
[35,0,1014,100,6,2,100.545456,-168.545456,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.545456,169.545456,103.545456,169.545456,97.545456,167.545456,103.545456,167.545456]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.454545,-171.454544,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.545456,181.454544,135.454544,181.454544,-134.545456,161.454544,135.454544,161.454544],
[28,0,658,2,266,80,-9.802202,-288.904083,0.014129,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.354065,327.021027,122.619385,330.779175,-142.223785,247.029007,123.749664,250.787155],
[15,0,214,2,174,170,-27,-296.902679,0.014129,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.389404,324.023926,84.593224,326.482269,-86.987579,154.040894,86.995049,156.499237],
[13,0,554,100,70,140,26,-203.380951,0.028258,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.612429,216.810287,75.584488,218.788055,9.567982,76.866173,79.540039,78.843948],
[11,0,2,2,210,176,-8,-132.380951,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.380951,98,236.380951,-112,60.380959,98,60.380959],
[12,0,926,2,74,142,-40,-199.380951,-0.132977,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.790665,218.560791,-4.443966,208.749435,-96.617859,77.814430,-23.271164,68.003067],
[14,0,658,84,138,126,-9,-206.902679,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.902679,69,326.902679,-69,200.902679,69,200.902679],
[23,0,278,202,34,28,-5,-259.902679,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.902679,12,273.902679,-22,245.902679,12,245.902679],
[18,0,414,202,22,6,17,-205.902679,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.902679,28,208.902679,6,202.902679,28,202.902679],
[16,0,798,84,106,150,-60,-266.902679,-0.028258,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.987961,303.527435,-11.030277,300.532501,-121.226044,153.587326,-15.268368,150.592407],
[32,0,2,180,236,30,-19.545454,-156.454544,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.545456,171.454544,98.454544,171.454544,-137.545456,141.454544,98.454544,141.454544],
[33,0,512,180,40,54,98.454544,-166.454544,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.454544,193.454544,118.454544,193.454544,78.454544,139.454544,118.454544,139.454544],
[34,0,1002,84,8,10,104.454544,-169.454544,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.454544,174.454544,108.454544,174.454544,100.454544,164.454544,108.454544,164.454544],
[35,0,1014,100,6,2,100.454544,-168.454544,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.454544,169.454544,103.454544,169.454544,97.454544,167.454544,103.454544,167.454544]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.363636,-171.363632,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.636368,181.363632,135.363632,181.363632,-134.636368,161.363632,135.363632,161.363632],
[28,0,658,2,266,80,-9.790568,-288.722076,0.014960,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.374069,326.727997,122.596184,330.707214,-142.177322,246.736954,123.792931,250.716156],
[15,0,214,2,174,170,-27,-296.720520,0.014960,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.411926,323.789917,84.568611,326.392853,-86.868828,153.808914,87.111710,156.411865],
[13,0,554,100,70,140,26,-203.285721,0.029920,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.590136,216.681152,75.558807,218.775223,9.778299,76.743805,79.746971,78.837891],
[11,0,2,2,210,176,-8,-132.285721,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.285736,98,236.285736,-112,60.285728,98,60.285728],
[12,0,926,2,74,142,-40,-199.285721,-0.134640,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.758728,218.528351,-4.428444,208.595093,-96.819847,77.813484,-23.489567,67.880219],
[14,0,658,84,138,126,-9,-206.720505,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.720520,69,326.720520,-69,200.720505,69,200.720505],
[23,0,278,202,34,28,-5,-259.720520,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.720520,12,273.720520,-22,245.720520,12,245.720520],
[18,0,414,202,22,6,17,-205.720505,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.720505,28,208.720505,6,202.720505,28,202.720505],
[16,0,798,84,106,150,-60,-266.720520,-0.029920,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.927002,303.439941,-10.974442,300.268921,-121.414322,153.507080,-15.461761,150.336044],
[32,0,2,180,236,30,-19.636364,-156.363632,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.636368,171.363632,98.363632,171.363632,-137.636368,141.363632,98.363632,141.363632],
[33,0,512,180,40,54,98.363640,-166.363632,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.363640,193.363632,118.363640,193.363632,78.363640,139.363632,118.363640,139.363632],
[34,0,1002,84,8,10,104.363640,-169.363632,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.363640,174.363632,108.363640,174.363632,100.363640,164.363632,108.363640,164.363632],
[35,0,1014,100,6,2,100.363640,-168.363632,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.363640,169.363632,103.363640,169.363632,97.363640,167.363632,103.363640,167.363632]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.272727,-171.272720,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.727280,181.272720,135.272720,181.272720,-134.727280,161.272720,135.272720,161.272720],
[28,0,658,2,266,80,-9.778934,-288.540039,0.015791,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.393967,326.434937,122.572861,330.635162,-142.130722,246.444901,123.836105,250.645157],
[15,0,214,2,174,170,-27,-296.538300,0.015791,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.434402,323.555817,84.543907,326.303345,-86.750031,153.576996,87.228279,156.324524],
[13,0,554,100,70,140,26,-203.190475,0.031582,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.567898,216.551956,75.532990,218.762344,9.988663,76.621765,79.953758,78.832146],
[11,0,2,2,210,176,-8,-132.190475,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.190491,98,236.190491,-112,60.190483,98,60.190483],
[12,0,926,2,74,142,-40,-199.190475,-0.136302,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.726685,218.495834,-4.413017,208.440704,-97.021683,77.812851,-23.708015,67.757706],
[14,0,658,84,138,126,-9,-206.538300,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.538300,69,326.538300,-69,200.538300,69,200.538300],
[23,0,278,202,34,28,-5,-259.538300,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.538300,12,273.538300,-22,245.538300,12,245.538300],
[18,0,414,202,22,6,17,-205.538300,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.538300,28,208.538300,6,202.538300,28,202.538300],
[16,0,798,84,106,150,-60,-266.538300,-0.031582,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.865891,303.352295,-10.918743,300.005157,-121.602417,153.427094,-15.655277,150.079956],
[32,0,2,180,236,30,-19.727272,-156.272720,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.727264,171.272720,98.272728,171.272720,-137.727264,141.272720,98.272728,141.272720],
[33,0,512,180,40,54,98.272728,-166.272720,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.272728,193.272720,118.272728,193.272720,78.272728,139.272720,118.272728,139.272720],
[34,0,1002,84,8,10,104.272728,-169.272720,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.272728,174.272720,108.272728,174.272720,100.272728,164.272720,108.272728,164.272720],
[35,0,1014,100,6,2,100.272728,-168.272720,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.272728,169.272720,103.272728,169.272720,97.272728,167.272720,103.272728,167.272720]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.181818,-171.181824,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.818176,181.181824,135.181824,181.181824,-134.818176,161.181824,135.181824,161.181824],
[28,0,658,2,266,80,-9.767301,-288.358032,0.016622,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.413788,326.141846,122.549469,330.563141,-142.084076,246.152908,123.879181,250.574203],
[15,0,214,2,174,170,-27,-296.356110,0.016622,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.456833,323.321716,84.519127,326.213837,-86.631195,153.345200,87.344772,156.237335],
[13,0,554,100,70,140,26,-203.095245,0.033244,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.545715,216.422745,75.507034,218.749420,10.199070,76.500099,80.160393,78.826775],
[11,0,2,2,210,176,-8,-132.095245,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.095245,98,236.095245,-112,60.095253,98,60.095253],
[12,0,926,2,74,142,-40,-199.095245,-0.137964,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.694550,218.463287,-4.397690,208.286301,-97.223358,77.812569,-23.926504,67.635574],
[14,0,658,84,138,126,-9,-206.356110,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.356110,69,326.356110,-69,200.356110,69,200.356110],
[23,0,278,202,34,28,-5,-259.356110,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.356110,12,273.356110,-22,245.356110,12,245.356110],
[18,0,414,202,22,6,17,-205.356110,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.356110,28,208.356110,6,202.356110,28,202.356110],
[16,0,798,84,106,150,-60,-266.356110,-0.033244,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.804611,303.264587,-10.863182,299.741333,-121.790352,153.347473,-15.848919,149.824219],
[32,0,2,180,236,30,-19.818182,-156.181824,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.818176,171.181824,98.181816,171.181824,-137.818176,141.181824,98.181816,141.181824],
[33,0,512,180,40,54,98.181816,-166.181824,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.181816,193.181824,118.181816,193.181824,78.181816,139.181824,118.181816,139.181824],
[34,0,1002,84,8,10,104.181816,-169.181824,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.181816,174.181824,108.181816,174.181824,100.181816,164.181824,108.181816,164.181824],
[35,0,1014,100,6,2,100.181816,-168.181824,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.181816,169.181824,103.181816,169.181824,97.181816,167.181824,103.181816,167.181824]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.090909,-171.090912,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.909088,181.090912,135.090912,181.090912,-134.909088,161.090912,135.090912,161.090912],
[28,0,658,2,266,80,-9.755667,-288.176056,0.017453,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.433502,325.848785,122.525993,330.491150,-142.037323,245.860977,123.922173,250.503326],
[15,0,214,2,174,170,-27,-296.173920,0.017453,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.479225,323.087616,84.494270,326.124329,-86.512314,153.113495,87.461182,156.150208],
[13,0,554,100,70,140,26,-203,0.034907,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.523592,216.293488,75.480949,218.736450,10.409521,76.378761,80.366882,78.821724],
[11,0,2,2,210,176,-8,-132,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236,98,236,-112,60.000008,98,60.000008],
[12,0,926,2,74,142,-40,-199,-0.139626,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.662292,218.430679,-4.382462,208.131866,-97.424881,77.812614,-24.145044,67.513809],
[14,0,658,84,138,126,-9,-206.173920,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.173920,69,326.173920,-69,200.173920,69,200.173920],
[23,0,278,202,34,28,-5,-259.173920,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.173920,12,273.173920,-22,245.173920,12,245.173920],
[18,0,414,202,22,6,17,-205.173920,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.173920,28,208.173920,6,202.173920,28,202.173920],
[16,0,798,84,106,150,-60,-266.173920,-0.034907,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.743187,303.176758,-10.807758,299.477417,-121.978111,153.268143,-16.042683,149.568787],
[32,0,2,180,236,30,-19.909090,-156.090912,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.909088,171.090912,98.090912,171.090912,-137.909088,141.090912,98.090912,141.090912],
[33,0,512,180,40,54,98.090912,-166.090912,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.090912,193.090912,118.090912,193.090912,78.090912,139.090912,118.090912,139.090912],
[34,0,1002,84,8,10,104.090912,-169.090912,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.090912,174.090912,108.090912,174.090912,100.090912,164.090912,108.090912,164.090912],
[35,0,1014,100,6,2,100.090912,-168.090912,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.090912,169.090912,103.090912,169.090912,97.090912,167.090912,103.090912,167.090912]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0,-171,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135,181,135,181,-135,161,135,161],
[28,0,658,2,266,80,-9.766289,-288.175873,0.016694,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.415497,325.950043,122.547432,330.390564,-142.080017,245.961182,123.882912,250.401703],
[15,0,214,2,174,170,-27,-296.173920,0.016694,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.458786,323.135010,84.516968,326.039703,-86.620857,153.158707,87.354889,156.063400],
[13,0,554,100,70,140,26,-203.086960,0.033389,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.543789,216.411499,75.504776,218.748291,10.217367,76.489532,80.178360,78.826324],
[11,0,2,2,210,176,-8,-132.086960,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.086975,98,236.086975,-112,60.086967,98,60.086967],
[12,0,926,2,74,142,-40,-199.086960,-0.138109,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.691742,218.460449,-4.396362,208.272873,-97.240891,77.812553,-23.945505,67.624969],
[14,0,658,84,138,126,-9,-206.173920,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.173920,69,326.173920,-69,200.173920,69,200.173920],
[23,0,278,202,34,28,-5,-259.173920,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.173920,12,273.173920,-22,245.173920,12,245.173920],
[18,0,414,202,22,6,17,-205.173920,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.173920,28,208.173920,6,202.173920,28,202.173920],
[16,0,798,84,106,150,-60,-266.173920,-0.033389,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.799278,303.090607,-10.858356,299.552032,-121.806686,153.174210,-15.865765,149.635651],
[32,0,2,180,236,30,-20,-156,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-138,171,98,171,-138,141,98,141],
[33,0,512,180,40,54,98,-166,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78,193,118,193,78,139,118,139],
[34,0,1002,84,8,10,104,-169,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100,174,108,174,100,164,108,164],
[35,0,1014,100,6,2,100,-168,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97,169,103,169,97,167,103,167]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.090909,-171.090912,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.909088,181.090912,135.090912,181.090912,-134.909088,161.090912,135.090912,161.090912],
[28,0,658,2,266,80,-9.776911,-288.175690,0.015936,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.397415,326.051270,122.568810,330.289948,-142.122635,246.061417,123.843590,250.300110],
[15,0,214,2,174,170,-27,-296.173920,0.015936,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.438309,323.182404,84.539604,325.955078,-86.729370,153.203979,87.248543,155.976654],
[13,0,554,100,70,140,26,-203.173920,0.031871,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.564035,216.529495,75.528488,218.760101,10.025251,76.600594,79.989700,78.831200],
[11,0,2,2,210,176,-8,-132.173920,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.173920,98,236.173920,-112,60.173927,98,60.173927],
[12,0,926,2,74,142,-40,-199.173920,-0.136591,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.721100,218.490189,-4.410343,208.413849,-97.056770,77.812782,-23.746008,67.736450],
[14,0,658,84,138,126,-9,-206.173920,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.173920,69,326.173920,-69,200.173920,69,200.173920],
[23,0,278,202,34,28,-5,-259.173920,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.173920,12,273.173920,-22,245.173920,12,245.173920],
[18,0,414,202,22,6,17,-205.173920,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.173920,28,208.173920,6,202.173920,28,202.173920],
[16,0,798,84,106,150,-60,-266.173920,-0.031871,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.855240,303.004364,-10.909073,299.626587,-121.635117,153.080536,-15.688946,149.702759],
[32,0,2,180,236,30,-19.909090,-156.090912,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.909088,171.090912,98.090912,171.090912,-137.909088,141.090912,98.090912,141.090912],
[33,0,512,180,40,54,98.090912,-166.090912,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.090912,193.090912,118.090912,193.090912,78.090912,139.090912,118.090912,139.090912],
[34,0,1002,84,8,10,104.090912,-169.090912,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.090912,174.090912,108.090912,174.090912,100.090912,164.090912,108.090912,164.090912],
[35,0,1014,100,6,2,100.090912,-168.090912,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.090912,169.090912,103.090912,169.090912,97.090912,167.090912,103.090912,167.090912]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.181818,-171.181824,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.818176,181.181824,135.181824,181.181824,-134.818176,161.181824,135.181824,161.181824],
[28,0,658,2,266,80,-9.787533,-288.357727,0.015177,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.379257,326.334686,122.590103,330.371552,-142.165176,246.343903,123.804184,250.380768],
[15,0,214,2,174,170,-27,-296.356110,0.015177,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.417793,323.411957,84.562172,326.052612,-86.837845,153.431549,87.142128,156.072205],
[13,0,554,100,70,140,26,-203.260864,0.030354,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.584328,216.647430,75.552078,218.771866,9.833174,76.711922,79.800926,78.836349],
[11,0,2,2,210,176,-8,-132.260864,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.260864,98,236.260864,-112,60.260872,98,60.260872],
[12,0,926,2,74,142,-40,-199.260864,-0.135073,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.750381,218.519867,-4.424412,208.554810,-96.872513,77.813278,-23.546549,67.848221],
[14,0,658,84,138,126,-9,-206.356110,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.356110,69,326.356110,-69,200.356110,69,200.356110],
[23,0,278,202,34,28,-5,-259.356110,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.356110,12,273.356110,-22,245.356110,12,245.356110],
[18,0,414,202,22,6,17,-205.356110,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.356110,28,208.356110,6,202.356110,28,202.356110],
[16,0,798,84,106,150,-60,-266.356110,-0.030354,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.911072,303.100220,-10.959900,299.883240,-121.463409,153.169312,-15.512234,149.952332],
[32,0,2,180,236,30,-19.818182,-156.181824,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.818176,171.181824,98.181816,171.181824,-137.818176,141.181824,98.181816,141.181824],
[33,0,512,180,40,54,98.181816,-166.181824,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.181816,193.181824,118.181816,193.181824,78.181816,139.181824,118.181816,139.181824],
[34,0,1002,84,8,10,104.181816,-169.181824,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.181816,174.181824,108.181816,174.181824,100.181816,164.181824,108.181816,164.181824],
[35,0,1014,100,6,2,100.181816,-168.181824,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.181816,169.181824,103.181816,169.181824,97.181816,167.181824,103.181816,167.181824]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.272727,-171.272720,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.727280,181.272720,135.272720,181.272720,-134.727280,161.272720,135.272720,161.272720],
[28,0,658,2,266,80,-9.798156,-288.539764,0.014418,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.361023,326.618103,122.611328,330.453125,-142.207642,246.626404,123.764709,250.461441],
[15,0,214,2,174,170,-27,-296.538300,0.014418,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.397240,323.641510,84.584671,326.150146,-86.946274,153.659180,87.035637,156.167801],
[13,0,554,100,70,140,26,-203.347824,0.028836,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.604668,216.765366,75.575569,218.783600,9.641130,76.823570,79.612030,78.841805],
[11,0,2,2,210,176,-8,-132.347824,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.347839,98,236.347839,-112,60.347832,98,60.347832],
[12,0,926,2,74,142,-40,-199.347824,-0.133556,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.779564,218.549500,-4.438553,208.695740,-96.688133,77.814056,-23.347126,67.960297],
[14,0,658,84,138,126,-9,-206.538300,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.538300,69,326.538300,-69,200.538300,69,200.538300],
[23,0,278,202,34,28,-5,-259.538300,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.538300,12,273.538300,-22,245.538300,12,245.538300],
[18,0,414,202,22,6,17,-205.538300,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.538300,28,208.538300,6,202.538300,28,202.538300],
[26,0,240,202,36,28,-2,-257.538300,0,1,1,18,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20,271.538300,16,271.538300,-20,243.538300,16,243.538300],
[16,0,798,84,106,150,-60,-266.538300,-0.028836,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.966766,303.195984,-11.010838,300.139832,-121.291550,153.258362,-15.335621,150.202179],
[32,0,2,180,236,30,-19.727272,-156.272720,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.727264,171.272720,98.272728,171.272720,-137.727264,141.272720,98.272728,141.272720],
[33,0,512,180,40,54,98.272728,-166.272720,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.272728,193.272720,118.272728,193.272720,78.272728,139.272720,118.272728,139.272720],
[34,0,1002,84,8,10,104.272728,-169.272720,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.272728,174.272720,108.272728,174.272720,100.272728,164.272720,108.272728,164.272720],
[35,0,1014,100,6,2,100.272728,-168.272720,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.272728,169.272720,103.272728,169.272720,97.272728,167.272720,103.272728,167.272720],
[36,0,1002,64,18,18,102.272728,-169.272720,0,1,1,9,9,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,93.272728,178.272720,111.272728,178.272720,93.272728,160.272720,111.272728,160.272720]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.363636,-171.363632,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.636368,181.363632,135.363632,181.363632,-134.636368,161.363632,135.363632,161.363632],
[28,0,658,2,266,80,-9.808779,-288.721802,0.013659,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.342712,326.901459,122.632477,330.534668,-142.250031,246.908936,123.725159,250.542145],
[15,0,214,2,174,170,-27,-296.720490,0.013659,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.376663,323.871033,84.607109,326.247650,-87.054688,153.886902,86.929085,156.263504],
[13,0,554,100,70,140,26,-203.434784,0.027318,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.625053,216.883270,75.598938,218.795303,9.449127,76.935501,79.423004,78.847534],
[11,0,2,2,210,176,-8,-132.434784,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.434784,98,236.434784,-112,60.434792,98,60.434792],
[12,0,926,2,74,142,-40,-199.434784,-0.132038,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.808655,218.579102,-4.452782,208.836670,-96.503616,77.815125,-23.147741,68.072678],
[14,0,658,84,138,126,-9,-206.720490,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.720490,69,326.720490,-69,200.720490,69,200.720490],
[23,0,278,202,34,28,-5,-259.720490,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.720490,12,273.720490,-22,245.720490,12,245.720490],
[18,0,414,202,22,6,17,-205.720490,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.720490,28,208.720490,6,202.720490,28,202.720490],
[26,0,240,202,36,28,-2,-257.720490,0,1,1,18,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20,271.720490,16,271.720490,-20,243.720490,16,243.720490],
[16,0,798,84,106,150,-60,-266.720490,-0.027318,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.022339,303.291687,-11.061893,300.396301,-121.119560,153.347656,-15.159111,150.452286],
[32,0,2,180,236,30,-19.636364,-156.363632,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.636368,171.363632,98.363632,171.363632,-137.636368,141.363632,98.363632,141.363632],
[33,0,512,180,40,54,98.363640,-166.363632,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.363640,193.363632,118.363640,193.363632,78.363640,139.363632,118.363640,139.363632],
[34,0,1002,84,8,10,104.363640,-169.363632,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.363640,174.363632,108.363640,174.363632,100.363640,164.363632,108.363640,164.363632],
[35,0,1014,100,6,2,100.363640,-168.363632,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.363640,169.363632,103.363640,169.363632,97.363640,167.363632,103.363640,167.363632],
[36,0,1002,64,18,18,102.363640,-169.363632,0,1,1,9,9,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,93.363640,178.363632,111.363640,178.363632,93.363640,160.363632,111.363640,160.363632]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.454545,-171.454544,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.545456,181.454544,135.454544,181.454544,-134.545456,161.454544,135.454544,161.454544],
[28,0,658,2,266,80,-9.819402,-288.903870,0.012900,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.324326,327.184845,122.653542,330.616241,-142.292343,247.191513,123.685524,250.622879],
[15,0,214,2,174,170,-27,-296.902710,0.012900,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.356041,324.100586,84.629478,326.345154,-87.163055,154.114731,86.822464,156.359314],
[13,0,554,100,70,140,26,-203.521744,0.025801,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.645489,217.001129,75.622192,218.806961,9.257162,77.047729,79.233864,78.853569],
[11,0,2,2,210,176,-8,-132.521744,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.521759,98,236.521759,-112,60.521751,98,60.521751],
[12,0,926,2,74,142,-40,-199.521744,-0.130520,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.837669,218.608673,-4.467091,208.977570,-96.318970,77.816475,-22.948393,68.185379],
[14,0,658,84,138,126,-9,-206.902695,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,326.902710,69,326.902710,-69,200.902695,69,200.902695],
[23,0,278,202,34,28,-5,-259.902710,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,273.902710,12,273.902710,-22,245.902710,12,245.902710],
[18,0,414,202,22,6,17,-205.902695,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,208.902695,28,208.902695,6,202.902695,28,202.902695],
[26,0,240,202,36,28,-2,-257.902710,0,1,1,18,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20,271.902710,16,271.902710,-20,243.902710,16,243.902710],
[16,0,798,84,106,150,-60,-266.902710,-0.025801,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.077782,303.387329,-11.113060,300.652771,-120.947433,153.437256,-14.982708,150.702698],
[32,0,2,180,236,30,-19.545454,-156.454544,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.545456,171.454544,98.454544,171.454544,-137.545456,141.454544,98.454544,141.454544],
[33,0,512,180,40,54,98.454544,-166.454544,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.454544,193.454544,118.454544,193.454544,78.454544,139.454544,118.454544,139.454544],
[34,0,1002,84,8,10,104.454544,-169.454544,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.454544,174.454544,108.454544,174.454544,100.454544,164.454544,108.454544,164.454544],
[35,0,1014,100,6,2,100.454544,-168.454544,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.454544,169.454544,103.454544,169.454544,97.454544,167.454544,103.454544,167.454544],
[36,0,1002,64,18,18,102.454544,-169.454544,0,1,1,9,9,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,93.454544,178.454544,111.454544,178.454544,93.454544,160.454544,111.454544,160.454544]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.545455,-171.545456,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.454544,181.545456,135.545456,181.545456,-134.454544,161.545456,135.545456,161.545456],
[28,0,658,2,266,80,-9.830025,-289.085907,0.012141,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.305847,327.468201,122.674522,330.697723,-142.334564,247.474091,123.645805,250.703629],
[15,0,214,2,174,170,-27,-297.084869,0.012141,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.335381,324.330048,84.651794,326.442627,-87.271393,154.342590,86.715782,156.455139],
[13,0,554,100,70,140,26,-203.608688,0.024283,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.665970,217.118958,75.645332,218.818588,9.065233,77.160225,79.044601,78.859856],
[11,0,2,2,210,176,-8,-132.608688,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.608704,98,236.608704,-112,60.608696,98,60.608696],
[12,0,926,2,74,142,-40,-199.608688,-0.129003,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.866592,218.638153,-4.481483,209.118423,-96.134201,77.818085,-22.749088,68.298340],
[14,0,658,84,138,126,-9,-207.084869,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.084869,69,327.084869,-69,201.084869,69,201.084869],
[23,0,278,202,34,28,-5,-260.084869,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.084869,12,274.084869,-22,246.084869,12,246.084869],
[18,0,414,202,22,6,17,-206.084869,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.084869,28,209.084869,6,203.084869,28,203.084869],
[26,0,240,202,36,28,-2,-258.084869,0,1,1,18,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20,272.084869,16,272.084869,-20,244.084869,16,244.084869],
[16,0,798,84,106,150,-60,-267.084869,-0.024283,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.133087,303.482819,-11.164337,300.909088,-120.775154,153.527039,-14.806404,150.953308],
[32,0,2,180,236,30,-19.454546,-156.545456,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.454544,171.545456,98.545456,171.545456,-137.454544,141.545456,98.545456,141.545456],
[33,0,512,180,40,54,98.545456,-166.545456,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.545456,193.545456,118.545456,193.545456,78.545456,139.545456,118.545456,139.545456],
[34,0,1002,84,8,10,104.545456,-169.545456,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.545456,174.545456,108.545456,174.545456,100.545456,164.545456,108.545456,164.545456],
[35,0,1014,100,6,2,100.545456,-168.545456,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.545456,169.545456,103.545456,169.545456,97.545456,167.545456,103.545456,167.545456],
[36,0,1002,64,18,18,102.545456,-169.545456,0,1,1,9,9,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,93.545456,178.545456,111.545456,178.545456,93.545456,160.545456,111.545456,160.545456]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.636364,-171.636368,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.363632,181.636368,135.636368,181.636368,-134.363632,161.636368,135.636368,161.636368],
[28,0,658,2,266,80,-9.840648,-289.268005,0.011383,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.287323,327.751556,122.695442,330.779266,-142.376740,247.756744,123.606026,250.784454],
[15,0,214,2,174,170,-27,-297.267090,0.011383,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.314690,324.559570,84.674042,326.540100,-87.379692,154.570587,86.609039,156.551117],
[13,0,554,100,70,140,26,-203.695648,0.022765,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.686497,217.236755,75.668365,218.830185,8.873344,77.273033,78.855209,78.866455],
[11,0,2,2,210,176,-8,-132.695648,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.695648,98,236.695648,-112,60.695656,98,60.695656],
[12,0,926,2,74,142,-40,-199.695648,-0.127485,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.895432,218.667633,-4.495960,209.259277,-95.949295,77.819992,-22.549822,68.411636],
[14,0,658,84,138,126,-9,-207.267075,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.267090,69,327.267090,-69,201.267075,69,201.267075],
[23,0,278,202,34,28,-5,-260.267090,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.267090,12,274.267090,-22,246.267090,12,246.267090],
[18,0,414,202,22,6,17,-206.267075,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.267075,28,209.267075,6,203.267075,28,203.267075],
[16,0,798,84,106,150,-60,-267.267090,-0.022765,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.188263,303.578278,-11.215725,301.165375,-120.602737,153.617157,-14.630203,151.204254],
[32,0,2,180,236,30,-19.363636,-156.636368,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.363632,171.636368,98.636368,171.636368,-137.363632,141.636368,98.636368,141.636368],
[33,0,512,180,40,54,98.636360,-166.636368,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.636360,193.636368,118.636360,193.636368,78.636360,139.636368,118.636360,139.636368],
[34,0,1002,84,8,10,104.636360,-169.636368,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.636360,174.636368,108.636360,174.636368,100.636360,164.636368,108.636360,164.636368],
[35,0,1014,100,6,2,100.636360,-168.636368,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.636360,169.636368,103.636360,169.636368,97.636360,167.636368,103.636360,167.636368]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.727273,-171.727280,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.272720,181.727280,135.727280,181.727280,-134.272720,161.727280,135.727280,161.727280],
[28,0,658,2,266,80,-9.851271,-289.450073,0.010624,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.268707,328.034882,122.716278,330.860748,-142.418823,248.039398,123.566162,250.865265],
[15,0,214,2,174,170,-27,-297.449280,0.010624,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.293961,324.789032,84.696213,326.637543,-87.487961,154.798630,86.502220,156.647125],
[13,0,554,100,70,140,26,-203.782608,0.021247,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.707073,217.354523,75.691269,218.841736,8.681496,77.386131,78.665695,78.873344],
[11,0,2,2,210,176,-8,-132.782608,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.782623,98,236.782623,-112,60.782616,98,60.782616],
[12,0,926,2,74,142,-40,-199.782608,-0.125967,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.924187,218.697052,-4.510513,209.400116,-95.764267,77.822174,-22.350594,68.525223],
[14,0,658,84,138,126,-9,-207.449280,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.449280,69,327.449280,-69,201.449280,69,201.449280],
[23,0,278,202,34,28,-5,-260.449280,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.449280,12,274.449280,-22,246.449280,12,246.449280],
[18,0,414,202,22,6,17,-206.449280,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.449280,28,209.449280,6,203.449280,28,203.449280],
[16,0,798,84,106,150,-60,-267.449280,-0.021247,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.243301,303.673645,-11.267227,301.421570,-120.430183,153.707489,-14.454109,151.455429],
[32,0,2,180,236,30,-19.272728,-156.727280,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.272736,171.727280,98.727272,171.727280,-137.272736,141.727280,98.727272,141.727280],
[33,0,512,180,40,54,98.727272,-166.727280,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.727272,193.727280,118.727272,193.727280,78.727272,139.727280,118.727272,139.727280],
[34,0,1002,84,8,10,104.727272,-169.727280,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.727272,174.727280,108.727272,174.727280,100.727272,164.727280,108.727272,164.727280],
[35,0,1014,100,6,2,100.727272,-168.727280,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.727272,169.727280,103.727272,169.727280,97.727272,167.727280,103.727272,167.727280]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.818182,-171.818176,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.181824,181.818176,135.818176,181.818176,-134.181824,161.818176,135.818176,161.818176],
[28,0,658,2,266,80,-9.861894,-289.632141,0.009865,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.250015,328.318176,122.737045,330.942200,-142.460831,248.322083,123.526230,250.946106],
[15,0,214,2,174,170,-27,-297.631470,0.009865,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.273201,325.018494,84.718338,326.734955,-87.596191,155.026764,86.395348,156.743240],
[13,0,554,100,70,140,26,-203.869568,0.019730,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.727694,217.472275,75.714066,218.853271,8.489687,77.499519,78.476059,78.880516],
[11,0,2,2,210,176,-8,-132.869568,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.869568,98,236.869568,-112,60.869576,98,60.869576],
[12,0,926,2,74,142,-40,-199.869568,-0.124450,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.952843,218.726440,-4.525150,209.540924,-95.579102,77.824646,-22.151409,68.639130],
[14,0,658,84,138,126,-9,-207.631470,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.631470,69,327.631470,-69,201.631470,69,201.631470],
[23,0,278,202,34,28,-5,-260.631470,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.631470,12,274.631470,-22,246.631470,12,246.631470],
[18,0,414,202,22,6,17,-206.631470,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.631470,28,209.631470,6,203.631470,28,203.631470],
[16,0,798,84,106,150,-60,-267.631470,-0.019730,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.298218,303.768921,-11.318844,301.677673,-120.257492,153.798096,-14.278122,151.706879],
[32,0,2,180,236,30,-19.181818,-156.818176,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.181824,171.818176,98.818184,171.818176,-137.181824,141.818176,98.818184,141.818176],
[33,0,512,180,40,54,98.818184,-166.818176,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.818184,193.818176,118.818184,193.818176,78.818184,139.818176,118.818184,139.818176],
[34,0,1002,84,8,10,104.818184,-169.818176,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.818184,174.818176,108.818184,174.818176,100.818184,164.818176,108.818184,164.818176],
[35,0,1014,100,6,2,100.818184,-168.818176,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.818184,169.818176,103.818184,169.818176,97.818184,167.818176,103.818184,167.818176]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,0.909091,-171.909088,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.090912,181.909088,135.909088,181.909088,-134.090912,161.909088,135.909088,161.909088],
[28,0,658,2,266,80,-9.872517,-289.814240,0.009106,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.231232,328.601501,122.757721,331.023682,-142.502747,248.604813,123.486206,251.026993],
[15,0,214,2,174,170,-27,-297.813660,0.009106,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.252396,325.247925,84.740387,326.832367,-87.704384,155.254974,86.288399,156.839417],
[13,0,554,100,70,140,26,-203.956528,0.018212,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.748362,217.589981,75.736755,218.864761,8.297918,77.613205,78.286316,78.887978],
[11,0,2,2,210,176,-8,-132.956528,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,236.956543,98,236.956543,-112,60.956535,98,60.956535],
[12,0,926,2,74,142,-40,-199.956528,-0.122932,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-77.981422,218.755768,-4.539871,209.681717,-95.393814,77.827393,-21.952263,68.753326],
[14,0,658,84,138,126,-9,-207.813660,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.813660,69,327.813660,-69,201.813660,69,201.813660],
[23,0,278,202,34,28,-5,-260.813660,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.813660,12,274.813660,-22,246.813660,12,246.813660],
[18,0,414,202,22,6,17,-206.813660,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.813660,28,209.813660,6,203.813660,28,203.813660],
[16,0,798,84,106,150,-60,-267.813660,-0.018212,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.352997,303.864105,-11.370567,301.933716,-120.084663,153.888977,-14.102238,151.958588],
[32,0,2,180,236,30,-19.090908,-156.909088,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.090912,171.909088,98.909088,171.909088,-137.090912,141.909088,98.909088,141.909088],
[33,0,512,180,40,54,98.909088,-166.909088,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,78.909088,193.909088,118.909088,193.909088,78.909088,139.909088,118.909088,139.909088],
[34,0,1002,84,8,10,104.909088,-169.909088,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.909088,174.909088,108.909088,174.909088,100.909088,164.909088,108.909088,164.909088],
[35,0,1014,100,6,2,100.909088,-168.909088,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.909088,169.909088,103.909088,169.909088,97.909088,167.909088,103.909088,167.909088]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1,-172,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134,182,136,182,-134,162,136,162],
[28,0,658,2,266,80,-9.883141,-289.996338,0.008347,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.212402,328.884766,122.778343,331.105103,-142.544617,248.887558,123.446129,251.107895],
[15,0,214,2,174,170,-27,-297.995850,0.008347,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.231560,325.477356,84.762383,326.929749,-87.812546,155.483276,86.181396,156.935669],
[13,0,554,100,70,140,26,-204.043472,0.016694,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.769075,217.707642,75.759323,218.876205,8.106190,77.727158,78.096436,78.895714],
[11,0,2,2,210,176,-8,-133.043472,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.043488,98,237.043488,-112,61.043480,98,61.043480],
[12,0,926,2,74,142,-40,-200.043472,-0.121414,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.009911,218.785049,-4.554672,209.822464,-95.208405,77.830406,-21.753162,68.867813],
[14,0,658,84,138,126,-9,-207.995850,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,327.995850,69,327.995850,-69,201.995850,69,201.995850],
[23,0,278,202,34,28,-5,-260.995850,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,274.995850,12,274.995850,-22,246.995850,12,246.995850],
[18,0,414,202,22,6,17,-206.995850,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,209.995850,28,209.995850,6,203.995850,28,203.995850],
[16,0,798,84,106,150,-60,-267.995850,-0.016694,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.407639,303.959198,-11.422413,302.189667,-119.911690,153.980103,-13.926464,152.210571],
[32,0,2,180,236,30,-19,-157,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137,172,99,172,-137,142,99,142],
[33,0,512,180,40,54,99,-167,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79,194,119,194,79,140,119,140],
[34,0,1002,84,8,10,105,-170,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101,175,109,175,101,165,109,165],
[35,0,1014,100,6,2,101,-169,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98,170,104,170,98,168,104,168]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.090909,-172.090912,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.909088,182.090912,136.090912,182.090912,-133.909088,162.090912,136.090912,162.090912],
[28,0,658,2,266,80,-9.893764,-290.178436,0.007588,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.193466,329.168030,122.798882,331.186523,-142.586411,249.170349,123.405937,251.188843],
[15,0,214,2,174,170,-27,-298.178040,0.007588,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.210686,325.706757,84.784302,327.027130,-87.920670,155.711655,86.074310,157.032013],
[13,0,554,100,70,140,26,-204.130432,0.015177,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.789837,217.825302,75.781776,218.887634,7.914505,77.841423,77.906448,78.903755],
[11,0,2,2,210,176,-8,-133.130432,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.130432,98,237.130432,-112,61.130440,98,61.130440],
[12,0,926,2,74,142,-40,-200.130432,-0.119897,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.038307,218.814301,-4.569550,209.963211,-95.022858,77.833717,-21.554096,68.982620],
[14,0,658,84,138,126,-9,-208.178055,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.178040,69,328.178040,-69,202.178055,69,202.178055],
[23,0,278,202,34,28,-5,-261.178040,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.178040,12,275.178040,-22,247.178040,12,247.178040],
[18,0,414,202,22,6,17,-207.178055,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.178055,28,210.178055,6,204.178055,28,204.178055],
[16,0,798,84,106,150,-60,-268.178040,-0.015177,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.462158,304.054230,-11.474361,302.445557,-119.738586,154.071503,-13.750790,152.462830],
[32,0,2,180,236,30,-18.909090,-157.090912,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.909088,172.090912,99.090912,172.090912,-136.909088,142.090912,99.090912,142.090912],
[33,0,512,180,40,54,99.090912,-167.090912,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.090912,194.090912,119.090912,194.090912,79.090912,140.090912,119.090912,140.090912],
[34,0,1002,84,8,10,105.090912,-170.090912,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.090912,175.090912,109.090912,175.090912,101.090912,165.090912,109.090912,165.090912],
[35,0,1014,100,6,2,101.090912,-169.090912,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.090912,170.090912,104.090912,170.090912,98.090912,168.090912,104.090912,168.090912]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.181818,-172.181824,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.818176,182.181824,136.181824,182.181824,-133.818176,162.181824,136.181824,162.181824],
[28,0,658,2,266,80,-9.904387,-290.360596,0.006830,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.174469,329.451355,122.819336,331.267975,-142.628113,249.453201,123.365692,251.269852],
[15,0,214,2,174,170,-27,-298.360260,0.006830,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.189781,325.936188,84.806168,327.124512,-88.028763,155.940140,85.967178,157.128479],
[13,0,554,100,70,140,26,-204.217392,0.013659,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.810644,217.942917,75.804108,218.899017,7.722858,77.955978,77.716324,78.912079],
[11,0,2,2,210,176,-8,-133.217392,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.217407,98,237.217407,-112,61.217400,98,61.217400],
[12,0,926,2,74,142,-40,-200.217392,-0.118379,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.066620,218.843506,-4.584518,210.103928,-94.837181,77.837318,-21.355082,69.097733],
[14,0,658,84,138,126,-9,-208.360260,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.360260,69,328.360260,-69,202.360260,69,202.360260],
[23,0,278,202,34,28,-5,-261.360260,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.360260,12,275.360260,-22,247.360260,12,247.360260],
[18,0,414,202,22,6,17,-207.360260,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.360260,28,210.360260,6,204.360260,28,204.360260],
[16,0,798,84,106,150,-60,-268.360260,-0.013659,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.516541,304.149200,-11.526424,302.701385,-119.565338,154.163193,-13.575226,152.715363],
[32,0,2,180,236,30,-18.818182,-157.181824,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.818176,172.181824,99.181816,172.181824,-136.818176,142.181824,99.181816,142.181824],
[33,0,512,180,40,54,99.181816,-167.181824,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.181816,194.181824,119.181816,194.181824,79.181816,140.181824,119.181816,140.181824],
[34,0,1002,84,8,10,105.181816,-170.181824,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.181816,175.181824,109.181816,175.181824,101.181816,165.181824,109.181816,165.181824],
[35,0,1014,100,6,2,101.181816,-169.181824,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.181816,170.181824,104.181816,170.181824,98.181816,168.181824,104.181816,168.181824]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.272727,-172.272720,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.727280,182.272720,136.272720,182.272720,-133.727280,162.272720,136.272720,162.272720],
[28,0,658,2,266,80,-9.915010,-290.542694,0.006071,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.155380,329.734558,122.839706,331.349365,-142.669724,249.736023,123.325363,251.350830],
[15,0,214,2,174,170,-27,-298.542450,0.006071,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.168839,326.165558,84.827965,327.221863,-88.136826,156.168671,85.859978,157.224976],
[13,0,554,100,70,140,26,-204.304352,0.012141,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.831499,218.060501,75.826340,218.910370,7.531256,78.070824,77.526093,78.920700],
[11,0,2,2,210,176,-8,-133.304352,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.304352,98,237.304352,-112,61.304359,98,61.304359],
[12,0,926,2,74,142,-40,-200.304352,-0.116861,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.094849,218.872681,-4.599560,210.244629,-94.651382,77.841187,-21.156101,69.213135],
[14,0,658,84,138,126,-9,-208.542450,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.542450,69,328.542450,-69,202.542450,69,202.542450],
[23,0,278,202,34,28,-5,-261.542450,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.542450,12,275.542450,-22,247.542450,12,247.542450],
[18,0,414,202,22,6,17,-207.542450,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.542450,28,210.542450,6,204.542450,28,204.542450],
[16,0,798,84,106,150,-60,-268.542450,-0.012141,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.570786,304.244049,-11.578602,302.957092,-119.391953,154.255112,-13.399769,152.968155],
[32,0,2,180,236,30,-18.727272,-157.272720,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.727264,172.272720,99.272728,172.272720,-136.727264,142.272720,99.272728,142.272720],
[33,0,512,180,40,54,99.272728,-167.272720,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.272728,194.272720,119.272728,194.272720,79.272728,140.272720,119.272728,140.272720],
[34,0,1002,84,8,10,105.272728,-170.272720,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.272728,175.272720,109.272728,175.272720,101.272728,165.272720,109.272728,165.272720],
[35,0,1014,100,6,2,101.272728,-169.272720,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.272728,170.272720,104.272728,170.272720,98.272728,168.272720,104.272728,168.272720]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.363636,-172.363632,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.636368,182.363632,136.363632,182.363632,-133.636368,162.363632,136.363632,162.363632],
[15,0,214,2,174,170,-27,-298.724640,0.005312,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.147858,326.394897,84.849686,327.319183,-88.244843,156.397308,85.752701,157.321564],
[13,0,554,100,70,140,26,-204.391312,0.010624,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.852400,218.178055,75.848450,218.921692,7.339695,78.185951,77.335739,78.929596],
[11,0,2,2,210,176,-8,-133.391312,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.391327,98,237.391327,-112,61.391319,98,61.391319],
[12,0,926,2,74,142,-40,-200.391312,-0.115343,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.122986,218.901794,-4.614689,210.385300,-94.465469,77.845345,-20.957170,69.328842],
[14,0,658,84,138,126,-9,-208.724640,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.724640,69,328.724640,-69,202.724640,69,202.724640],
[23,0,278,202,34,28,-5,-261.724640,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.724640,12,275.724640,-22,247.724640,12,247.724640],
[18,0,414,202,22,6,17,-207.724640,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.724640,28,210.724640,6,204.724640,28,204.724640],
[16,0,798,84,106,150,-60,-268.724640,-0.010624,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.624908,304.338837,-11.630886,303.212738,-119.218430,154.347290,-13.224415,153.221191],
[32,0,2,180,236,30,-18.636364,-157.363632,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.636368,172.363632,99.363632,172.363632,-136.636368,142.363632,99.363632,142.363632],
[33,0,512,180,40,54,99.363640,-167.363632,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.363640,194.363632,119.363640,194.363632,79.363640,140.363632,119.363640,140.363632],
[34,0,1002,84,8,10,105.363640,-170.363632,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.363640,175.363632,109.363640,175.363632,101.363640,165.363632,109.363640,165.363632],
[35,0,1014,100,6,2,101.363640,-169.363632,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.363640,170.363632,104.363640,170.363632,98.363640,168.363632,104.363640,168.363632]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.454545,-172.454544,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.545456,182.454544,136.454544,182.454544,-133.545456,162.454544,136.454544,162.454544],
[15,0,214,2,174,170,-27,-298.906830,0.004553,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.126839,326.624268,84.871353,327.416473,-88.352829,156.626022,85.645370,157.418243],
[13,0,554,100,70,140,26,-204.478256,0.009106,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.873346,218.295563,75.870438,218.932968,7.148178,78.301361,77.145271,78.938782],
[11,0,2,2,210,176,-8,-133.478256,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.478271,98,237.478271,-112,61.478264,98,61.478264],
[12,0,926,2,74,142,-40,-200.478256,-0.113826,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.151031,218.930862,-4.629898,210.525940,-94.279419,77.849770,-20.758284,69.444839],
[14,0,658,84,138,126,-9,-208.906830,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,328.906830,69,328.906830,-69,202.906830,69,202.906830],
[23,0,278,202,34,28,-5,-261.906830,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,275.906830,12,275.906830,-22,247.906830,12,247.906830],
[18,0,414,202,22,6,17,-207.906830,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,210.906830,28,210.906830,6,204.906830,28,204.906830],
[16,0,798,84,106,150,-60,-268.906830,-0.009106,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.678886,304.433533,-11.683285,303.468292,-119.044777,154.439743,-13.049175,153.474518],
[32,0,2,180,236,30,-18.545454,-157.454544,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.545456,172.454544,99.454544,172.454544,-136.545456,142.454544,99.454544,142.454544],
[33,0,512,180,40,54,99.454544,-167.454544,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.454544,194.454544,119.454544,194.454544,79.454544,140.454544,119.454544,140.454544],
[34,0,1002,84,8,10,105.454544,-170.454544,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.454544,175.454544,109.454544,175.454544,101.454544,165.454544,109.454544,165.454544],
[35,0,1014,100,6,2,101.454544,-169.454544,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.454544,170.454544,104.454544,170.454544,98.454544,168.454544,104.454544,168.454544]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.545455,-172.545456,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.454544,182.545456,136.545456,182.545456,-133.454544,162.545456,136.545456,162.545456],
[15,0,214,2,174,170,-27,-299.089020,0.003794,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.105789,326.853577,84.892952,327.513763,-88.460785,156.854797,85.537964,157.514984],
[13,0,554,100,70,140,26,-204.565216,0.007588,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.894341,218.413040,75.892326,218.944229,6.956703,78.417076,76.954689,78.948257],
[11,0,2,2,210,176,-8,-133.565216,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.565216,98,237.565216,-112,61.565224,98,61.565224],
[12,0,926,2,74,142,-40,-200.565216,-0.112308,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.178993,218.959900,-4.645184,210.666565,-94.093246,77.854492,-20.559437,69.561157],
[14,0,658,84,138,126,-9,-209.089020,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.089020,69,329.089020,-69,203.089020,69,203.089020],
[23,0,278,202,34,28,-5,-262.089020,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.089020,12,276.089020,-22,248.089020,12,248.089020],
[18,0,414,202,22,6,17,-208.089020,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.089020,28,211.089020,6,205.089020,28,205.089020],
[16,0,798,84,106,150,-60,-269.089020,-0.007588,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.732742,304.528137,-11.735790,303.723755,-118.870987,154.532455,-12.874039,153.728088],
[32,0,2,180,236,30,-18.454546,-157.545456,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.454544,172.545456,99.545456,172.545456,-136.454544,142.545456,99.545456,142.545456],
[33,0,512,180,40,54,99.545456,-167.545456,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.545456,194.545456,119.545456,194.545456,79.545456,140.545456,119.545456,140.545456],
[34,0,1002,84,8,10,105.545456,-170.545456,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.545456,175.545456,109.545456,175.545456,101.545456,165.545456,109.545456,165.545456],
[35,0,1014,100,6,2,101.545456,-169.545456,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.545456,170.545456,104.545456,170.545456,98.545456,168.545456,104.545456,168.545456]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.636364,-172.636368,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.363632,182.636368,136.636368,182.636368,-133.363632,162.636368,136.636368,162.636368],
[15,0,214,2,174,170,-27,-299.271240,0.003035,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.084702,327.082916,84.914497,327.611084,-88.568695,157.083710,85.430511,157.611862],
[13,0,554,100,70,140,26,-204.652176,0.006071,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.915379,218.530502,75.914093,218.955444,6.765272,78.533081,76.763985,78.958031],
[11,0,2,2,210,176,-8,-133.652176,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.652191,98,237.652191,-112,61.652184,98,61.652184],
[12,0,926,2,74,142,-40,-200.652176,-0.110790,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.206863,218.988892,-4.660561,210.807175,-93.906944,77.859497,-20.360640,69.677765],
[14,0,658,84,138,126,-9,-209.271225,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.271240,69,329.271240,-69,203.271225,69,203.271225],
[23,0,278,202,34,28,-5,-262.271240,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.271240,12,276.271240,-22,248.271240,12,248.271240],
[18,0,414,202,22,6,17,-208.271225,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.271225,28,211.271225,6,205.271225,28,205.271225],
[16,0,798,84,106,150,-60,-269.271240,-0.006071,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.786453,304.622681,-11.788410,303.979187,-118.697060,154.625458,-12.699013,153.981964],
[32,0,2,180,236,30,-18.363636,-157.636368,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.363632,172.636368,99.636368,172.636368,-136.363632,142.636368,99.636368,142.636368],
[33,0,512,180,40,54,99.636360,-167.636368,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.636360,194.636368,119.636360,194.636368,79.636360,140.636368,119.636360,140.636368],
[34,0,1002,84,8,10,105.636360,-170.636368,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.636360,175.636368,109.636360,175.636368,101.636360,165.636368,109.636360,165.636368],
[35,0,1014,100,6,2,101.636360,-169.636368,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.636360,170.636368,104.636360,170.636368,98.636360,168.636368,104.636360,168.636368]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.727273,-172.727280,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.272720,182.727280,136.727280,182.727280,-133.272720,162.727280,136.727280,162.727280],
[15,0,214,2,174,170,-27,-299.453430,0.002277,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.063583,327.312225,84.935966,327.708313,-88.676575,157.312653,85.322975,157.708771],
[13,0,554,100,70,140,26,-204.739136,0.004553,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.936466,218.647934,75.935738,218.966644,6.573889,78.649384,76.573166,78.968094],
[11,0,2,2,210,176,-8,-133.739136,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.739136,98,237.739136,-112,61.739143,98,61.739143],
[12,0,926,2,74,142,-40,-200.739136,-0.109273,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.234650,219.017853,-4.676014,210.947754,-93.720520,77.864792,-20.161888,69.794693],
[14,0,658,84,138,126,-9,-209.453430,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.453430,69,329.453430,-69,203.453430,69,203.453430],
[23,0,278,202,34,28,-5,-262.453430,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.453430,12,276.453430,-22,248.453430,12,248.453430],
[18,0,414,202,22,6,17,-208.453430,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.453430,28,211.453430,6,205.453430,28,205.453430],
[16,0,798,84,106,150,-60,-269.453430,-0.004553,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.840042,304.717133,-11.841141,304.234528,-118.522995,154.718689,-12.524094,154.236084],
[32,0,2,180,236,30,-18.272728,-157.727280,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.272736,172.727280,99.727272,172.727280,-136.272736,142.727280,99.727272,142.727280],
[33,0,512,180,40,54,99.727272,-167.727280,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.727272,194.727280,119.727272,194.727280,79.727272,140.727280,119.727272,140.727280],
[34,0,1002,84,8,10,105.727272,-170.727280,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.727272,175.727280,109.727272,175.727280,101.727272,165.727280,109.727272,165.727280],
[35,0,1014,100,6,2,101.727272,-169.727280,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.727272,170.727280,104.727272,170.727280,98.727272,168.727280,104.727272,168.727280]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.818182,-172.818176,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.181824,182.818176,136.818176,182.818176,-133.181824,162.818176,136.818176,162.818176],
[15,0,214,2,174,170,-27,-299.635620,0.001518,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.042427,327.541504,84.957375,327.805573,-88.784424,157.541687,85.215378,157.805771],
[13,0,554,100,70,140,26,-204.826080,0.003035,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.957596,218.765305,75.957275,218.977783,6.382545,78.765953,76.382225,78.978424],
[11,0,2,2,210,176,-8,-133.826080,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.826080,98,237.826080,-112,61.826088,98,61.826088],
[12,0,926,2,74,142,-40,-200.826080,-0.107755,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.262344,219.046753,-4.691544,211.088287,-93.533981,77.870338,-19.963175,69.911880],
[14,0,658,84,138,126,-9,-209.635605,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.635620,69,329.635620,-69,203.635605,69,203.635605],
[23,0,278,202,34,28,-5,-262.635620,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.635620,12,276.635620,-22,248.635620,12,248.635620],
[18,0,414,202,22,6,17,-208.635605,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.635605,28,211.635605,6,205.635605,28,205.635605],
[16,0,798,84,106,150,-60,-269.635620,-0.003035,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.893494,304.811523,-11.893986,304.489746,-118.348801,154.812195,-12.349285,154.490448],
[32,0,2,180,236,30,-18.181818,-157.818176,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.181824,172.818176,99.818184,172.818176,-136.181824,142.818176,99.818184,142.818176],
[33,0,512,180,40,54,99.818184,-167.818176,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.818184,194.818176,119.818184,194.818176,79.818184,140.818176,119.818184,140.818176],
[34,0,1002,84,8,10,105.818184,-170.818176,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.818184,175.818176,109.818184,175.818176,101.818184,165.818176,109.818184,165.818176],
[35,0,1014,100,6,2,101.818184,-169.818176,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.818184,170.818176,104.818184,170.818176,98.818184,168.818176,104.818184,168.818176]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,1.909091,-172.909088,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.090912,182.909088,136.909088,182.909088,-133.090912,162.909088,136.909088,162.909088],
[15,0,214,2,174,170,-27,-299.817810,0.000759,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.021225,327.770752,84.978722,327.902802,-88.892227,157.770813,85.107727,157.902847],
[13,0,554,100,70,140,26,-204.913040,0.001518,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.978775,218.882675,75.978699,218.988907,6.191250,78.882835,76.191170,78.989067],
[11,0,2,2,210,176,-8,-133.913040,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,237.913055,98,237.913055,-112,61.913048,98,61.913048],
[12,0,926,2,74,142,-40,-200.913040,-0.106237,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.289955,219.075623,-4.707161,211.228821,-93.347305,77.876198,-19.764515,70.029404],
[14,0,658,84,138,126,-9,-209.817810,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,329.817810,69,329.817810,-69,203.817810,69,203.817810],
[23,0,278,202,34,28,-5,-262.817810,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,276.817810,12,276.817810,-22,248.817810,12,248.817810],
[18,0,414,202,22,6,17,-208.817810,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,211.817810,28,211.817810,6,205.817810,28,205.817810],
[16,0,798,84,106,150,-60,-269.817810,-0.001518,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.946815,304.905792,-11.946934,304.744934,-118.174469,154.905975,-12.174587,154.745087],
[32,0,2,180,236,30,-18.090910,-157.909088,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.090912,172.909088,99.909088,172.909088,-136.090912,142.909088,99.909088,142.909088],
[33,0,512,180,40,54,99.909088,-167.909088,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.909088,194.909088,119.909088,194.909088,79.909088,140.909088,119.909088,140.909088],
[34,0,1002,84,8,10,105.909088,-170.909088,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.909088,175.909088,109.909088,175.909088,101.909088,165.909088,109.909088,165.909088],
[35,0,1014,100,6,2,101.909088,-169.909088,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.909088,170.909088,104.909088,170.909088,98.909088,168.909088,104.909088,168.909088]
],
[
[6,0,626,170,20,56,22,-54,0,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,61,31,61,11,5,31,5],
[5,0,984,146,24,62,25,-86,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11,94,35,94,11,32,35,32],
[7,0,386,202,26,14,17,-11,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12,16,38,16,12,2,38,2],
[9,0,1002,2,18,60,-28,-53,0,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36,63,-18,63,-36,3,-18,3],
[8,0,626,100,22,68,-31,-85,0,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-39,97,-17,97,-39,29,-17,29],
[10,0,358,202,26,14,-22,-10,0,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27,15,-1,15,-27,1,-1,1],
[31,0,240,180,270,20,2,-173,0,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133,183,137,183,-133,163,137,163],
[15,0,214,2,174,170,-27,-300,0,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89,328,85,328,-89,158,85,158],
[13,0,554,100,70,140,26,-205,0,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,219,76,219,6,79,76,79],
[11,0,2,2,210,176,-8,-134,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,238,98,238,-112,62.000008,98,62.000008],
[12,0,926,2,74,142,-40,-201,-0.104720,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-78.317474,219.104446,-4.722858,211.369339,-93.160522,77.882332,-19.565899,70.147232],
[14,0,658,84,138,126,-9,-210,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,330,69,330,-69,204,69,204],
[23,0,278,202,34,28,-5,-263,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,277,12,277,-22,249,12,249],
[18,0,414,202,22,6,17,-209,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,212,28,212,6,206,28,206],
[16,0,798,84,106,150,-60,-270,0,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-118,305,-12,305,-118,155,-12,155],
[32,0,2,180,236,30,-18,-158,0,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136,173,100,173,-136,143,100,143],
[33,0,512,180,40,54,100,-168,0,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80,195,120,195,80,141,120,141],
[34,0,1002,84,8,10,106,-171,0,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102,176,110,176,102,166,110,166],
[35,0,1014,100,6,2,102,-170,0,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99,171,105,171,99,169,105,169]
]
]
}
}
]

},{}],2:[function(require,module,exports){
module.exports=[
{
"images":["koishi.png"],
"name":"walk_anime_1",
"animation": {
"fps": 30,
"CanvasWidth": 500,
"CanvasHeight": 500,
"MarginWidth": 250,
"MarginHeight": 0,
"parts": ["instance","effect","root","Chara","koishi0_bottom0","koishi0_thighs_l0","koishi0_calf_l0","koishi0_foot_l0","koishi0_thighs_r0","koishi0_calf_r0","koishi0_foot_r0","koishi0_body","koishi0_arm0_r0","koishi0_arm0_l0","koishi0_head0","koishi0_hear_b0","koishi0_hear_f1","koishi0_hear_f0","koishi0_mouth0","koishi0_eye0_l0","koishi0_eye0_l1","koishi0_eye0_l2","koishi0_eye1_l0","koishi0_eye0_r0","koishi0_eye0_r1","koishi0_eye0_r2","koishi0_eye1_r0","koishi0_hat0_f0","koishi0_hat0_b0","koishi0_hat0_obj0","3rdeye0_all","3rdeye0_cord_b0","3rdeye0_cord_f0","3rdeye0_body0","3rdeye0_eye0","3rdeye0_light0","3rdeye0_eye1"],
"ssa": [
[
[6,0,626,170,20,56,38.854675,-51.125820,0.368005,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,26.072876,53.699841,44.733810,60.894943,46.219162,1.449223,64.880096,8.644325],
[5,0,984,146,24,62,27,-81,0.471239,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,10.893984,81.772186,32.278141,92.667953,39.041393,26.529781,60.425552,37.425552],
[7,0,386,202,26,14,49.658909,-9.206032,0.408757,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,43.083485,11.806762,66.941483,22.140966,48.648056,-1.039854,72.506058,9.294351],
[9,0,1002,2,18,60,-35.828789,-54.880749,-0.498718,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-38.071358,67.489113,-22.263823,58.879707,-66.769379,14.797337,-50.961842,6.187927],
[8,0,626,100,22,68,-26,-86,-0.369779,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-29.122343,100.080162,-8.609386,92.129150,-53.698189,36.676476,-33.185230,28.725464],
[10,0,358,202,26,14,-52.243874,-14.287708,-0.228192,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-55.983173,20.289177,-30.657173,14.407536,-59.150211,6.652101,-33.824211,0.770458],
[31,0,240,180,270,20,2.807719,-173.033234,0.017453,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.346252,180.675629,137.612640,185.387787,-131.997192,160.678680,137.961700,165.390839],
[28,0,658,2,266,80,-12.233901,-280.958405,0.052360,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-147.145065,313.942902,118.490372,327.864258,-142.958176,234.052551,122.677261,247.973907],
[15,0,214,2,174,170,-29.859303,-288.643433,0.017453,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-92.338531,315.557129,81.634964,318.593842,-89.371620,145.583008,84.601883,148.619720],
[13,0,554,100,70,140,22.756006,-196.547668,-0.017453,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,3.003386,210.894577,72.992729,209.672913,0.560049,70.915901,70.549385,69.694237],
[11,0,2,2,210,176,-8,-125,0.017453,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-113.799210,227.169128,96.168808,230.834122,-110.727585,51.195923,99.240433,54.860924],
[12,0,926,2,74,142,-35.165352,-191.536041,0.069813,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-76.044510,202.711685,-2.224762,207.873657,-66.139084,61.057587,7.680656,66.219559],
[14,0,658,84,138,126,-10.291326,-198.971283,0.017453,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-72.376480,317.905884,65.602501,320.314301,-70.177475,191.925049,67.801506,194.333481],
[19,0,336,202,20,26,48.652393,-260.009277,0.017453,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,38.427036,272.832764,58.423988,273.181824,38.880798,246.836731,58.877750,247.185776],
[23,0,278,202,34,28,-7.216912,-252.033020,0.017453,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-24.458656,265.734192,9.536166,266.327576,-23.969990,237.738464,10.024833,238.331848],
[18,0,414,202,22,6,15.722167,-198.425201,0.017453,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,4.671485,201.232773,26.668133,201.616714,4.776200,195.233688,26.772850,195.617630],
[24,0,1012,84,6,6,-1.217826,-252.137741,0.017453,1,1,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-4.269726,255.084930,1.729360,255.189636,-4.165012,249.085846,1.834074,249.190552],
[25,0,1002,96,10,4,-10.181551,-249.980972,0.017453,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-15.215694,251.893402,-5.217217,252.067932,-15.145885,247.894012,-5.147408,248.068542],
[16,0,798,84,106,150,-62.330700,-258.072083,0.017453,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-120.932709,292.054504,-14.948841,293.904480,-118.314842,142.077362,-12.330982,143.927307],
[17,0,390,100,162,78,-0.863717,-289.149536,0.017453,1,1,81,39,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-82.532021,326.729950,79.443306,329.557251,-81.170738,248.741821,80.804588,251.569122],
[32,0,2,180,236,30,-16.927448,-157.686462,0.017453,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.171265,170.624786,100.792801,174.743561,-134.647690,140.629364,101.316376,144.748138],
[33,0,512,180,40,54,100.880058,-169.744324,0.017453,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.411888,196.391159,120.405800,197.089264,81.354317,142.399384,121.348228,143.097488],
[34,0,1002,84,8,10,106.826790,-172.848587,0.017453,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.740135,177.778015,110.738922,177.917633,102.914658,167.779541,110.913445,167.919159],
[35,0,1014,100,6,2,102.844849,-171.778931,0.017453,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.827850,172.726425,105.826942,172.831131,99.862755,170.726730,105.861847,170.831436],
[27,0,390,2,266,96,-12.966604,-294.939209,0.052360,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-148.296448,335.912750,117.338982,349.834106,-143.272186,240.044312,122.363243,253.965668]
],
[
[6,0,626,170,20,56,34.232277,-51.396461,0.329747,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,21.558283,54.457489,40.480766,60.933567,39.691299,1.474529,58.613785,7.950607],
[5,0,984,146,24,62,24,-82.599998,0.412334,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,7.967379,84.319016,29.955889,93.936989,32.813805,27.515366,54.802315,37.133339],
[7,0,386,202,26,14,43.425224,-9.094101,0.334424,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,37.061104,12.175976,61.620693,20.709820,41.656250,-1.048419,66.215836,7.485425],
[9,0,1002,2,18,60,-29.180143,-55.459789,-0.517100,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-31.190582,68.107246,-15.543964,59.208740,-60.852264,15.951855,-45.205650,7.053349],
[8,0,626,100,22,68,-22,-87.599998,-0.288650,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,-1,0,0,4294967295,4294967295,4294967295,4294967295,-26.253130,101.380814,-5.163292,95.118324,-45.609909,36.194042,-24.804729,28.972927],
[10,0,358,202,26,14,-46.251656,-15.125889,-0.284753,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-49.645710,21.329145,-24.692701,14.025215,-53.578594,7.892912,-28.625587,0.588982],
[31,0,240,180,270,20,2.491058,-172.783295,0.013226,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.629395,180.996918,137.346985,184.567917,-132.364868,160.998672,137.611511,164.569672],
[28,0,658,2,266,80,-11.914770,-281.931915,0.045058,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-146.581482,315.900635,119.148521,327.882019,-142.978058,235.981827,122.751945,247.963196],
[15,0,214,2,174,170,-29.591448,-289.661987,0.012556,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-91.938110,316.881348,82.048180,319.065979,-89.803703,146.894745,84.182587,149.079376],
[13,0,554,100,70,140,22.721109,-197.196136,-0.002493,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.756077,211.245956,72.755859,211.071426,2.407011,71.246391,72.406792,71.071861],
[11,0,2,2,210,176,-8,-125.800003,0.014960,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-113.544144,228.232605,96.432365,231.374069,-110.911285,52.252289,99.065224,55.393768],
[12,0,926,2,74,142,-35.142212,-192.401428,0.051113,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.805252,204.339508,-1.901890,208.120239,-68.550331,62.524963,5.353027,66.305687],
[14,0,658,84,138,126,-10.109377,-199.943405,0.014960,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-71.897789,319.032410,66.086769,321.096802,-70.012909,193.046509,67.971657,195.110916],
[19,0,336,202,20,26,48.986343,-260.834259,0.014960,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,38.792992,273.683197,58.790752,273.982391,39.181934,247.686127,59.179695,247.985306],
[23,0,278,202,34,28,-6.902673,-252.997314,0.014960,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-24.110203,266.741425,9.885993,267.250061,-23.691338,238.744568,10.304858,239.253189],
[18,0,414,202,22,6,15.902674,-199.332458,0.014960,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,4.859026,202.167572,26.856565,202.496674,4.948782,196.168243,26.946321,196.497345],
[25,0,1002,96,10,4,-9.872418,-250.952667,0.014960,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-14.901777,252.877640,-4.902896,253.027237,-14.841940,248.878098,-4.843059,249.027695],
[16,0,798,84,106,150,-62.276711,-259.169647,0.010151,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-120.629013,293.579071,-14.634476,294.655090,-119.106331,143.586792,-13.111790,144.662827],
[17,0,390,100,162,78,-0.456954,-290.097900,0.014960,1,1,81,39,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-82.031311,327.881836,79.950562,330.305237,-80.864471,249.890549,81.117401,252.313980],
[32,0,2,180,236,30,-17.308804,-157.520096,0.013226,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.496872,170.958130,100.482498,174.079437,-135.100098,140.960754,100.879272,144.082062],
[33,0,512,180,40,54,100.548615,-169.079880,0.008418,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.322044,195.910568,120.320633,196.247284,80.776596,141.912476,120.775185,142.249191],
[34,0,1002,84,8,10,106.523148,-172.130280,0.008418,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.481201,177.096436,110.480919,177.163773,102.565376,167.096786,110.565094,167.164124],
[35,0,1014,100,6,2,102.531708,-171.096649,0.008418,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.523399,172.071365,105.523186,172.121872,99.540230,170.071426,105.540016,170.121933],
[27,0,390,2,266,96,-12.545368,-295.917694,0.045058,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-147.572418,337.878296,118.157593,349.859650,-143.248322,241.975723,122.481689,253.957092]
],
[
[6,0,626,170,20,56,29.493933,-51.756870,0.291489,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,16.946295,55.300423,36.102634,61.047997,33.039505,1.662670,52.195847,7.410248],
[5,0,984,146,24,62,21,-84.199997,0.353429,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.096385,86.859886,27.612976,95.166702,26.555641,28.692024,49.072235,36.998833],
[7,0,386,202,26,14,37.062134,-9.133846,0.260090,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,30.944464,12.679844,56.070004,19.366192,34.544804,-0.849292,59.670341,5.837057],
[9,0,1002,2,18,60,-22.431301,-56.265560,-0.535482,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-24.208931,68.947830,-8.728518,59.763237,-54.824253,17.346455,-39.343842,8.161858],
[8,0,626,100,22,68,-18,-89.199997,-0.207521,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,-2,0,0,4294967295,4294967295,4294967295,4294967295,-23.355938,102.590813,-1.827957,98.058044,-37.366310,36.049774,-16.250399,29.559921],
[10,0,358,202,26,14,-40.155289,-16.201233,-0.341314,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-43.193241,22.586437,-18.693031,13.883578,-47.879395,9.394018,-23.379189,0.691158],
[31,0,240,180,270,20,2.194798,-172.549316,0.009272,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.892120,181.297180,137.096283,183.800598,-132.706696,161.298035,137.281708,163.801453],
[28,0,658,2,266,80,-11.589831,-282.905334,0.038112,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-146.017380,317.808594,119.789474,327.944000,-142.969131,237.866669,122.837723,248.002090],
[15,0,214,2,174,170,-29.312439,-290.680420,0.007836,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-91.529945,318.193726,82.464706,319.557190,-90.197815,148.198944,83.796844,149.562424],
[13,0,554,100,70,140,22.685648,-197.845215,0.012467,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.512674,211.594803,72.507233,212.467438,4.257957,71.605682,74.252518,72.478325],
[11,0,2,2,210,176,-8,-126.599998,0.012467,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-113.288406,229.295425,96.695267,231.913345,-111.094337,53.309105,98.889336,55.927025],
[12,0,926,2,74,142,-35.118916,-193.267105,0.032413,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.551605,205.963455,-1.590477,208.361603,-70.949738,64.038025,3.011398,66.436195],
[14,0,658,84,138,126,-9.926585,-200.915100,0.012467,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-71.417877,320.157806,66.571396,321.878143,-69.847122,194.167587,68.142151,195.887939],
[19,0,336,202,20,26,49.320774,-261.658417,0.012467,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,39.159489,274.532745,59.157936,274.782074,39.483612,248.534760,59.482059,248.784088],
[23,0,278,202,34,28,-6.587611,-253.960846,0.012467,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.760817,267.747833,10.236540,268.171692,-23.411760,239.750000,10.585596,240.173859],
[18,0,414,202,22,6,16.083862,-200.239304,0.012467,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.047318,203.101944,27.045609,203.376205,5.122116,197.102402,27.120407,197.376663],
[25,0,1002,96,10,4,-9.562445,-251.923599,0.012467,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-14.586988,253.861115,-4.587766,253.985779,-14.537123,249.861420,-4.537900,249.986084],
[16,0,798,84,106,150,-62.201172,-260.268036,0.003206,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-120.313072,295.081909,-14.313614,295.421722,-119.832214,145.082703,-13.832760,145.422501],
[32,0,2,180,236,30,-17.665264,-157.364532,0.009272,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.799271,171.269806,100.190582,173.457977,-135.521118,141.271088,100.468735,143.459259],
[33,0,512,180,40,54,100.236946,-168.458191,0.000011,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.236649,195.457962,120.236649,195.458420,80.237244,141.457962,120.237244,141.458420],
[34,0,1002,84,8,10,106.236916,-171.458252,0.000011,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.236862,176.458206,110.236862,176.458298,102.236969,166.458206,110.236969,166.458298],
[35,0,1014,100,6,2,102.236923,-170.458206,0.000011,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.236916,171.458176,105.236916,171.458237,99.236931,169.458176,105.236931,169.458237],
[27,0,390,2,266,96,-12.123274,-296.895172,0.038112,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-146.855652,339.792603,118.951202,349.928040,-143.197754,243.862320,122.609100,253.997742]
],
[
[6,0,626,170,20,56,24.644730,-52.216122,0.253231,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12.241809,56.237015,31.603970,61.247677,26.271664,2.022964,45.633827,7.033627],
[5,0,984,146,24,62,18,-85.800003,0.294524,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.280558,89.391541,25.247128,96.358376,20.278206,30.061241,43.244774,37.028072],
[7,0,386,202,26,14,30.577114,-9.334812,0.185756,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,24.739681,13.325349,50.292404,18.127275,27.325335,-0.433807,52.878052,4.368119],
[9,0,1002,2,18,60,-15.601757,-57.307537,-0.553863,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-17.145979,70.020340,-1.837000,60.552757,-48.704594,18.990406,-33.395615,9.522823],
[8,0,626,100,22,68,-14,-90.800003,-0.126392,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,-3,0,0,4294967295,4294967295,4294967295,4294967295,-20.423513,103.712730,1.400995,100.939499,-28.995317,36.255154,-7.548977,30.505859],
[10,0,358,202,26,14,-33.974106,-17.523159,-0.397875,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36.646240,24.069891,-12.677187,13.995936,-42.070679,11.163478,-18.101624,1.089523],
[31,0,240,180,270,20,1.918942,-172.331329,0.005591,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.134857,181.576462,136.860931,183.085892,-133.023041,161.576767,136.972748,163.086197],
[28,0,658,2,266,80,-11.259075,-283.878540,0.031523,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-145.453705,319.666840,120.414154,328.050507,-142.932312,239.706573,122.935547,248.090240],
[15,0,214,2,174,170,-29.022270,-291.698517,0.003295,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-91.114189,319.494080,82.884865,320.067383,-90.554077,149.495010,83.444977,150.068298],
[13,0,554,100,70,140,22.649628,-198.494934,0.027427,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.273226,211.941208,72.246902,213.860825,6.112469,71.993858,76.086136,73.913475],
[11,0,2,2,210,176,-8,-127.400002,0.009973,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-113.032036,230.357635,96.957520,232.451996,-111.276764,54.366379,98.712791,56.460739],
[12,0,926,2,74,142,-35.095459,-194.133087,0.013713,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.283676,207.583252,-1.290634,208.598007,-73.336449,65.596603,0.656593,66.611359],
[14,0,658,84,138,126,-9.742949,-201.886322,0.009973,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-70.936745,321.281982,67.056396,322.658264,-69.680130,195.288239,68.313011,196.664520],
[19,0,336,202,20,26,49.655678,-262.481720,0.009973,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,39.526524,275.381348,59.525528,275.580811,39.785828,249.382629,59.784832,249.582092],
[23,0,278,202,34,28,-6.271725,-254.923584,0.009973,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.410503,268.753357,10.587807,269.092438,-23.131256,240.754730,10.867054,241.093826],
[18,0,414,202,22,6,16.265732,-201.145676,0.009973,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.236359,204.035828,27.235266,204.255234,5.296198,198.036118,27.295105,198.255524],
[16,0,798,84,106,150,-62.104069,-261.367065,-0.003384,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-119.985306,296.563110,-13.985912,296.204437,-120.492874,146.563980,-14.493481,146.205292],
[32,0,2,180,236,30,-17.996887,-157.219742,0.005591,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.078888,171.559830,99.917412,172.879181,-135.911194,141.560303,100.085121,142.879654],
[33,0,512,180,40,54,99.945366,-167.879272,-0.007767,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.155663,195.033783,120.154457,194.723129,79.736275,141.035416,119.735069,140.724762],
[34,0,1002,84,8,10,105.968483,-170.832581,-0.007767,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.007439,175.863495,110.007195,175.801361,101.929771,165.863800,109.929527,165.801666],
[35,0,1014,100,6,2,101.960838,-169.863678,-0.007767,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.968697,170.886948,104.968513,170.840347,98.953163,168.887009,104.952980,168.840408],
[27,0,390,2,266,96,-11.700321,-297.871582,0.031523,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-146.147095,341.655884,119.720764,350.039581,-143.121399,245.703583,122.746460,254.087265]
],
[
[6,0,626,170,20,56,19.690411,-52.782974,0.214973,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,7.450361,57.275322,26.990005,61.541737,19.396324,2.564316,38.935970,6.830730],
[5,0,984,146,24,62,15,-87.400002,0.235619,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-0.480742,91.910728,22.856136,97.513412,13.992871,31.623791,37.329750,37.226479],
[7,0,386,202,26,14,23.978294,-9.706135,0.111422,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,18.453341,14.119171,44.292114,17.010155,20.010025,0.205985,45.848797,3.096969],
[9,0,1002,2,18,60,-8.711878,-58.593483,-0.572245,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-10.022169,71.332520,5.110204,61.585148,-42.513412,20.891277,-27.381042,11.143906],
[8,0,626,100,22,68,-10,-92.400002,-0.045263,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,-4,0,0,4294967295,4294967295,4294967295,4294967295,-17.448833,104.749695,4.528635,103.754242,-20.525681,36.819336,1.270796,31.827984],
[10,0,358,202,26,14,-27.728319,-19.099369,-0.454435,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-30.026089,25.786690,-6.664854,14.373859,-36.171459,13.207562,-12.810224,1.794733],
[31,0,240,180,270,20,1.663497,-172.129333,0.002182,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.358002,181.834778,136.641357,182.423828,-133.314362,161.834839,136.684998,162.423889],
[28,0,658,2,266,80,-10.922501,-284.851410,0.025289,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-144.891449,321.475464,121.023499,328.201752,-142.868500,241.501068,123.046448,248.227341],
[15,0,214,2,174,170,-28.720942,-292.716248,-0.001069,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-90.690987,320.782471,83.308914,320.596558,-90.872643,150.782593,83.127258,150.596664],
[13,0,554,100,70,140,22.613049,-199.145248,0.042387,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.037777,212.285202,71.974899,215.251373,7.970120,72.410942,77.907242,75.377113],
[11,0,2,2,210,176,-8,-128.199997,0.007480,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112.775002,231.419189,97.219131,232.989960,-111.458542,55.424110,98.535591,56.994888],
[12,0,926,2,74,142,-35.071838,-194.999374,-0.004987,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.001526,209.198669,-1.002449,208.829651,-75.709625,67.200432,-1.710552,66.831421],
[14,0,658,84,138,126,-9.558472,-202.857086,0.007480,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-70.454384,322.404938,67.541756,323.437164,-69.511917,196.408463,68.484222,197.440689],
[23,0,278,202,34,28,-5.955019,-255.885529,0.007480,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.059263,269.757965,10.939787,270.012299,-22.849825,241.758759,11.149225,242.013077],
[18,0,414,202,22,6,16.448280,-202.051590,0.007480,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.426147,204.969223,27.425533,205.133789,5.471027,198.969391,27.470413,199.133957],
[16,0,798,84,106,150,-61.985405,-262.466614,-0.009617,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-119.646133,298.022766,-13.651031,297.003387,-121.088676,148.029724,-15.093578,147.010315],
[32,0,2,180,236,30,-18.303730,-157.085739,0.002182,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.336166,171.828262,99.663269,172.343140,-136.270721,141.828339,99.728714,142.343216],
[33,0,512,180,40,54,99.674171,-167.343155,-0.014915,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.079102,194.638458,120.074646,194.041855,79.273697,140.644455,119.269241,140.047852],
[34,0,1002,84,8,10,105.718246,-170.253326,-0.014915,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.793266,175.312424,109.792374,175.193115,101.644119,165.313538,109.643227,165.194229],
[35,0,1014,100,6,2,101.703781,-169.313110,-0.014915,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.719032,170.357742,104.718361,170.268250,98.689201,168.357971,104.688530,168.268478],
[27,0,390,2,266,96,-11.276515,-298.846924,0.025289,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-145.447754,343.468445,120.467201,350.194702,-143.020233,247.499130,122.894722,254.225418]
],
[
[6,0,626,170,20,56,14.637380,-53.465862,0.176715,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.578114,58.423088,22.266645,61.939014,12.422705,3.295204,32.111237,6.811127],
[5,0,984,146,24,62,12,-89,0.176715,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-3.188342,94.414261,20.437897,98.633377,7.711026,33.379818,31.337265,37.598927],
[7,0,386,202,26,14,17.274487,-10.256538,0.037088,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12.092526,15.067701,38.074646,16.031775,12.611643,1.077329,38.593761,2.041403],
[9,0,1002,2,18,60,-1.782755,-60.129440,-0.590627,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-2.858671,72.890411,12.091981,62.866539,-36.271576,23.054905,-21.320927,13.031033],
[8,0,626,100,22,68,-6,-94,0.035866,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,1,-6,0,0,4294967295,4294967295,4294967295,4294967295,-14.425152,105.705421,7.560699,106.494293,-11.986803,37.749149,11.213552,32.577747],
[10,0,358,202,26,14,-21.438856,-20.935848,-0.510996,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.354914,27.742369,-0.676210,15.027163,-30.201563,15.530760,-7.522861,2.815554],
[31,0,240,180,270,20,1.428467,-171.943405,-0.000954,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.561920,182.072250,136.437958,181.814545,-133.581024,162.072266,136.418854,161.814560],
[28,0,658,2,266,80,-10.580103,-285.823853,0.019412,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-144.331497,323.234619,121.618401,328.398010,-142.778610,243.249710,123.171288,248.413071],
[15,0,214,2,174,170,-28.408455,-293.733612,-0.005254,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-90.260490,322.058960,83.737099,321.144806,-91.153633,152.061310,82.843964,151.147156],
[13,0,554,100,70,140,22.575916,-199.796204,0.057347,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.806381,212.626892,71.691315,216.638947,9.830496,72.857025,79.715424,76.869080],
[11,0,2,2,210,176,-8,-129,0.004987,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112.517311,232.480103,97.480072,233.527283,-111.639664,56.482300,98.357719,57.529488],
[12,0,926,2,74,142,-35.048058,-195.865952,-0.023687,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-74.705261,210.809402,-0.726013,209.056763,-78.068436,68.849228,-4.089197,67.096588],
[14,0,658,84,138,126,-9.373154,-203.827423,0.004987,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69.970802,323.526733,68.027481,324.214874,-69.342484,197.528305,68.655800,198.216461],
[23,0,278,202,34,28,-5.637495,-256.846710,0.004987,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22.707096,270.761749,11.292480,270.931305,-22.567471,242.762115,11.432106,242.931656],
[18,0,414,202,22,6,16.631510,-202.957092,0.004987,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.616687,205.902206,27.616413,206.011902,5.646607,199.902283,27.646332,200.011978],
[16,0,798,84,106,150,-61.845173,-263.566498,-0.015494,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-119.295929,299.460938,-13.308655,297.818604,-121.619980,149.478928,-15.632702,147.836609],
[32,0,2,180,236,30,-18.585840,-156.962494,-0.000954,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.571472,172.075119,99.428429,171.849854,-136.600113,142.075134,99.399788,141.849869],
[33,0,512,180,40,54,99.423653,-166.849869,-0.021435,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.006958,194.272339,119.997772,193.414993,78.849533,140.284744,118.840347,139.427399],
[34,0,1002,84,8,10,105.486572,-169.720581,-0.021435,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.594658,174.805161,109.592819,174.633698,101.380325,164.807465,109.378487,164.636002],
[35,0,1014,100,6,2,101.466064,-168.806549,-0.021435,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.488190,169.870621,104.486809,169.742020,98.445320,167.871078,104.443939,167.742477],
[27,0,390,2,266,96,-10.851858,-299.821228,0.019412,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-144.758530,345.230499,121.191353,350.393860,-142.895065,249.248596,123.054817,254.411957]
],
[
[6,0,626,170,20,56,9.540882,-53.372231,0.091647,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-2.053588,59.336143,17.862478,61.166527,3.071479,3.571159,22.987545,5.401543],
[5,0,984,146,24,62,9,-89,0.117810,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-5.843257,95.299026,17.990387,98.119919,1.444061,33.728779,25.277704,36.549675],
[7,0,386,202,26,14,8.497185,-10.095093,0.018298,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,3.406538,15.002771,29.402185,15.478489,3.662694,1.005116,29.658340,1.480833],
[9,0,1002,2,18,60,5.318208,-61.623802,-0.609008,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,4.477027,74.402390,19.240910,64.105415,-29.846241,25.189457,-15.082358,14.892479],
[8,0,626,100,22,68,-2,-95.333336,0.116995,1,1,8,11.999999,0,0,1,0,0,0,0,0,-1,-1,0,-6,0,0,4294967295,4294967295,4294967295,4294967295,-11.346047,106.317474,10.503559,108.885498,-4.284979,37.672440,19.141432,35.391365],
[10,0,358,202,26,14,-15.369739,-23.220852,-0.567557,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-16.897955,30.124804,5.025683,16.147890,-24.423985,18.319767,-2.500347,4.342855],
[31,0,240,180,270,20,1.213857,-171.773529,-0.003818,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.746994,182.288879,136.251053,181.258041,-133.823349,162.289017,136.174698,161.258179],
[28,0,658,2,266,80,-10.231879,-285.551392,0.013891,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.774673,323.700043,122.199654,327.395020,-142.663406,243.707764,123.310921,247.402740],
[15,0,214,2,174,170,-28.084806,-293.505981,-0.009261,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.822845,322.078949,84.169693,320.467560,-91.397179,152.086243,82.595360,150.474854],
[13,0,554,100,70,140,22.538233,-199.203339,0.072306,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.579082,211.721893,71.396179,216.778931,11.693174,72.087700,81.510269,77.144745],
[11,0,2,2,210,176,-8,-128.555557,0.002493,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112.258987,232.295929,97.740364,232.819534,-111.820160,56.296478,98.179192,56.820076],
[12,0,926,2,74,142,-35.024113,-195.488388,-0.042387,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-74.394951,211.170776,-0.461414,208.035095,-80.412048,69.298309,-6.478506,66.162643],
[14,0,658,84,138,126,-9.186996,-203.552826,0.002493,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69.486008,323.402863,68.513557,323.746948,-69.171844,197.403244,68.827721,197.747330],
[23,0,278,202,34,28,-5.319155,-256.562622,0.002493,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22.354008,270.520203,11.645885,270.604950,-22.284195,242.520279,11.715698,242.605057],
[18,0,414,202,22,6,16.815416,-202.617661,0.002493,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.807971,205.590225,27.807903,205.645081,5.822930,199.590240,27.822861,199.645096],
[16,0,798,84,106,150,-61.683372,-263.422119,-0.021015,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-118.935089,299.633179,-12.958496,297.405731,-122.087128,149.666306,-16.110542,147.438873],
[32,0,2,180,236,30,-18.843266,-156.850006,-0.003818,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.785141,172.300415,99.213150,171.399384,-136.899673,142.300629,99.098618,141.399597],
[33,0,512,180,40,54,99.194054,-166.399414,-0.027326,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.939240,193.935791,119.924309,192.842865,78.463799,139.955963,118.448868,138.863037],
[34,0,1002,84,8,10,105.273781,-169.234360,-0.027326,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.411888,174.341782,109.408905,174.123199,101.138657,164.345520,109.135674,164.126938],
[35,0,1014,100,6,2,101.247955,-168.344025,-0.027326,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.276398,169.425613,104.274155,169.261688,98.221756,167.426361,104.219513,167.262436],
[27,0,390,2,266,96,-10.426353,-299.550049,0.013891,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-144.080276,345.697937,121.894051,349.392914,-142.746750,249.707184,123.227577,253.402176]
],
[
[6,0,626,170,20,56,4.442508,-53.402180,0.006580,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-6.603313,60.329651,13.396254,60.461246,-6.234836,4.330860,13.764730,4.462460],
[5,0,984,146,24,62,6,-89,0.058905,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-8.446685,96.161934,15.511690,97.574829,-4.796696,34.269463,19.161680,35.682362],
[7,0,386,202,26,14,-0.274446,-10.370213,-0.000493,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-5.271983,15.372675,20.728014,15.359867,-5.278879,1.372677,20.721119,1.359869],
[9,0,1002,2,18,60,12.418383,-63.399868,-0.627390,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11.812222,76.191765,26.384346,65.625153,-23.409811,27.618019,-8.837687,17.051411],
[8,0,626,100,22,68,2,-96.666664,0.198124,1,1,8,11.999999,0,0,1,0,0,0,0,0,-2,-2,0,-6,0,0,4294967295,4294967295,4294967295,4294967295,-8.205462,106.857277,13.364165,111.187538,3.611771,37.832981,27.929594,38.635155],
[10,0,358,202,26,14,-9.278883,-25.812107,-0.624118,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-10.414371,32.791409,10.684086,17.597492,-18.595711,21.430702,2.502745,6.236784],
[31,0,240,180,270,20,1.019672,-171.619766,-0.006409,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.913467,182.484726,136.080978,180.754395,-134.041641,162.485138,135.952805,160.754807],
[28,0,658,2,266,80,-9.877829,-284.986633,0.008727,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.221817,323.824493,122.768044,326.145752,-142.523697,243.827530,123.466164,246.148788],
[15,0,214,2,174,170,-27.750000,-292.986115,-0.013090,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.378181,321.795288,84.606918,319.517670,-91.603409,151.809830,82.381683,149.532242],
[13,0,554,100,70,140,22.500000,-198.611115,0.087266,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.355925,210.814728,71.089554,216.915619,13.557728,71.347458,83.291359,77.448364],
[11,0,2,2,210,176,-8,-128.111115,0,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112,232.111115,98,232.111115,-112,56.111122,98,56.111122],
[12,0,926,2,74,142,-35,-195.111115,-0.061087,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-74.070709,211.526947,-0.208736,207.009354,-82.739609,69.791801,-8.877628,65.274216],
[14,0,658,84,138,126,-9,-202.986115,0,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69,322.986115,69,322.986115,-69,196.986115,69,196.986115],
[19,0,336,202,20,26,51,-262.986115,0,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,41,275.986115,61,275.986115,41,249.986115,61,249.986115],
[23,0,278,202,34,28,-5,-255.986115,0,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22,269.986115,12,269.986115,-22,241.986115,12,241.986115],
[18,0,414,202,22,6,17,-201.986115,0,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6,204.986115,28,204.986115,6,198.986115,28,198.986115],
[16,0,798,84,106,150,-61.500000,-262.986115,-0.026180,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-118.563934,299.492371,-12.600254,296.717621,-122.490479,149.543793,-16.526798,146.769028],
[32,0,2,180,236,30,-19.076046,-156.748245,-0.006409,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.977493,172.504150,99.017654,170.991730,-137.169754,142.504761,98.825394,140.992340],
[33,0,512,180,40,54,98.985619,-165.991837,-0.032589,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.875977,193.629150,119.854736,192.325851,78.116501,139.657822,118.095261,138.354523],
[34,0,1002,84,8,10,105.080185,-168.794754,-0.032589,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.245224,173.922424,109.240974,173.661774,100.919395,163.927734,108.915146,163.667084],
[35,0,1014,100,6,2,101.049721,-167.925613,-0.032589,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.083893,169.022827,104.080711,168.827332,98.018730,167.023895,104.015549,166.828400],
[27,0,390,2,266,96,-10,-298.986115,0.008727,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-143.413803,345.823669,122.576065,348.144928,-142.576065,249.827316,123.413803,252.148575]
],
[
[6,0,626,170,20,56,-0.650463,-53.555611,-0.078487,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-11.067751,61.396534,8.870678,59.828400,-15.458530,5.568932,4.479899,4.000797],
[5,0,984,146,24,62,3,-89,0,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-11,97,13,97,-11,35,13,35],
[7,0,386,202,26,14,-9.006559,-11.080021,-0.019283,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-13.909221,16.175501,12.085945,15.674173,-14.179167,2.178102,11.816000,1.676775],
[9,0,1002,2,18,60,19.492355,-65.458389,-0.645772,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,19.121422,78.259262,33.496861,67.426598,-16.987480,30.341133,-2.612040,19.508461],
[8,0,626,100,22,68,6,-98,0.279253,1,1,8,11.999999,0,0,1,0,0,0,0,0,-3,-4,0,-7,0,0,4294967295,4294967295,4294967295,4294967295,-4.997742,107.330040,16.150015,113.394066,11.964364,37.292290,36.822819,41.299438],
[10,0,358,202,26,14,-3.191149,-28.709801,-0.680678,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-3.930276,35.742134,16.275518,19.379803,-12.740762,24.862089,7.465033,8.499760],
[31,0,240,180,270,20,0.845916,-171.482132,-0.008727,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.061676,182.659836,135.928040,180.303665,-134.236206,162.660599,135.753510,160.304428],
[28,0,658,2,266,80,-9.519404,-284.421234,0.003918,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-142.675110,323.899811,123.322853,324.942017,-142.361664,243.900436,123.636299,244.942642],
[15,0,214,2,174,170,-27.405487,-292.465546,-0.016741,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-88.928070,321.499512,85.047546,318.586731,-91.773895,151.523331,82.201721,148.610550],
[13,0,554,100,70,140,22.461220,-198.019501,0.102226,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.136953,209.905441,70.771515,217.048828,15.423739,70.636322,85.058304,77.779716],
[11,0,2,2,210,176,-8,-127.666664,-0.002493,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-111.740372,231.925659,98.258980,231.402069,-112.179199,55.926201,97.820152,55.402603],
[12,0,926,2,74,142,-34.975719,-194.734131,-0.079786,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-73.732643,211.877670,0.031944,205.979736,-85.050308,70.329407,-11.285719,64.431473],
[14,0,658,84,138,126,-8.813621,-202.418915,-0.002493,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-68.514236,322.568146,69.485336,322.224060,-68.828392,196.568527,69.171173,196.224457],
[19,0,336,202,20,26,51.335793,-262.269135,-0.002493,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,41.368237,275.294037,61.368176,275.244171,41.303410,249.294113,61.303349,249.244247],
[23,0,278,202,34,28,-4.681487,-255.408783,-0.002493,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-21.646526,269.451111,12.353367,269.366364,-21.716339,241.451218,12.283554,241.366440],
[18,0,414,202,22,6,17.183804,-201.354095,-0.002493,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.191318,204.381516,28.191250,204.326660,6.176358,198.381531,28.176289,198.326675],
[16,0,798,84,106,150,-61.296509,-262.549957,-0.030989,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-118.184235,299.330200,-12.235130,296.045929,-122.831772,149.402222,-16.882660,146.117950],
[32,0,2,180,236,30,-19.284222,-156.657227,-0.008727,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.148834,172.686386,98.842178,170.626923,-137.410629,142.687531,98.580383,140.628067],
[33,0,512,180,40,54,98.798553,-165.627121,-0.037222,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.817162,193.352692,119.789459,191.864151,77.807648,139.390091,117.779945,137.901550],
[34,0,1002,84,8,10,104.906036,-168.401764,-0.037222,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.094872,173.547150,109.089333,173.249451,100.722740,163.554077,108.717201,163.256378],
[35,0,1014,100,6,2,100.871597,-167.551315,-0.037222,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.910889,168.662262,103.906731,168.438980,97.836464,166.663651,103.832306,166.440369],
[27,0,390,2,266,96,-9.574258,-298.421112,0.003918,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-142.761307,345.899628,123.236656,346.941833,-142.385178,249.900375,123.612785,250.942581]
],
[
[6,0,626,170,20,56,-5.250874,-53.140629,-0.142491,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-15.145323,61.631794,4.651981,58.791595,-23.097870,6.199341,-3.300567,3.359146],
[5,0,984,146,24,62,-1,-88.500000,-0.024726,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-14.797937,96.843674,9.194727,96.250328,-16.330761,34.862629,7.661902,34.269276],
[7,0,386,202,26,14,-16.306620,-11.286472,-0.072792,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20.929737,16.636871,5.001408,14.745941,-21.947931,2.673946,3.983215,0.783015],
[9,0,1002,2,18,60,22.368307,-63.198544,-0.509054,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,20.256178,75.829414,35.973881,67.057083,-8.984926,23.437069,6.732779,14.664738],
[8,0,626,100,22,68,8.833334,-95.333336,0.290888,1,1,8,11.999999,0,0,1,0,0,0,0,0,-2,-3,0,-5,0,0,4294967295,4294967295,4294967295,4294967295,-2.272221,104.534782,18.803549,110.844452,16.174829,35.943924,39.740181,40.911221],
[10,0,358,202,26,14,5.009928,-23.547298,-0.498873,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,3.011499,30.330091,25.842676,17.890745,-3.686611,18.036381,19.144567,5.597034],
[31,0,240,180,270,20,0.692592,-171.360626,-0.010772,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.191864,182.814240,135.792480,179.905853,-134.407288,162.815399,135.577057,159.907013],
[28,0,658,2,266,80,-9.156610,-283.855072,-0.000534,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-142.135223,323.926117,123.864754,323.783997,-142.177979,243.926132,123.821999,243.784012],
[15,0,214,2,174,170,-27.051277,-291.944275,-0.020214,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-88.472664,321.191711,85.491791,317.674774,-91.908768,151.226456,82.055687,147.709488],
[13,0,554,100,70,140,22.421900,-197.428528,0.117186,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.922211,208.994141,70.442123,217.178436,17.290783,69.954330,86.810692,78.138611],
[11,0,2,2,210,176,-8,-127.222221,-0.004987,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-111.480095,231.739532,98.517288,230.692352,-112.357742,55.741737,97.639641,54.694550],
[12,0,926,2,74,142,-34.951271,-194.357452,-0.098486,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-73.380859,212.222702,0.260551,204.946487,-87.343330,70.910812,-13.701923,63.634598],
[14,0,658,84,138,126,-8.627860,-201.851288,-0.004987,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-68.028717,322.148987,69.969566,321.460846,-68.657028,196.150558,69.341248,195.462402],
[19,0,336,202,20,26,51.670589,-261.551331,-0.004987,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,41.735542,274.601044,61.735291,274.501312,41.605888,248.601364,61.605637,248.501633],
[23,0,278,202,34,28,-4.363618,-254.830688,-0.004987,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-21.293594,268.915283,12.705982,268.745728,-21.433220,240.915634,12.566357,240.746094],
[18,0,414,202,22,6,17.366829,-200.721649,-0.004987,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.381927,203.776459,28.381653,203.666763,6.352006,197.776535,28.351730,197.666840],
[16,0,798,84,106,150,-61.072906,-262.113556,-0.035441,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.796318,299.146729,-11.862877,295.390778,-123.111336,149.240906,-17.177895,145.484955],
[32,0,2,180,236,30,-19.467823,-156.576935,-0.010772,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.299408,172.847137,98.686905,170.304993,-137.622559,142.848877,98.363754,140.306732],
[33,0,512,180,40,54,98.633049,-165.305283,-0.041226,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.762833,193.106628,119.728851,191.458054,77.537247,139.152512,117.503265,137.503937],
[34,0,1002,84,8,10,104.751595,-168.055450,-0.041226,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.961067,173.216064,108.954269,172.886337,100.548920,163.224564,108.542122,162.894836],
[35,0,1014,100,6,2,100.713776,-167.221161,-0.041226,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.757538,168.343948,103.752441,168.096664,97.675110,166.345657,103.670013,166.098373],
[27,0,390,2,266,96,-9.149131,-297.855072,-0.000534,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-142.123459,345.926117,123.876503,345.783997,-142.174759,249.926147,123.825203,249.784027]
],
[
[6,0,626,170,20,56,-9.849481,-52.733677,-0.206496,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-19.180573,61.840309,0.394537,57.739685,-30.662319,7.030006,-11.087213,2.929382],
[5,0,984,146,24,62,-5,-88,-0.049451,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-18.587440,96.682251,5.383223,95.495911,-21.652151,34.758041,2.318510,33.571701],
[7,0,386,202,26,14,-23.559601,-11.672348,-0.126302,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27.889942,17.262352,-2.097044,13.987230,-29.653469,3.373868,-3.860571,0.098746],
[9,0,1002,2,18,60,25.236664,-60.935246,-0.372337,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,21.422756,73.160385,38.189392,66.612114,-0.404831,17.271603,16.361805,10.723328],
[8,0,626,100,22,68,11.666667,-92.666664,0.302524,1,1,8,11.999999,0,0,1,0,0,0,0,0,-2,-2,0,-4,0,0,4294967295,4294967295,4294967295,4294967295,0.454803,101.738274,21.455730,108.292740,19.400745,34.321281,42.906712,39.562431],
[10,0,358,202,26,14,13.569338,-19.149933,-0.317068,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,10.377481,25.459612,35.081474,17.353275,6.012531,12.157461,30.716524,4.051126],
[31,0,240,180,270,20,0.559704,-171.255295,-0.012545,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.304230,182.947983,135.674530,179.561035,-134.555115,162.949554,135.423645,159.562607],
[28,0,658,2,266,80,-8.789445,-283.288116,-0.004630,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-141.602798,323.903534,124.394333,322.671844,-141.973221,243.904388,124.023911,242.672699],
[15,0,214,2,174,170,-26.687365,-291.422180,-0.023509,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-88.012054,320.871826,85.939873,316.781738,-92.008133,150.918823,81.943787,146.828720],
[13,0,554,100,70,140,22.382040,-196.838196,0.132146,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.711742,208.080887,70.101440,217.304245,19.158434,69.301498,88.548134,78.524841],
[11,0,2,2,210,176,-8,-126.777779,-0.007480,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-111.219185,231.552795,98.774948,229.982010,-112.535645,55.557709,97.458488,53.986931],
[12,0,926,2,74,142,-34.926651,-193.981064,-0.117186,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-73.015457,212.561783,0.477016,203.909821,-89.617867,71.535683,-16.125391,62.883728],
[14,0,658,84,138,126,-8.442719,-201.283173,-0.007480,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-67.543449,321.728607,70.452690,320.696381,-68.485916,195.732132,69.510223,194.699905],
[19,0,336,202,20,26,52.004398,-260.832703,-0.007480,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,42.101917,273.907135,62.101357,273.757538,41.907440,247.907867,61.906879,247.758270],
[23,0,278,202,34,28,-4.046395,-254.251770,-0.007480,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20.941200,268.378540,13.057850,268.124207,-21.150639,240.379318,12.848412,240.125000],
[18,0,414,202,22,6,17.549074,-200.088730,-0.007480,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.571821,203.170929,28.571207,203.006363,6.526941,197.171097,28.526327,197.006531],
[16,0,798,84,106,150,-60.829182,-261.676697,-0.039537,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.400421,298.941895,-11.483257,294.752045,-123.329437,149.059113,-17.412270,144.869278],
[32,0,2,180,236,30,-19.626886,-156.507355,-0.012545,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.429443,172.986389,98.551994,170.025955,-137.805771,142.988754,98.175667,140.028320],
[33,0,512,180,40,54,98.489273,-165.026352,-0.044602,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.713005,192.891235,119.673225,191.107758,77.305321,138.944946,117.265541,137.161469],
[34,0,1002,84,8,10,104.617065,-167.755844,-0.044602,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.843979,172.929214,108.836021,172.572525,100.398109,162.939163,108.390152,162.582474],
[35,0,1014,100,6,2,100.576454,-166.935196,-0.044602,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.624023,168.067963,103.618057,167.800446,97.534851,166.069946,103.528885,165.802429],
[27,0,390,2,266,96,-8.724619,-297.287964,-0.004630,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-141.500931,345.903290,124.496208,344.671600,-141.945450,249.904327,124.051689,248.672638]
],
[
[6,0,626,170,20,56,-14.446253,-52.334721,-0.270500,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.175774,62.019527,-3.903025,56.675266,-38.139706,8.055828,-18.866957,2.711567],
[5,0,984,146,24,62,-9,-87.500000,-0.074176,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22.368635,96.515518,1.565370,94.736916,-26.963362,34.686008,-3.029356,32.907406],
[7,0,386,202,26,14,-30.754602,-12.234375,-0.179811,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-34.779770,18.047981,-9.198957,13.398045,-37.283585,4.273696,-11.702768,-0.376240],
[9,0,1002,2,18,60,28.097511,-58.668385,-0.235619,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,22.653006,70.259644,40.155663,66.057632,8.646284,11.917450,26.148943,7.715435],
[8,0,626,100,22,68,14.500000,-90,0.314159,1,1,8,11.999999,0,0,1,0,0,0,0,0,-1,-2,0,-3,0,0,4294967295,4294967295,4294967295,4294967295,3.183344,98.940544,24.106586,105.738914,23.863478,32.057568,46.046795,38.213902],
[10,0,358,202,26,14,22.376663,-15.562881,-0.135263,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,18.096588,21.191465,43.859100,17.685341,16.208675,7.319343,41.971188,3.813219],
[31,0,240,180,270,20,0.447255,-171.166138,-0.014044,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.398987,183.061096,135.574371,179.269211,-134.679871,163.063065,135.293488,159.271179],
[28,0,658,2,266,80,-8.417911,-282.720276,-0.008370,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-141.078445,323.832123,124.912247,321.605621,-141.748062,243.834930,124.242630,241.608429],
[15,0,214,2,174,170,-26.313755,-290.899170,-0.026625,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-87.546364,320.539825,86.391968,315.907593,-92.072113,150.600052,81.866226,145.967819],
[13,0,554,100,70,140,22.341640,-196.248505,0.147106,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.505585,207.165771,69.749542,217.426117,21.026272,68.677864,90.270233,78.938210],
[11,0,2,2,210,176,-8,-126.333336,-0.009973,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-110.957619,231.365387,99.031937,229.271027,-112.712891,55.374130,97.276665,53.279770],
[12,0,926,2,74,142,-34.901855,-193.604980,-0.135886,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-72.636566,212.894669,0.681282,202.869995,-91.873093,72.203667,-18.555250,62.179001],
[14,0,658,84,138,126,-8.258198,-200.714600,-0.009973,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-67.058441,321.307007,70.934708,319.930725,-68.315048,195.313293,69.678085,193.936996],
[19,0,336,202,20,26,52.337208,-260.113220,-0.009973,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,42.467354,273.212311,62.466362,273.012848,42.208054,247.213593,62.207062,247.014130],
[23,0,278,202,34,28,-3.729820,-253.672073,-0.009973,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20.589352,267.840912,13.408958,267.501831,-20.868599,239.842316,13.129711,239.503220],
[18,0,414,202,22,6,17.730536,-199.455353,-0.009973,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.761002,202.564911,28.759909,202.345505,6.701162,196.565201,28.700069,196.345795],
[25,0,1002,96,10,4,-6.749618,-251.702087,-0.009973,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-11.729424,253.751846,-1.729920,253.652115,-11.769316,249.752060,-1.769812,249.652328],
[16,0,798,84,106,150,-60.565342,-261.239288,-0.043277,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.996811,298.715790,-11.096062,294.129852,-123.486343,148.856262,-17.585594,144.270325],
[32,0,2,180,236,30,-19.761433,-156.448502,-0.014044,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.539124,173.104218,98.437592,169.789825,-137.960449,143.107178,98.016266,139.792786],
[33,0,512,180,40,54,98.367371,-164.790329,-0.047348,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.667709,192.706680,119.622879,190.813461,77.111862,138.767197,117.067032,136.873978],
[34,0,1002,84,8,10,104.502640,-167.502991,-0.047348,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.743774,172.686707,108.734810,172.308060,100.270470,162.697922,108.261505,162.319275],
[35,0,1014,100,6,2,100.459793,-166.693420,-0.047348,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.510483,167.834290,103.503761,167.550308,97.415825,165.836533,103.409103,165.552551],
[27,0,390,2,266,96,-8.300726,-296.719788,-0.008370,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-140.894287,345.831360,125.096397,343.604858,-141.697845,249.834732,124.292839,247.608215]
],
[
[6,0,626,170,20,56,-19.041161,-51.943733,-0.334504,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27.133362,62.167053,-8.241897,55.601040,-45.518200,9.270950,-26.626734,2.704937],
[5,0,984,146,24,62,-13,-87,-0.098902,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-26.141659,96.343277,-2.258942,93.973495,-32.263588,34.646259,-8.380874,32.276482],
[7,0,386,202,26,14,-37.880955,-12.968586,-0.233320,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-41.589428,18.989153,-16.293924,12.977711,-44.826359,5.368496,-19.530853,-0.642945],
[9,0,1002,2,18,60,30.950939,-56.397835,-0.098902,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,23.977442,67.138893,41.889481,65.361557,18.052992,7.432102,35.965031,5.654766],
[8,0,626,100,22,68,17.333334,-87.333336,0.325795,1,1,8,11.999999,0,0,1,0,0,0,0,0,-1,-1,0,-2,0,0,4294967295,4294967295,4294967295,4294967295,5.913419,96.141602,26.756145,103.182961,27.050291,30.451168,49.160477,36.865196],
[10,0,358,202,26,14,31.316032,-12.815475,0.046542,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,26.088821,17.577435,52.060665,18.787094,26.740175,3.592595,52.712021,4.802254],
[31,0,240,180,270,20,0.355248,-171.093170,-0.015272,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.476303,183.153595,135.492233,179.030411,-134.781723,163.155930,135.186813,159.032745],
[28,0,658,2,266,80,-8.042010,-282.151550,-0.011754,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-140.562668,323.712067,125.418961,320.585510,-141.502975,243.717590,124.478653,240.591034],
[15,0,214,2,174,170,-25.930447,-290.375183,-0.029564,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-87.075691,320.195618,86.848282,315.052307,-92.100800,150.269913,81.823166,145.126572],
[13,0,554,100,70,140,22.300709,-195.659424,0.162066,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.303782,206.248810,69.386497,217.543854,22.893867,68.083374,91.976578,79.378418],
[11,0,2,2,210,176,-8,-125.888885,-0.012467,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-110.695419,231.177307,99.288254,228.559387,-112.889488,55.190979,97.094185,52.573059],
[12,0,926,2,74,142,-34.876888,-193.229172,-0.154586,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-72.244308,213.221085,0.873272,201.827194,-94.108231,72.914383,-20.990660,61.520508],
[14,0,658,84,138,126,-8.074299,-200.145584,-0.012467,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-66.573685,320.884247,71.415588,319.163879,-68.144440,194.894028,69.844833,193.173676],
[19,0,336,202,20,26,52.669018,-259.392944,-0.012467,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,42.831856,272.516602,62.830303,272.267273,42.507732,246.518616,62.506180,246.269287],
[23,0,278,202,34,28,-3.413895,-253.091599,-0.012467,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20.238045,267.302429,13.759312,266.878571,-20.587101,239.304611,13.410255,238.880753],
[18,0,414,202,22,6,17.911215,-198.821533,-0.012467,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.949469,201.958435,28.947760,201.684174,6.874670,195.958893,28.872961,195.684631],
[24,0,1012,84,6,6,2.585639,-253.016800,-0.012467,1,1,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-0.376729,256.053955,5.622805,255.979172,-0.451527,250.054428,5.548006,249.979630],
[25,0,1002,96,10,4,-6.438595,-251.129150,-0.012467,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-11.413273,253.191330,-1.414051,253.066666,-11.463139,249.191635,-1.463916,249.066971],
[16,0,798,84,106,150,-60.281387,-260.801117,-0.046661,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.585724,298.468384,-10.701096,293.524109,-123.582306,148.631622,-17.697685,143.687378],
[17,0,390,100,162,78,4.046815,-290.001465,-0.012467,1,1,81,39,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-76.460709,330.008209,85.526703,327.988647,-77.433075,252.014267,84.554337,249.994720],
[32,0,2,180,236,30,-19.871485,-156.400345,-0.015272,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.628662,173.200577,98.343826,169.596619,-138.086792,143.204071,97.885696,139.600113],
[33,0,512,180,40,54,98.267464,-164.597198,-0.049466,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.626961,192.553085,119.578033,190.575256,76.956894,138.619141,116.907967,136.641312],
[34,0,1002,84,8,10,104.408463,-167.296860,-0.049466,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.660583,172.488525,108.650795,172.092957,100.166130,162.500763,108.156342,162.105194],
[35,0,1014,100,6,2,100.363907,-166.495865,-0.049466,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.417023,167.642975,103.409683,167.346298,97.318130,165.645432,103.310791,165.348755],
[27,0,390,2,266,96,-7.877455,-296.150574,-0.011754,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-140.304077,345.710541,125.677551,342.583984,-141.432465,249.717163,124.549164,246.590607]
],
[
[6,0,626,170,20,56,-23.634174,-51.560688,-0.398508,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-31.055918,62.280655,-12.623099,54.519779,-52.786369,10.668766,-34.353550,2.907890],
[5,0,984,146,24,62,-17,-86.500000,-0.123627,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-29.906647,96.165321,-6.089819,93.205818,-37.552040,34.638515,-13.735213,31.679008],
[7,0,386,202,26,14,-44.928261,-13.870346,-0.286830,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-48.309425,20.080639,-23.371639,12.724901,-52.270206,6.652600,-27.332420,-0.703138],
[9,0,1002,2,18,60,33.797035,-54.123474,0.037815,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,25.424690,63.813873,43.411823,64.494392,27.693077,3.856766,45.680206,4.537281],
[8,0,626,100,22,68,20.166666,-84.666664,0.337430,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,-1,0,0,4294967295,4294967295,4294967295,4294967295,8.645037,93.341461,29.404425,100.624855,31.157349,29.176079,52.247803,35.515865],
[10,0,358,202,26,14,40.268341,-10.920578,0.228347,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,34.266293,14.658947,59.591381,20.544514,37.435444,1.022362,62.760532,6.907929],
[31,0,240,180,270,20,0.283685,-171.036407,-0.016226,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.536285,183.225525,135.428162,178.844666,-134.860779,163.228149,135.103668,158.847290],
[28,0,658,2,266,80,-7.661746,-281.581848,-0.014782,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-140.055969,323.543396,125.914978,319.611572,-141.238464,243.552139,124.732483,239.620300],
[15,0,214,2,174,170,-25.537447,-289.850189,-0.032324,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-86.600143,319.839325,87.308975,314.215881,-92.094299,149.928116,81.814812,144.304688],
[13,0,554,100,70,140,22.259245,-195.070999,0.177026,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.106367,205.330139,69.012390,217.657349,24.760799,67.518097,93.666824,79.845314],
[11,0,2,2,210,176,-8,-125.444443,-0.014960,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-110.432587,230.988586,99.543922,227.847122,-113.065445,55.008286,96.911064,51.866814],
[12,0,926,2,74,142,-34.851746,-192.853668,-0.173286,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-71.838806,213.540802,1.052937,200.781708,-96.322487,73.667473,-23.430746,60.908371],
[14,0,658,84,138,126,-7.891022,-199.576111,-0.014960,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-66.089180,320.460266,71.895378,318.395844,-67.974068,194.474350,70.010490,192.409943],
[19,0,336,202,20,26,52.999828,-258.671844,-0.014960,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,43.195419,271.819977,63.193184,271.520782,42.806473,245.822891,62.804237,245.523712],
[23,0,278,202,34,28,-3.098621,-252.510345,-0.014960,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-19.887287,266.763092,14.108910,266.254456,-20.306152,238.766220,13.690044,238.257599],
[18,0,414,202,22,6,18.091110,-198.187271,-0.014960,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,7.137218,201.351486,29.134758,201.022385,7.047462,195.352158,29.045002,195.023056],
[24,0,1012,84,6,6,2.900707,-252.420593,-0.014960,1,1,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-0.054079,255.465134,5.945250,255.375381,-0.143835,249.465805,5.855494,249.376053],
[25,0,1002,96,10,4,-6.128204,-250.555450,-0.014960,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-11.097727,252.630020,-1.098845,252.480423,-11.157564,248.630478,-1.158682,248.480881],
[16,0,798,84,106,150,-59.977325,-260.362091,-0.049688,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.167358,298.199646,-10.298187,292.934814,-123.617561,148.384766,-17.748390,143.119965],
[17,0,390,100,162,78,4.454093,-289.401489,-0.014960,1,1,81,39,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.953423,329.608826,86.028450,327.185425,-77.120262,251.617569,84.861610,249.194138],
[32,0,2,180,236,30,-19.957064,-156.362900,-0.016226,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.698151,173.275528,98.270782,169.446335,-138.184906,143.279465,97.784027,139.450272],
[33,0,512,180,40,54,98.189659,-164.446976,-0.050955,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.590797,192.430588,119.538879,190.393280,76.840439,138.500671,116.788521,136.463364],
[34,0,1002,84,8,10,104.334671,-167.137482,-0.050955,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.594528,172.334717,108.584145,171.927261,100.085197,162.347702,108.074814,161.940247],
[35,0,1014,100,6,2,100.288925,-166.342514,-0.050955,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.343750,167.494019,103.335968,167.188416,97.241882,165.496613,103.234100,165.191010],
[27,0,390,2,266,96,-7.454807,-295.580322,-0.014782,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-139.730774,345.540985,126.240173,341.609161,-141.149780,249.551483,124.821167,245.619659]
],
[
[6,0,626,170,20,56,-28.225266,-51.185555,-0.462512,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-34.946159,62.358269,-17.047472,53.434315,-59.933235,12.241947,-42.034550,3.317989],
[5,0,984,146,24,62,-21,-86,-0.148353,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-33.663746,95.981461,-9.927366,92.434036,-42.827930,34.662476,-19.091549,31.115051],
[7,0,386,202,26,14,-51.886444,-14.934364,-0.340339,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-54.930618,21.316607,-30.421938,12.637627,-59.603912,8.119625,-35.095234,-0.559353],
[9,0,1002,2,18,60,36.635895,-51.845192,0.174533,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,27.020950,60.304085,44.747490,63.429752,37.439842,1.215618,55.166382,4.341286],
[8,0,626,100,22,68,23,-82,0.349066,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,11.378218,90.540154,32.051456,98.064590,34.635586,26.641052,55.308823,34.165493],
[10,0,358,202,26,14,49.113628,-9.874294,0.410152,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,42.534584,12.465849,66.378143,22.833324,48.117069,-0.372993,71.960632,9.994484],
[31,0,240,180,270,20,0.232567,-170.995865,-0.016908,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.579071,183.276886,135.382324,178.711975,-134.917206,163.279755,135.044189,158.714844],
[28,0,658,2,266,80,-7.277120,-281.011139,-0.017453,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-139.558777,323.326233,126.400719,318.683868,-140.954956,243.338409,125.004539,238.696060],
[15,0,214,2,174,170,-25.134760,-289.324066,-0.034907,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-86.119804,319.470764,87.774208,313.398254,-92.052719,149.574341,81.841293,143.501831],
[13,0,554,100,70,140,22.217251,-194.483215,0.191986,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-0.086618,204.409821,68.627289,217.766449,26.626640,66.982018,95.340546,80.338646],
[11,0,2,2,210,176,-8,-125,-0.017453,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-110.169113,230.799225,99.798904,227.134216,-113.240738,54.826019,96.727280,51.161018],
[12,0,926,2,74,142,-34.826424,-192.478455,-0.191986,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-71.420181,213.853592,1.220226,199.733734,-98.515060,74.462540,-25.874651,60.342667],
[14,0,658,84,138,126,-7.708370,-199.006180,-0.017453,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-65.604942,320.035034,72.374046,317.626617,-67.803947,194.054245,70.175041,191.645813],
[19,0,336,202,20,26,53.329636,-257.949890,-0.017453,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,43.558041,271.122437,63.554993,270.773376,43.104279,245.126389,63.101231,244.777344],
[23,0,278,202,34,28,-2.784001,-251.928299,-0.017453,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-19.537079,266.222870,14.457744,265.629486,-20.025745,238.227127,13.969077,237.633743],
[18,0,414,202,22,6,18.270218,-197.552567,-0.017453,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,7.324251,200.744080,29.320900,200.360138,7.219536,194.744995,29.216185,194.361053],
[24,0,1012,84,6,6,3.215085,-251.823578,-0.017453,1,1,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.267899,254.875473,6.266985,254.770767,0.163185,248.876389,6.162271,248.771683],
[25,0,1002,96,10,4,-5.818449,-249.980957,-0.017453,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-10.782783,252.067917,-0.784306,251.893387,-10.852592,248.068527,-0.854115,247.893997],
[16,0,798,84,106,150,-59.653152,-259.922028,-0.052360,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-115.741913,297.909546,-9.887180,292.361938,-123.592300,148.115112,-17.737572,142.567505],
[17,0,390,100,162,78,4.860672,-288.800507,-0.017453,1,1,81,39,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.446350,329.208221,86.528976,326.380920,-76.807632,251.220093,85.167694,248.392792],
[32,0,2,180,236,30,-20.018181,-156.336151,-0.016908,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.747711,173.329041,98.218559,169.338974,-138.254913,143.333328,97.711342,139.343262],
[33,0,512,180,40,54,98.134026,-164.339691,-0.051814,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.559235,192.339279,119.505554,190.267624,76.762497,138.411758,116.708817,136.340103],
[34,0,1002,84,8,10,104.281349,-167.024918,-0.051814,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.545677,172.225372,108.534935,171.811035,100.027763,162.238800,108.017021,161.824463],
[35,0,1014,100,6,2,100.234924,-166.233429,-0.051814,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.290741,167.387466,103.282692,167.076706,97.187157,165.390152,103.179108,165.079391],
[27,0,390,2,266,96,-7.032786,-295.009003,-0.017453,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-139.174820,345.322876,126.784691,340.680511,-140.850266,249.337479,125.109245,244.695145]
],
[
[6,0,626,170,20,56,-23.310146,-52.123356,-0.436332,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-30.321203,63.116310,-12.195049,54.663944,-53.987827,12.363075,-35.861671,3.910709],
[5,0,984,146,24,62,-17.222221,-87.333336,-0.110538,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-30.254278,96.828888,-6.400751,94.181389,-37.093658,35.207275,-13.240129,32.559772],
[7,0,386,202,26,14,-46.014271,-15.265213,-0.356232,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-48.956635,21.695026,-24.588974,12.627660,-53.839062,8.573978,-29.471403,-0.493388],
[9,0,1002,2,18,60,32.786770,-51.903255,0.149886,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,23.383209,60.596531,41.181396,63.284393,32.342743,1.269249,50.140926,3.957108],
[8,0,626,100,22,68,20.166666,-82.500000,0.315628,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,8.836891,91.423912,29.750128,98.253006,29.945009,26.783001,50.858246,33.612099],
[10,0,358,202,26,14,44.036804,-9.777679,0.341534,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,37.650928,12.814222,62.149216,21.522488,42.339996,-0.377164,66.838287,8.331102],
[31,0,240,180,270,20,0.201896,-170.971527,-0.017317,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.604721,183.307693,135.354813,178.632355,-134.951035,163.310699,135.008499,158.635361],
[28,0,658,2,266,80,-7.575034,-281.821106,-0.010627,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-140.142441,323.232239,125.842537,320.405457,-140.992599,243.236740,124.992378,240.409988],
[15,0,214,2,174,170,-25.386076,-290.091309,-0.030330,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-86.508453,319.958588,87.411514,314.682007,-91.663757,150.036789,82.256218,144.760178],
[13,0,554,100,70,140,22.256462,-195.283646,0.178024,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.093363,205.520691,68.987053,217.916626,24.885225,67.733307,93.778915,80.129242],
[11,0,2,2,210,176,-8,-125.666664,-0.015126,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-110.415039,231.227844,99.560944,228.051453,-113.077148,55.247971,96.898834,52.071587],
[12,0,926,2,74,142,-34.850063,-193.080505,-0.174533,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-71.811295,213.813736,1.064476,200.963776,-96.469345,73.971046,-23.593567,61.121078],
[14,0,658,84,138,126,-7.878429,-199.816162,-0.015126,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-66.056488,320.709961,71.927719,318.622650,-67.962326,194.724380,70.021896,192.637054],
[19,0,336,202,20,26,53.022243,-258.901764,-0.015126,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,43.220020,272.051544,63.217735,271.749023,42.826752,246.054504,62.824467,245.751999],
[23,0,278,202,34,28,-3.077229,-252.749603,-0.015126,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-19.863529,267.005127,14.132585,266.490875,-20.287045,239.008347,13.709069,238.494064],
[18,0,414,202,22,6,18.103470,-198.423004,-0.015126,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,7.150105,201.589050,29.147589,201.256287,7.059351,195.589722,29.056835,195.256958],
[24,0,1012,84,6,6,2.922084,-252.658844,-0.015126,1,1,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-0.032196,255.703873,5.967118,255.613129,-0.122949,249.704559,5.876365,249.613815],
[25,0,1002,96,10,4,-6.107138,-250.795212,-0.015126,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-11.076315,252.870605,-1.077458,252.719360,-11.136817,248.871063,-1.137960,248.719818],
[16,0,798,84,106,150,-59.707081,-260.607056,-0.045534,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.053833,298.210815,-10.163704,293.385925,-122.881531,148.366302,-16.991398,143.541382],
[17,0,390,100,162,78,4.481617,-289.639496,-0.015126,1,1,81,39,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.919220,329.860199,86.062256,327.409851,-77.099014,251.869125,84.882462,249.418777],
[32,0,2,180,236,30,-20.054846,-156.320099,-0.017317,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.777405,173.361145,98.187202,169.274551,-138.296890,143.365646,97.667717,139.279053],
[33,0,512,180,40,54,98.100624,-164.275299,-0.047724,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.411469,192.198685,119.365921,190.290436,76.835327,138.260162,116.789780,136.351913],
[34,0,1002,84,8,10,104.236908,-166.985641,-0.047724,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.479996,172.170776,108.470886,171.789124,100.002930,162.182159,107.993820,161.800507],
[35,0,1014,100,6,2,100.193756,-166.177612,-0.047724,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.244881,167.319595,103.238045,167.033356,97.149467,165.321869,103.142632,165.035629],
[27,0,390,2,266,96,-7.426257,-295.820313,-0.010627,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-139.908661,345.230988,126.076324,342.404236,-140.928833,249.236404,125.056152,246.409637]
],
[
[6,0,626,170,20,56,-18.375187,-53.097576,-0.410152,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-25.671604,63.903236,-7.330402,55.928253,-48.001553,12.547871,-29.660351,4.572891],
[5,0,984,146,24,62,-13.444445,-88.666664,-0.072722,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-26.826178,97.662735,-2.889612,95.918938,-31.330971,35.826603,-7.394406,34.082809],
[7,0,386,202,26,14,-40.106697,-15.657738,-0.372124,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-42.946510,22.133499,-18.726021,12.680034,-48.036835,9.091697,-23.816347,-0.361767],
[9,0,1002,2,18,60,28.923336,-51.995529,0.125239,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,19.736872,60.917908,37.595894,63.166328,27.231604,1.387844,45.090622,3.636265],
[8,0,626,100,22,68,17.333332,-83,0.282190,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.308231,92.297699,27.438086,98.423813,25.243500,26.987236,46.373352,33.113354],
[10,0,358,202,26,14,38.945747,-9.750202,0.272917,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,32.783096,13.217441,57.820808,20.225512,36.556675,-0.264403,61.594383,6.743668],
[31,0,240,180,270,20,0.191672,-170.963425,-0.017453,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.613251,183.317978,135.345642,178.605820,-134.962311,163.321030,134.996582,158.608871],
[28,0,658,2,266,80,-7.877952,-282.630829,-0.004111,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-140.712372,323.177277,125.285362,322.083710,-141.041260,243.177963,124.956474,242.084381],
[15,0,214,2,174,170,-25.646847,-290.858398,-0.025908,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-86.900681,320.455139,87.040924,315.947571,-91.304626,150.512192,82.636978,146.004623],
[13,0,554,100,70,140,22.295210,-196.084641,0.164061,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.277203,206.630127,69.337250,218.062943,23.142836,68.510033,92.202888,79.942848],
[11,0,2,2,210,176,-8,-126.333336,-0.012799,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-110.660416,231.655899,99.322388,228.968170,-112.912994,55.670311,97.069809,52.982574],
[12,0,926,2,74,142,-34.873547,-193.682800,-0.157080,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-72.190994,213.767822,0.897942,202.191666,-94.404694,73.516068,-21.315754,61.939911],
[14,0,658,84,138,126,-8.049155,-200.625763,-0.012799,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-66.508392,321.383850,71.480309,319.617645,-68.121033,195.394180,69.867668,193.627960],
[19,0,336,202,20,26,52.713852,-259.852936,-0.012799,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,42.881054,272.979858,62.879417,272.723877,42.548286,246.981995,62.546650,246.726013],
[23,0,278,202,34,28,-3.371150,-253.570221,-0.012799,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20.190575,267.786652,13.806640,267.351501,-20.548939,239.788940,13.448276,239.353790],
[18,0,414,202,22,6,17.935917,-199.293076,-0.012799,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.975214,202.433609,28.973412,202.152039,6.898422,196.434113,28.896620,196.152542],
[25,0,1002,96,10,4,-6.396502,-251.608780,-0.012799,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-11.370495,253.672607,-1.371314,253.544617,-11.421690,249.672943,-1.422509,249.544952],
[16,0,798,84,106,150,-59.779156,-261.292816,-0.039018,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.369736,298.528625,-10.450413,294.393799,-122.220917,148.642792,-16.301598,144.507965],
[32,0,2,180,236,30,-20.067068,-156.314758,-0.017453,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.787308,173.371857,98.176750,169.253082,-138.310883,143.376434,97.653175,139.257660],
[33,0,512,180,40,54,98.089485,-164.253845,-0.043672,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.287323,192.101257,119.249184,190.354935,76.929787,138.152756,116.891647,136.406433],
[34,0,1002,84,8,10,104.214737,-166.989029,-0.043672,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.436844,172.158890,108.429214,171.809631,100.000259,162.168427,107.992630,161.819168],
[35,0,1014,100,6,2,100.174896,-166.164627,-0.043672,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.221413,167.294647,103.215691,167.032700,97.134102,165.296555,103.128380,165.034607],
[27,0,390,2,266,96,-7.820395,-296.630707,-0.004111,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-140.621918,345.177094,125.375816,344.083496,-141.016602,249.177902,124.981133,248.084320]
],
[
[6,0,626,170,20,56,-13.421525,-54.109180,-0.383972,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20.998302,64.720139,-2.454624,57.228008,-41.976269,12.797840,-23.432592,5.305710],
[5,0,984,146,24,62,-9.666666,-90,-0.034907,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.378942,98.483719,0.606438,97.646133,-25.542711,36.521488,-1.557331,35.683899],
[7,0,386,202,26,14,-34.165527,-16.113308,-0.388016,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-36.902069,22.633379,-12.834873,12.796206,-42.199013,9.674120,-18.131813,-0.163055],
[9,0,1002,2,18,60,25.046755,-52.122475,0.100593,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,16.082966,61.268539,33.991974,63.076153,22.108345,1.571850,40.017349,3.379463],
[8,0,626,100,22,68,14.500000,-83.500000,0.248752,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,3.791900,93.161087,25.114750,98.577370,20.533144,27.254097,41.855995,32.670383],
[10,0,358,202,26,14,33.842583,-9.792229,0.204299,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,27.932163,13.673843,53.391457,18.948736,30.772490,-0.035006,56.231781,5.239887],
[31,0,240,180,270,20,0.578818,-171.270447,-0.012290,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-134.288101,182.928741,135.691513,179.610641,-134.533890,162.930252,135.445724,159.612152],
[28,0,658,2,266,80,-8.185877,-283.440216,0.002094,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-141.269363,323.161560,124.730064,323.718689,-141.101822,243.161743,124.897606,243.718857],
[15,0,214,2,174,170,-25.917061,-291.625244,-0.021642,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-87.296616,320.960388,86.662643,317.194946,-90.975479,151.000198,82.983772,147.234772],
[13,0,554,100,70,140,22.333496,-196.886185,0.150098,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.464874,207.738068,69.677818,218.205536,21.399822,69.312180,90.612762,79.779655],
[11,0,2,2,210,176,-8,-127,-0.010472,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-110.905228,232.083374,99.083252,229.884293,-112.748260,56.093018,97.240219,53.893944],
[12,0,926,2,74,142,-34.896877,-194.285339,-0.139626,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-72.559174,213.716019,0.720657,203.417206,-92.321754,73.097954,-19.041920,62.799149],
[14,0,658,84,138,126,-8.220545,-201.434967,-0.010472,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-66.960640,322.056702,71.031792,320.611603,-68.280090,196.063599,69.712349,194.618500],
[19,0,336,202,20,26,52.404472,-260.803375,-0.010472,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,42.541153,273.907379,62.540058,273.697937,42.268887,247.908813,62.267792,247.699371],
[23,0,278,202,34,28,-3.665760,-254.390167,-0.010472,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20.518223,268.567413,13.479912,268.211365,-20.811432,240.568954,13.186703,240.212921],
[18,0,414,202,22,6,17.767557,-200.162750,-0.010472,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.799575,203.277771,28.798370,203.047394,6.736745,197.278107,28.735538,197.047729],
[16,0,798,84,106,150,-59.869370,-261.979126,-0.032812,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-116.689926,298.863037,-10.746986,295.385590,-121.610870,148.943787,-15.667931,145.466339],
[32,0,2,180,236,30,-19.604012,-156.517365,-0.012290,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.410767,172.966370,98.571419,170.066101,-137.779449,142.968628,98.202736,140.068359],
[33,0,512,180,40,54,98.509972,-165.066467,-0.034630,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.456779,192.742737,119.432800,191.357819,77.587143,138.775116,117.563164,137.390198],
[34,0,1002,84,8,10,104.610245,-167.856934,-0.034630,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,100.785759,172.992432,108.780960,172.715439,100.439529,162.998428,108.434731,162.721436],
[35,0,1014,100,6,2,100.578018,-166.996017,-0.034630,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.614441,168.099289,103.610840,167.891556,97.545197,166.100479,103.541595,165.892746],
[27,0,390,2,266,96,-8.215199,-297.440186,0.002094,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-141.315430,345.161530,124.683990,345.718628,-141.114380,249.161743,124.885040,249.718842]
],
[
[6,0,626,170,20,56,-8.450339,-55.159065,-0.357792,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-16.302282,65.568054,2.431163,58.563904,-35.913895,13.114407,-17.180450,6.110260],
[5,0,984,146,24,62,-5.888888,-91.333336,0.002909,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-19.912100,99.292580,4.087799,99.362389,-19.731750,37.292839,4.268149,37.362652],
[7,0,386,202,26,14,-28.192619,-16.633198,-0.403909,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-30.825203,23.195934,-6.917374,12.977535,-36.327415,10.322487,-12.419588,0.104088],
[9,0,1002,2,18,60,21.158184,-52.284515,0.075946,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,12.422517,61.648708,30.370632,63.014420,16.974880,1.821655,34.922997,3.187366],
[8,0,626,100,22,68,11.666666,-84,0.215314,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.287538,94.013672,22.779541,98.714073,15.816045,27.583843,37.308052,32.284241],
[10,0,358,202,26,14,28.729443,-9.904057,0.135681,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,23.099072,14.181780,48.860115,17.698666,24.992779,0.310447,50.753826,3.827332],
[31,0,240,180,270,20,0.934942,-171.552658,-0.007539,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.985825,182.570129,136.006485,180.534622,-134.136612,162.570694,135.855698,160.535187],
[28,0,658,2,266,80,-8.498812,-284.249176,0.007990,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-141.814148,323.185272,124.177368,325.310516,-141.174988,243.187836,124.816528,245.313080],
[15,0,214,2,174,170,-26.196732,-292.391754,-0.017531,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-87.696365,321.474304,86.276894,318.424103,-90.676460,151.500427,83.296799,148.450226],
[13,0,554,100,70,140,22.371317,-197.688293,0.136136,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.656342,208.844452,70.008690,218.344543,19.656523,70.139755,89.008873,79.639847],
[11,0,2,2,210,176,-8,-127.666664,-0.008145,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-111.149498,232.510284,98.843544,230.799866,-112.582977,56.516113,97.410065,54.805710],
[12,0,926,2,74,142,-34.920055,-194.888153,-0.122173,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-72.915733,213.658569,0.532684,204.640244,-90.221176,72.717018,-16.772760,63.698685],
[14,0,658,84,138,126,-8.392599,-202.243759,-0.008145,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-67.413239,322.728455,70.582184,321.604492,-68.439484,196.732651,69.555946,195.608673],
[19,0,336,202,20,26,52.094101,-261.753082,-0.008145,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,42.200314,274.834106,62.199650,274.671204,41.988552,248.834961,61.987888,248.672058],
[23,0,278,202,34,28,-3.961059,-255.209427,-0.008145,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20.846470,269.347412,13.152406,269.070496,-21.074524,241.348358,12.924352,241.071426],
[18,0,414,202,22,6,17.598394,-201.032028,-0.008145,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.623193,204.121521,28.622463,203.942337,6.574325,198.121719,28.573597,197.942535],
[16,0,798,84,106,150,-59.977737,-262.665924,-0.026917,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.014755,299.214233,-11.053150,296.361389,-121.051796,149.268570,-15.090191,146.415726],
[32,0,2,180,236,30,-19.177572,-156.703873,-0.007539,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-137.061127,172.593033,98.932152,170.813858,-137.287292,142.593887,98.705986,140.814713],
[33,0,512,180,40,54,98.894463,-165.813995,-0.026311,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.611694,193.330811,119.597855,192.278488,78.191071,139.349503,118.177231,138.297180],
[34,0,1002,84,8,10,104.971313,-168.655106,-0.026311,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.104240,173.758606,109.101471,173.548141,100.841156,163.762070,108.838387,163.551605],
[35,0,1014,100,6,2,100.946388,-167.760681,-0.026311,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,97.973732,168.839264,103.971657,168.681412,97.921120,166.839951,103.919044,166.682098],
[27,0,390,2,266,96,-8.610667,-298.248718,0.007990,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-141.989929,345.184570,124.001595,347.309814,-141.222931,249.187622,124.768593,251.312866]
],
[
[6,0,626,170,20,56,-3.462852,-56.248104,-0.331613,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-11.584579,66.447983,7.325793,59.936623,-29.816395,13.498943,-10.906023,6.987579],
[5,0,984,146,24,62,-2.111111,-92.666664,0.040724,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-16.425209,100.090050,7.554893,101.067162,-13.900995,38.141453,10.079105,39.118568],
[7,0,386,202,26,14,-22.189877,-17.218647,-0.419801,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-24.717834,23.822392,-0.975410,13.225347,-30.423935,11.038010,-6.681511,0.440966],
[9,0,1002,2,18,60,17.258810,-52.482037,0.051299,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,8.756569,62.058670,26.732891,62.981647,11.833157,2.137596,29.809479,3.060574],
[8,0,626,100,22,68,8.833334,-84.500000,0.181876,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-1.205219,94.855072,20.431911,98.834328,11.094311,27.976662,32.731445,31.955921],
[10,0,358,202,26,14,23.608477,-10.085918,0.067063,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,18.284653,14.739615,44.226208,16.481945,19.222830,0.771087,45.164383,2.513415],
[31,0,240,180,270,20,1.260058,-171.810120,-0.003201,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.707245,182.242264,136.291382,181.377869,-133.771271,162.242371,136.227356,161.377975],
[28,0,658,2,266,80,-8.816754,-285.057648,0.013575,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-142.347473,323.248566,123.628021,326.859344,-141.261536,243.255951,124.713959,246.866730],
[15,0,214,2,174,170,-26.485851,-293.157959,-0.013575,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-88.100052,321.996979,85.883911,319.635040,-90.407700,152.012665,83.576263,149.650726],
[13,0,554,100,70,140,22.408672,-198.490936,0.122173,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.851578,209.949188,70.329811,218.480042,17.913284,70.992737,87.391510,79.523590],
[11,0,2,2,210,176,-8,-128.333328,-0.005818,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-111.393196,232.936615,98.603249,231.714905,-112.417114,56.939598,97.579330,55.717880],
[12,0,926,2,74,142,-34.943085,-195.491211,-0.104720,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-73.260559,213.595657,0.334057,205.860550,-88.103607,72.373543,-14.508984,64.638443],
[14,0,658,84,138,126,-8.565315,-203.052170,-0.005818,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-67.866173,323.399200,70.131493,322.596375,-68.599205,197.401337,69.398460,196.598495],
[19,0,336,202,20,26,51.782734,-262.702087,-0.005818,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,41.858536,275.760040,61.858192,275.643677,41.707275,249.760483,61.706932,249.644135],
[23,0,278,202,34,28,-4.257043,-256.028015,-0.005818,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-21.175308,270.126678,12.824116,269.928864,-21.338203,242.127151,12.661221,241.929352],
[18,0,414,202,22,6,17.428427,-201.900925,-0.005818,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.446066,204.964874,28.445694,204.836884,6.411160,198.964966,28.410788,198.836975],
[16,0,798,84,106,150,-60.104263,-263.353027,-0.021332,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.344513,299.582214,-11.368629,297.321228,-120.544037,149.616333,-14.568157,147.355347],
[32,0,2,180,236,30,-18.787863,-156.874222,-0.003201,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.739243,172.251923,99.259552,171.496368,-136.835281,142.252075,99.163513,141.496521],
[33,0,512,180,40,54,99.243553,-166.496399,-0.018716,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.752342,193.865967,119.745338,193.117386,78.741768,139.875412,118.734764,139.126831],
[34,0,1002,84,8,10,105.298645,-169.383591,-0.018716,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.392914,174.457581,109.391518,174.307861,101.205772,164.459320,109.204376,164.309601],
[35,0,1014,100,6,2,101.280632,-168.458618,-0.018716,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.299873,169.514587,104.298820,169.402298,98.262444,167.514938,104.261391,167.402649],
[27,0,390,2,266,96,-9.006796,-299.056366,0.013575,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-142.646103,345.246552,123.329384,348.857330,-141.342972,249.255402,124.632515,252.866180]
],
[
[6,0,626,170,20,56,1.539673,-57.377140,-0.305433,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-6.846273,67.360924,12.228065,61.346806,-23.685799,13.952774,-4.611459,7.938660],
[5,0,984,146,24,62,1.666668,-94,0.078540,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-12.917848,100.876907,11.008168,102.759933,-8.053383,39.068039,15.872633,40.951057],
[7,0,386,202,26,14,-16.159262,-17.870842,-0.435693,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-18.581955,24.513926,4.989065,13.540913,-24.490501,11.821836,-0.919480,0.848824],
[9,0,1002,2,18,60,13.349821,-52.715382,0.026652,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.086172,62.498638,23.079781,62.978321,6.685112,2.519947,24.678719,2.999630],
[8,0,626,100,22,68,6,-85,0.148439,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-3.686754,95.684883,18.071316,98.938553,6.370043,28.432671,28.128113,31.686340],
[10,0,358,202,26,14,18.481829,-10.337971,-0.001555,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,13.489609,15.345739,39.489578,15.305310,13.467839,1.345757,39.467812,1.305326],
[31,0,240,180,270,20,1.554177,-172.042862,0.000723,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.453018,181.945267,136.546921,182.140457,-133.438553,161.945267,136.561386,162.140457],
[28,0,658,2,266,80,-9.139708,-285.865540,0.018850,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-142.870026,323.351593,123.082733,328.365295,-141.362152,243.365799,124.590607,248.379486],
[15,0,214,2,174,170,-26.784424,-293.923706,-0.009774,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-88.507797,322.528351,85.483894,320.827728,-90.169327,152.536453,83.822365,150.835831],
[13,0,554,100,70,140,22.445559,-199.294159,0.108210,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.050549,211.052277,70.641113,218.612244,16.170460,71.871155,85.761024,79.431114],
[11,0,2,2,210,176,-8,-129,-0.003491,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-111.636337,233.362396,98.362389,232.629364,-112.250694,57.363472,97.748032,56.630432],
[12,0,926,2,74,142,-34.965961,-196.094543,-0.087266,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-73.593567,213.527496,0.124840,207.077972,-85.969681,72.067848,-12.251274,65.618332],
[14,0,658,84,138,126,-8.738694,-203.860168,-0.003491,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-68.319450,324.068878,69.679710,323.587158,-68.759270,198.069641,69.239891,197.587936],
[23,0,278,202,34,28,-4.553714,-256.845886,-0.003491,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-21.504744,270.905151,12.495050,270.786469,-21.602480,242.905319,12.397314,242.786636],
[18,0,414,202,22,6,17.257656,-202.769424,-0.003491,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.268195,205.807800,28.268063,205.731003,6.247251,199.807846,28.247116,199.731049],
[16,0,798,84,106,150,-60.248940,-264.040344,-0.016057,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-117.679489,299.967102,-11.693153,298.265137,-120.087936,149.986435,-14.101604,148.284454],
[32,0,2,180,236,30,-18.434973,-157.028397,0.000723,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.445786,171.943085,99.554153,172.113693,-136.424103,141.943100,99.575836,142.113708],
[33,0,512,180,40,54,99.557770,-167.113708,-0.011843,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.878937,194.348679,119.876129,193.874954,79.239410,140.352463,119.236603,139.878738],
[34,0,1002,84,8,10,105.592880,-170.042435,-0.011843,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.652374,175.089462,109.651817,174.994705,101.533943,165.090164,109.533386,164.995407],
[35,0,1014,100,6,2,101.581314,-169.089874,-0.011843,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.593369,170.125336,104.592949,170.054276,98.569679,168.125473,104.569260,168.054413],
[27,0,390,2,266,96,-9.403585,-299.863068,0.018850,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-143.284683,345.347687,122.668068,350.361389,-141.475235,249.364746,124.477516,254.378433]
],
[
[6,0,626,170,20,56,6.702121,-58.731857,-0.373328,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-0.987176,69.261566,17.635201,61.967247,-21.411259,17.118904,-2.788882,9.824593],
[5,0,984,146,24,62,5.444445,-95.333336,0.116355,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-9.389635,101.653938,14.448085,104.440170,-2.191875,40.073166,21.645845,42.859398],
[7,0,386,202,26,14,-13.636250,-20.517323,-0.474499,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-15.799392,27.249397,7.328171,15.370174,-22.195896,14.796094,0.931667,2.916872],
[9,0,1002,2,18,60,7.793207,-52.238106,-0.051916,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,0.322915,62.639774,18.298662,61.705704,-2.790659,2.720615,15.185088,1.786545],
[8,0,626,100,22,68,3,-85,0.069870,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-5.818241,96.412216,16.128080,97.948105,-1.070930,28.578129,20.875393,30.114021],
[10,0,358,202,26,14,9.583282,-9.588627,0.018348,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,4.492390,14.496051,30.488014,14.973070,4.749246,0.498406,30.744869,0.975426],
[31,0,240,180,270,20,1.817311,-172.250977,0.004234,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.223831,181.679260,136.773758,182.822510,-133.139145,161.679443,136.858444,162.822693],
[28,0,658,2,266,80,-9.467666,-285.561737,0.023814,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.382431,322.383423,122.542160,328.717377,-141.477493,242.406113,124.447098,248.740051],
[15,0,214,2,174,170,-27.092445,-293.577881,-0.006128,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-88.919693,321.957275,85.077034,320.891022,-89.961456,151.960495,84.035271,150.894211],
[13,0,554,100,70,140,22.481970,-198.986801,0.094248,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.253214,211.042496,70.942551,217.630081,14.428378,71.663834,84.117714,78.251411],
[11,0,2,2,210,176,-8,-128.555557,-0.001164,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-111.878922,232.676514,98.120941,232.432159,-112.083710,56.676620,97.916153,56.432274],
[12,0,926,2,74,142,-34.988693,-195.587006,-0.069813,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-73.914673,212.343155,-0.094925,207.181183,-83.820084,70.689064,-10.000343,65.527084],
[14,0,658,84,138,126,-8.912733,-203.556671,-0.001164,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-68.773071,323.626404,69.226837,323.465820,-68.919678,197.626495,69.080231,197.465912],
[23,0,278,202,34,28,-4.851068,-256.551971,-0.001164,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-21.834766,270.571747,12.165212,270.532196,-21.867348,242.571762,12.132630,242.532196],
[18,0,414,202,22,6,17.086086,-202.526413,-0.001164,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.089584,205.539215,28.089569,205.513611,6.082603,199.539215,28.082588,199.513611],
[16,0,798,84,106,150,-60.411774,-263.616638,-0.011093,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-118.019974,299.257843,-12.026497,298.082062,-119.683823,149.267059,-13.690342,148.091278],
[32,0,2,180,236,30,-18.118998,-157.166412,0.004234,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-136.181458,171.666641,99.816437,172.665909,-136.054428,141.666916,99.943466,142.666183],
[33,0,512,180,40,54,99.837608,-167.665970,-0.005695,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,79.991692,194.779419,119.991043,194.551636,79.684174,140.780304,119.683525,140.552521],
[34,0,1002,84,8,10,105.854599,-170.631760,-0.005695,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,101.883141,175.654465,109.883011,175.608902,101.826187,165.654617,109.826057,165.609055],
[35,0,1014,100,6,2,101.848969,-169.654541,-0.005695,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,98.854713,170.671616,104.854614,170.637436,98.843323,168.671646,104.843224,168.637466],
[27,0,390,2,266,96,-9.801031,-299.557770,0.023814,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-143.906281,344.377197,122.018303,350.711121,-141.620361,248.404419,124.304222,254.738342]
],
[
[6,0,626,170,20,56,11.862773,-60.138901,-0.441222,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,4.905556,71.166008,22.990162,62.625107,-19.008972,20.529114,-0.924365,11.988209],
[5,0,984,146,24,62,9.222223,-96.666664,0.154171,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-5.840212,102.421928,17.875130,106.107384,3.680555,41.157299,27.395897,44.842754],
[7,0,386,202,26,14,-11.021319,-23.392223,-0.513305,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-12.921653,30.203152,9.727626,17.435608,-19.796484,18.007385,2.852794,5.239841],
[9,0,1002,2,18,60,2.207019,-51.962967,-0.130485,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-4.423826,62.918873,13.423155,60.576809,-12.230703,3.428936,5.616278,1.086872],
[8,0,626,100,22,68,0,-85,-0.008698,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-7.895321,97.069130,14.103846,96.877777,-8.486786,29.071705,13.512382,28.880348],
[10,0,358,202,26,14,0.644120,-9.304558,0.038251,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-4.543430,14.109694,21.437550,15.103972,-4.008049,0.119933,21.972931,1.114213],
[31,0,240,180,270,20,2.049468,-172.434494,0.007332,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-133.020218,181.444351,136.972519,183.424103,-132.873581,161.444885,137.119156,163.424637],
[28,0,658,2,266,80,-9.800319,-284.989349,0.028468,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-143.885010,321.187378,122.007210,328.758911,-141.607849,241.219788,124.284370,248.791321],
[15,0,214,2,174,170,-27.409605,-292.963623,-0.002637,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.335548,321.127045,84.663849,320.668152,-89.783897,151.127625,84.215492,150.668732],
[13,0,554,100,70,140,22.517910,-198.680008,0.080285,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.459547,211.030930,71.234070,216.644867,12.687396,71.481888,82.461914,77.095818],
[11,0,2,2,210,176,-8,-128.111115,0.001164,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112.120941,231.990051,97.878922,232.234390,-111.916153,55.990158,98.083710,56.234505],
[12,0,926,2,74,142,-35.011272,-195.079727,-0.052360,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-74.223747,211.153976,-0.325165,207.281113,-81.655457,69.348587,-7.756870,65.475723],
[14,0,658,84,138,126,-9.087120,-202.984894,0.001164,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69.226707,322.915009,68.773201,323.075562,-69.080101,196.915085,68.919807,197.075653],
[23,0,278,202,34,28,-5.148791,-255.989517,0.001164,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22.165070,269.969727,11.834907,270.009277,-22.132488,241.969742,11.867488,242.009308],
[18,0,414,202,22,6,16.914026,-202.015152,0.001164,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.910543,205.002350,27.910528,205.027954,5.917524,199.002350,27.917509,199.027954],
[16,0,798,84,106,150,-60.592453,-262.925018,-0.006438,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-118.365913,298.297699,-12.368111,297.615265,-119.331650,148.300827,-13.333851,147.618378],
[32,0,2,180,236,30,-17.840008,-157.288239,0.007332,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.946823,171.422607,100.046829,173.153061,-135.726852,141.423416,100.266800,143.153870],
[33,0,512,180,40,54,100.083496,-168.153198,-0.000269,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.090775,195.158585,120.090767,195.147812,80.076225,141.158585,120.076218,141.147812],
[34,0,1002,84,8,10,106.084305,-171.151581,-0.000269,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.085655,176.152664,110.085655,176.150497,102.082954,166.152664,110.082954,166.150497],
[35,0,1014,100,6,2,102.084038,-170.152664,-0.000269,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.084305,171.153473,105.084305,171.151855,99.083771,169.153473,105.083771,169.151855],
[27,0,390,2,266,96,-10.198820,-298.983673,0.028468,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-144.511215,343.178467,121.380997,350.750000,-141.778641,247.217346,124.113571,254.788879]
],
[
[6,0,626,170,20,56,17.019646,-61.598183,-0.509117,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,10.826567,73.071884,28.290070,63.323750,-16.468208,24.174076,0.995293,14.425941],
[5,0,984,146,24,62,13,-98,0.191986,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-2.269253,103.181694,21.289799,107.761108,9.560905,42.320808,33.119957,46.900223],
[7,0,386,202,26,14,-8.304718,-26.488689,-0.552112,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-9.939383,33.368214,12.197512,19.731575,-17.282188,21.448349,4.854706,7.811710],
[9,0,1002,2,18,60,-3.392784,-51.891659,-0.209053,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-9.143272,63.334206,8.464830,59.598602,-21.595284,4.640530,-3.987182,0.904926],
[8,0,626,100,22,68,-3,-85,-0.087266,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-9.923689,97.651581,11.992595,95.734154,-15.850279,29.910343,6.066005,27.992916],
[10,0,358,202,26,14,-8.299015,-9.487518,0.058154,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-13.581167,14.188461,12.374880,15.699607,-12.767473,0.212128,13.188574,1.723273],
[31,0,240,180,270,20,2.250655,-172.593445,0.010018,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.842743,181.240601,137.143707,183.945297,-132.642395,161.241592,137.344055,163.946289],
[28,0,658,2,266,80,-10.136728,-284.416168,0.032812,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-144.377396,320.031403,121.479424,328.757874,-141.752884,240.074463,124.103935,248.800934],
[15,0,214,2,174,170,-27.734970,-292.348785,0.000698,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-89.754501,320.305481,84.245453,320.426971,-89.635818,150.305527,84.364136,150.427002],
[13,0,554,100,70,140,22.553371,-198.373749,0.066323,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.669506,211.017487,71.515610,215.656662,10.947853,71.325287,80.793961,75.964462],
[11,0,2,2,210,176,-8,-127.666664,0.003491,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112.362396,231.303009,97.636330,232.036041,-111.748039,55.304077,98.250687,56.037117],
[12,0,926,2,74,142,-35.033710,-194.572708,-0.034907,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-74.520752,209.960159,-0.565826,207.377594,-79.476479,68.046661,-5.521555,65.464096],
[14,0,658,84,138,126,-9.260921,-202.412720,0.003491,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-69.679428,322.202545,68.319733,322.684265,-69.239609,196.203323,68.759552,196.685028],
[19,0,336,202,20,26,50.529274,-262.621796,0.003491,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,40.483955,275.586823,60.483833,275.656616,40.574715,249.586975,60.574593,249.656784],
[23,0,278,202,34,28,-5.445950,-255.426361,0.003491,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22.494717,269.366943,11.505077,269.485626,-22.396976,241.367111,11.602818,241.485794],
[18,0,414,202,22,6,16.742413,-201.503479,0.003491,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.732007,204.465057,27.731873,204.541855,5.752952,198.465103,27.752819,198.541901],
[16,0,798,84,106,150,-60.790047,-262.233215,-0.002094,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-118.716614,297.354614,-12.716850,297.132599,-119.030777,147.354950,-13.031010,147.132935],
[32,0,2,180,236,30,-17.598080,-157.393845,0.010018,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.742416,171.211044,100.245743,173.575150,-135.441895,141.212540,100.546265,143.576645],
[33,0,512,180,40,54,100.295822,-168.575394,0.004433,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.176338,195.486481,120.175949,195.663773,80.415695,141.487015,120.415306,141.664307],
[34,0,1002,84,8,10,106.282463,-171.601959,0.004433,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.260338,176.584183,110.260262,176.619644,102.304665,166.584274,110.304588,166.619736],
[35,0,1014,100,6,2,102.286934,-170.584244,0.004433,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.282532,171.570938,105.282471,171.597534,99.291397,169.570953,105.291336,169.597549],
[27,0,390,2,266,96,-10.596017,-298.408630,0.032812,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-145.099136,342.019562,120.757683,350.746033,-141.949722,246.071228,123.907097,254.797699]
],
[
[6,0,626,170,20,56,20.865028,-59.720043,-0.362930,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,13.066668,70.169235,31.763878,63.068932,-6.814178,17.817039,11.883033,10.716736],
[5,0,984,146,24,62,15.333334,-95.166664,0.238528,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-0.160463,99.632339,23.160019,105.302887,14.488456,39.387760,37.808937,45.058308],
[7,0,386,202,26,14,0.925077,-21.296112,-0.391967,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-1.785687,27.826942,22.242460,17.894772,-7.133780,14.888709,16.894367,4.956535],
[9,0,1002,2,18,60,-8.842051,-52.196789,-0.257331,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-14.033634,63.903515,3.373676,59.322517,-29.303627,5.879150,-11.896317,1.298153],
[8,0,626,100,22,68,-6.833333,-85.166664,-0.134352,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-13.153864,98.130112,8.647881,95.183250,-22.262333,30.742897,-0.460589,27.796040],
[10,0,358,202,26,14,-15.670355,-9.875122,0.010429,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-20.722229,14.822704,5.276358,15.093864,-20.576220,0.823465,5.422367,1.094625],
[31,0,240,180,270,20,2.420880,-172.727890,0.012290,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.691818,181.068085,137.287796,184.386185,-132.446030,161.069595,137.533585,164.387695],
[28,0,658,2,266,80,-10.476892,-283.842194,0.036846,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-144.860123,318.915649,120.959343,328.714417,-141.913132,238.969955,123.906334,248.768738],
[15,0,214,2,174,170,-28.068531,-291.733276,0.003879,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-90.176666,319.492615,83.822037,320.167450,-89.517319,149.493881,84.481384,150.168732],
[13,0,554,100,70,140,22.588356,-198.068039,0.052360,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.883062,211.002136,71.787125,214.665649,9.210096,71.194000,79.114166,74.857521],
[11,0,2,2,210,176,-8,-127.222221,0.005818,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112.603279,230.615417,97.393166,231.837143,-111.579361,54.618408,98.417084,55.840126],
[12,0,926,2,74,142,-35.056004,-194.065948,-0.017453,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-74.805573,208.761917,-0.816845,207.470428,-77.283813,66.783539,-3.295088,65.492065],
[14,0,658,84,138,126,-9.434132,-201.840149,0.005818,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-70.131241,321.489044,67.866425,322.291901,-69.398209,195.491180,68.599457,196.294037],
[19,0,336,202,20,26,50.215790,-262.188202,0.005818,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,40.140327,275.129791,60.139992,275.246155,40.291588,249.130249,60.291252,249.246597],
[23,0,278,202,34,28,-5.742539,-254.862518,0.005818,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22.823700,268.763367,11.175725,268.961182,-22.660805,240.763855,11.338620,240.961655],
[18,0,414,202,22,6,16.571245,-200.991425,0.005818,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.553978,203.927383,27.553606,204.055374,5.588884,197.927475,27.588512,198.055466],
[16,0,798,84,106,150,-61.004551,-261.541138,0.001939,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-119.072311,296.428589,-13.072517,296.634155,-118.781425,146.428879,-12.781628,146.634445],
[32,0,2,180,236,30,-17.393270,-157.483246,0.012290,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.568695,171.031982,100.413475,173.932251,-135.200012,141.034241,100.782158,143.934509],
[33,0,512,180,40,54,100.474930,-168.932617,0.008411,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.248543,195.763443,120.247124,196.099884,80.702736,141.765350,120.701317,142.101791],
[34,0,1002,84,8,10,106.449486,-171.982971,0.008411,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.407570,176.949158,110.407288,177.016434,102.491684,166.949509,110.491402,167.016785],
[35,0,1014,100,6,2,102.458038,-170.949371,0.008411,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.449730,171.924103,105.449524,171.974564,99.466553,169.924179,105.466347,169.974640],
[27,0,390,2,266,96,-10.992617,-297.832703,0.036846,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-145.670547,340.900726,120.148911,350.699524,-142.134140,244.965897,123.685318,254.764664]
],
[
[6,0,626,170,20,56,24.630619,-57.902195,-0.216743,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,15.393335,67.103966,34.925396,62.802967,3.350533,12.414196,22.882595,8.113194],
[5,0,984,146,24,62,17.666668,-92.333336,0.285070,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,1.981882,96.073318,25.013287,102.822723,19.417835,36.575527,42.449242,43.324928],
[7,0,386,202,26,14,10.500452,-16.983513,-0.231822,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.782960,22.998516,32.087444,17.024990,3.566446,9.373023,28.870932,3.399497],
[9,0,1002,2,18,60,-14.279024,-52.580467,-0.305608,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-18.899607,64.524094,-1.733650,59.108379,-36.951996,7.304245,-19.786037,1.888527],
[8,0,626,100,22,68,-10.666667,-85.333336,-0.181437,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-16.370028,98.579910,5.268850,94.610153,-28.640186,31.696106,-7.001309,27.726345],
[10,0,358,202,26,14,-23.033150,-10.428452,-0.037295,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-27.843243,15.611406,-1.861320,14.641964,-28.365250,1.621140,-2.383329,0.651698],
[31,0,240,180,270,20,2.560148,-172.837845,0.014149,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.567825,180.926849,137.405167,184.746826,-132.284866,160.928864,137.688126,164.748840],
[28,0,658,2,266,80,-10.820807,-283.267334,0.040569,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-145.333694,317.840210,120.447426,328.628662,-142.089035,237.906021,123.692085,248.694473],
[15,0,214,2,174,170,-28.410297,-291.117004,0.006904,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-90.602119,318.688293,83.393723,319.889557,-89.428497,148.692368,84.567352,149.893600],
[13,0,554,100,70,140,22.622858,-197.762878,0.038397,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.100170,210.984802,72.048576,213.671951,7.474464,71.087997,77.422867,73.775139],
[11,0,2,2,210,176,-8,-126.777779,0.008145,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-112.843605,229.927277,97.149437,231.637695,-111.410126,53.933121,98.582916,55.643524],
[12,0,926,2,74,142,-35.078156,-193.559448,0.000000,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.078156,207.559448,-1.078156,207.559448,-75.078156,65.559448,-1.078156,65.559448],
[14,0,658,84,138,126,-9.606753,-201.267166,0.008145,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-70.582138,320.774506,67.413292,321.898499,-69.555893,194.778671,68.439529,195.902664],
[19,0,336,202,20,26,49.902569,-261.753876,0.008145,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,39.797020,274.671997,59.796356,274.834900,40.008781,248.672852,60.008118,248.835754],
[23,0,278,202,34,28,-6.038559,-254.297989,0.008145,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.152023,268.159058,10.846851,268.435974,-22.923969,240.159988,11.074905,240.436920],
[18,0,414,202,22,6,16.400528,-200.478958,0.008145,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.376458,203.389267,27.375729,203.568451,5.425326,197.389465,27.424599,197.568649],
[16,0,798,84,106,150,-61.235970,-260.848633,0.005663,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-119.433228,295.519653,-13.434933,296.119873,-118.583839,145.522049,-12.585541,146.122284],
[32,0,2,180,236,30,-17.225630,-157.556396,0.014149,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.426041,170.885422,100.550339,174.224365,-135.001602,140.888428,100.974777,144.227371],
[33,0,512,180,40,54,100.621078,-169.224854,0.011666,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.307457,195.989700,120.304733,196.456329,80.937424,141.993378,120.934700,142.460007],
[34,0,1002,84,8,10,106.585670,-172.294647,0.011666,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.527611,177.247650,110.527069,177.340973,102.644272,167.248322,110.643730,167.341644],
[35,0,1014,100,6,2,102.597610,-171.248047,0.011666,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.586151,172.212982,105.585739,172.282974,99.609482,170.213120,105.609070,170.283112],
[27,0,390,2,266,96,-11.388619,-297.255829,0.040569,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-146.225983,339.822113,119.555153,350.610565,-142.332397,243.901093,123.448738,254.689545]
],
[
[6,0,626,170,20,56,28.314154,-56.139286,-0.070556,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,17.835003,63.897343,37.785244,62.487392,13.887148,8.036671,33.837387,6.626724],
[5,0,984,146,24,62,20,-89.500000,0.331613,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,4.158195,92.506195,26.850641,100.319832,24.343418,33.884045,47.035866,41.697678],
[7,0,386,202,26,14,20.295204,-13.598759,-0.071677,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,15.666121,18.943998,41.599358,17.081991,14.663502,4.979946,40.596741,3.117939],
[9,0,1002,2,18,60,-19.699902,-53.041828,-0.353886,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.738716,65.194519,-6.854116,58.956711,-44.531429,8.912525,-27.646830,2.674709],
[8,0,626,100,22,68,-14.500000,-85.500000,-0.228523,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-19.573549,99.000336,1.854498,94.016479,-34.978199,32.768192,-13.550152,27.784332],
[10,0,358,202,26,14,-30.379639,-11.147205,-0.085019,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-34.936996,16.553730,-9.030907,14.345892,-36.125832,2.604298,-10.219742,0.396460],
[31,0,240,180,270,20,2.668462,-172.923340,0.015594,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.471069,180.816971,137.496094,185.027283,-132.159180,160.819397,137.807983,165.029709],
[28,0,658,2,266,80,-11.168467,-282.691589,0.043982,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-145.798584,316.805145,119.944191,328.500671,-142.281128,236.882507,123.461647,248.578033],
[15,0,214,2,174,170,-28.760256,-290.499939,0.009774,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-91.030960,317.892639,82.960732,319.593262,-89.369431,147.900742,84.622261,149.601364],
[13,0,554,100,70,140,22.656876,-197.458267,0.024435,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.320795,210.965439,72.299904,212.675690,5.741301,71.007233,75.720406,72.717491],
[11,0,2,2,210,176,-8,-126.333336,0.010472,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-113.083359,229.238571,96.905121,231.437653,-111.240326,53.248222,98.748154,55.447296],
[12,0,926,2,74,142,-35.100163,-193.053207,0.017453,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.338409,206.352982,-1.349674,207.644455,-72.860161,64.374603,1.128571,65.666084],
[14,0,658,84,138,126,-9.778784,-200.693787,0.010472,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-71.032112,320.058899,66.960320,321.503998,-69.712662,194.065811,68.279762,195.510910],
[19,0,336,202,20,26,49.589622,-261.318817,0.010472,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,39.454037,274.213379,59.452942,274.422821,39.726303,248.214813,59.725208,248.424255],
[23,0,278,202,34,28,-6.334008,-253.732773,0.010472,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.479679,267.553986,10.518456,267.910034,-23.186470,239.555527,10.811665,239.911560],
[18,0,414,202,22,6,16.230263,-199.966110,0.010472,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.199450,202.850754,27.198246,203.081131,5.262280,196.851089,27.261074,197.081467],
[25,0,1002,96,10,4,-9.312900,-251.701462,0.010472,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-14.333569,253.648987,-4.334117,253.753708,-14.291681,249.649216,-4.292230,249.753937],
[16,0,798,84,106,150,-61.484291,-260.155609,0.009076,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-119.799545,294.627777,-13.803913,295.589783,-118.438210,144.633972,-12.442574,145.595978],
[32,0,2,180,236,30,-17.095200,-157.613297,0.015594,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.314758,170.771408,100.656540,174.451538,-134.846939,140.775055,101.124359,144.455185],
[33,0,512,180,40,54,100.734512,-169.452133,0.014198,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.353195,196.165466,120.349159,196.733368,81.119865,142.170898,121.115829,142.738800],
[34,0,1002,84,8,10,106.691315,-172.537018,0.014198,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.620728,177.479721,110.619926,177.593307,102.762703,167.480728,110.761902,167.594315],
[35,0,1014,100,6,2,102.705917,-171.480331,0.014198,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.692024,172.437637,105.691414,172.522827,99.720421,170.437836,105.719810,170.523026],
[27,0,390,2,266,96,-11.784020,-296.678040,0.043982,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-146.765884,338.783875,118.976891,350.479370,-142.544937,242.876709,123.197838,254.572220]
],
[
[6,0,626,170,20,56,31.913698,-54.425903,0.075631,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,20.416229,60.574741,40.359055,62.085922,24.647539,4.734829,44.590366,6.246010],
[5,0,984,146,24,62,22.333334,-86.666664,0.378155,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,6.368819,88.932556,28.673161,97.793503,29.259602,31.313011,51.563942,40.173962],
[7,0,386,202,26,14,30.177032,-11.171032,0.088468,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,24.754824,15.709716,50.653145,18.006880,25.991758,1.764466,51.890079,4.061630],
[9,0,1002,2,18,60,-25.100935,-53.579838,-0.402163,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-28.548569,65.913284,-11.984672,58.867905,-52.033157,10.700294,-35.469261,3.654919],
[8,0,626,100,22,68,-18.333334,-85.666664,-0.275608,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-22.765825,99.390839,-1.596109,93.403931,-41.270821,33.957172,-20.101105,27.970261],
[10,0,358,202,26,14,-37.702068,-12.030739,-0.132744,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-41.996311,17.648521,-16.225046,14.207315,-43.849266,3.771688,-18.078003,0.330481],
[31,0,240,180,270,20,2.745828,-172.984406,0.016627,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.401764,180.738464,137.560913,185.227585,-132.069244,160.741226,137.893433,165.230347],
[28,0,658,2,266,80,-11.519873,-282.114838,0.047085,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-146.255173,315.810486,119.450020,328.330505,-142.489761,235.899170,123.215431,248.419174],
[15,0,214,2,174,170,-29.118412,-289.882019,0.012489,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-91.463257,317.105560,82.523178,319.278534,-89.340210,147.118805,84.646225,149.291809],
[13,0,554,100,70,140,22.690409,-197.154190,0.010472,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.544901,210.943985,72.541061,211.677017,4.010950,70.951668,74.007111,71.684692],
[11,0,2,2,210,176,-8,-125.888885,0.012799,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-113.322556,228.549316,96.660248,231.237045,-111.069977,52.563721,98.912827,55.251457],
[12,0,926,2,74,142,-35.122032,-192.547211,0.034907,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.586258,205.142700,-1.631336,207.725266,-70.630524,63.229202,3.324394,65.811768],
[14,0,658,84,138,126,-9.950224,-200.119995,0.012799,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-71.481155,319.342255,66.507538,321.108459,-69.868515,193.352570,68.120178,195.118790],
[19,0,336,202,20,26,49.276939,-260.882996,0.012799,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,39.111374,273.753937,59.109737,274.009918,39.444141,247.756073,59.442505,248.012054],
[23,0,278,202,34,28,-6.628884,-253.166840,0.012799,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-23.806675,266.948120,10.190541,267.383270,-23.448311,238.950409,10.548905,239.385559],
[18,0,414,202,22,6,16.060446,-199.452850,0.012799,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,5.022951,202.311813,27.021149,202.593384,5.099743,196.312317,27.097940,196.593887],
[25,0,1002,96,10,4,-9.603041,-251.128601,0.012799,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-14.628229,253.064438,-4.629048,253.192429,-14.577034,249.064774,-4.577853,249.192764],
[16,0,798,84,106,150,-61.749527,-259.461884,0.012179,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-120.171463,293.752960,-14.179325,295.043823,-118.344734,143.764069,-12.352592,145.054962],
[32,0,2,180,236,30,-17.002014,-157.653946,0.016627,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.235107,170.689972,100.732277,174.613785,-134.736298,140.694107,101.231071,144.617920],
[33,0,512,180,40,54,100.815414,-169.614471,0.016007,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.385818,196.290894,120.380692,196.931137,81.250137,142.297806,121.245010,142.938049],
[34,0,1002,84,8,10,106.766632,-172.710129,0.016007,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.687119,177.645462,110.686089,177.773514,102.847176,167.646744,110.846146,167.774796],
[35,0,1014,100,6,2,102.783150,-171.646225,0.016007,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.767525,172.598083,105.766762,172.694107,99.799538,170.598343,105.798775,170.694366],
[27,0,390,2,266,96,-12.178821,-296.099335,0.047085,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-147.290665,337.786133,118.414536,350.306152,-142.772171,241.892532,122.933029,254.412537]
],
[
[6,0,626,170,20,56,35.427631,-52.756592,0.221818,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,23.157116,57.165043,42.667099,61.565117,35.477322,2.537098,54.987305,6.937172],
[5,0,984,146,24,62,24.666666,-83.833336,0.424697,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,8.614017,85.354019,30.481947,95.243088,34.160778,28.861870,56.028709,38.750938],
[7,0,386,202,26,14,40.010296,-9.710114,0.248613,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,33.933723,13.326090,59.134346,19.723635,37.378559,-0.243476,62.579178,6.154069],
[9,0,1002,2,18,60,-30.478436,-54.193279,-0.450441,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-33.326855,66.678734,-17.122259,58.842209,-59.448593,12.663410,-43.243999,4.826889],
[8,0,626,100,22,68,-22.166666,-85.833336,-0.322694,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-25.948275,99.750931,-5.083813,92.774239,-47.512596,35.260777,-26.648132,28.284084],
[10,0,358,202,26,14,-44.992710,-13.078033,-0.180468,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-49.014061,18.894281,-23.436304,14.227544,-51.526917,5.121645,-25.949163,0.454906],
[31,0,240,180,270,20,2.792246,-173.021011,0.017247,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.360123,180.691330,137.599716,185.347717,-132.015213,160.694305,137.944626,165.350693],
[28,0,658,2,266,80,-11.875018,-281.537140,0.049878,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-146.703888,314.856415,118.965302,328.118378,-142.715332,234.955917,122.953857,248.217865],
[15,0,214,2,174,170,-29.484760,-289.263214,0.015049,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-91.899078,316.327057,82.081207,318.945435,-89.340912,146.346313,84.639389,148.964676],
[13,0,554,100,70,140,22.723452,-196.850647,-0.003491,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,2.772442,210.920380,72.772018,210.676025,2.283752,70.921227,72.283325,70.676880],
[11,0,2,2,210,176,-8,-125.444443,0.015126,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-113.561172,227.859497,96.414810,231.035873,-110.899063,51.879616,99.076920,55.056000],
[12,0,926,2,74,142,-35.143761,-192.041504,0.052360,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-75.821640,203.928879,-1.923061,207.801743,-68.389938,62.123489,5.508644,65.996346],
[14,0,658,84,138,126,-10.121071,-199.545837,0.015126,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-71.929283,318.624573,66.054939,320.711914,-70.023453,192.638992,67.960762,194.726318],
[19,0,336,202,20,26,48.964527,-260.446503,0.015126,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,38.769035,273.293762,58.766750,273.596283,39.162304,247.296738,59.160019,247.599243],
[23,0,278,202,34,28,-6.923186,-252.600281,0.015126,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-24.132999,266.341553,9.863113,266.855804,-23.709484,238.344742,10.286629,238.859024],
[18,0,414,202,22,6,15.891081,-198.939224,0.015126,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,4.846962,201.772507,26.844446,202.105255,4.937716,195.773193,26.935200,196.105942],
[24,0,1012,84,6,6,-0.923872,-252.691040,0.015126,1,1,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-3.968906,255.645325,2.030408,255.736069,-3.878152,249.646011,2.121162,249.736755],
[25,0,1002,96,10,4,-9.892591,-250.555130,0.015126,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-14.922271,252.479279,-4.923414,252.630524,-14.861769,248.479736,-4.862912,248.630981],
[16,0,798,84,106,150,-62.031662,-258.767426,0.014971,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-120.549133,292.895203,-14.561008,294.482086,-118.303558,142.912018,-12.315434,144.498901],
[17,0,390,100,162,78,-0.483634,-289.701904,0.015126,1,1,81,39,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-82.064270,327.472260,79.917206,329.922607,-80.884476,249.481186,81.097000,251.931534],
[32,0,2,180,236,30,-16.946091,-157.678329,0.017247,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.187225,170.641083,100.777672,174.711121,-134.669861,140.645538,101.295052,144.715576],
[33,0,512,180,40,54,100.863899,-169.711853,0.017092,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.405365,196.366089,120.399529,197.049728,81.328270,142.373978,121.322433,143.057617],
[34,0,1002,84,8,10,106.811752,-172.813965,0.017092,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.726883,177.744873,110.725716,177.881592,102.897789,167.746338,110.896622,167.883057],
[35,0,1014,100,6,2,102.829422,-171.745743,0.017092,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.812767,172.694321,105.811890,172.796875,99.846954,170.694611,105.846077,170.797165],
[27,0,390,2,266,96,-12.573015,-295.519714,0.049878,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-147.800735,336.829041,117.868454,350.091003,-143.014481,240.948441,122.654709,254.210388]
],
[
[6,0,626,170,20,56,38.854675,-51.125820,0.368005,1,1,11,7,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,26.072876,53.699841,44.733810,60.894943,46.219162,1.449223,64.880096,8.644325],
[5,0,984,146,24,62,27,-81,0.471239,1,1,14,8,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,10.893984,81.772186,32.278141,92.667953,39.041393,26.529781,60.425552,37.425552],
[7,0,386,202,26,14,49.658909,-9.206032,0.408757,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,43.083485,11.806762,66.941483,22.140966,48.648056,-1.039854,72.506058,9.294351],
[9,0,1002,2,18,60,-35.828789,-54.880749,-0.498718,1,1,8,9.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-38.071358,67.489113,-22.263823,58.879707,-66.769379,14.797337,-50.961842,6.187927],
[8,0,626,100,22,68,-26,-86,-0.369779,1,1,8,11.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-29.122343,100.080162,-8.609386,92.129150,-53.698189,36.676476,-33.185230,28.725464],
[10,0,358,202,26,14,-52.243874,-14.287708,-0.228192,1,1,5.000000,5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-55.983173,20.289177,-30.657173,14.407536,-59.150211,6.652101,-33.824211,0.770458],
[31,0,240,180,270,20,2.807719,-173.033234,0.017453,1,1,135,10,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-132.346252,180.675629,137.612640,185.387787,-131.997192,160.678680,137.961700,165.390839],
[28,0,658,2,266,80,-12.233901,-280.958405,0.052360,1,1,133,40,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-147.145065,313.942902,118.490372,327.864258,-142.958176,234.052551,122.677261,247.973907],
[15,0,214,2,174,170,-29.859303,-288.643433,0.017453,1,1,62,27.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-92.338531,315.557129,81.634964,318.593842,-89.371620,145.583008,84.601883,148.619720],
[13,0,554,100,70,140,22.756006,-196.547668,-0.017453,1,1,19.999998,13.999999,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,3.003386,210.894577,72.992729,209.672913,0.560049,70.915901,70.549385,69.694237],
[11,0,2,2,210,176,-8,-125,0.017453,1,1,104,104.000008,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-113.799210,227.169128,96.168808,230.834122,-110.727585,51.195923,99.240433,54.860924],
[12,0,926,2,74,142,-35.165352,-191.536041,0.069813,1,1,40,13.999998,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-76.044510,202.711685,-2.224762,207.873657,-66.139084,61.057587,7.680656,66.219559],
[14,0,658,84,138,126,-10.291326,-198.971283,0.017453,1,1,60.000004,120,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4294967295,4294967295,4294967295,4294967295,-72.376480,317.905884,65.602501,320.314301,-70.177475,191.925049,67.801506,194.333481],
[19,0,336,202,20,26,48.652393,-260.009277,0.017453,1,1,10,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,38.427036,272.832764,58.423988,273.181824,38.880798,246.836731,58.877750,247.185776],
[23,0,278,202,34,28,-7.216912,-252.033020,0.017453,1,1,17,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-24.458656,265.734192,9.536166,266.327576,-23.969990,237.738464,10.024833,238.331848],
[18,0,414,202,22,6,15.722167,-198.425201,0.017453,1,1,11,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,4.671485,201.232773,26.668133,201.616714,4.776200,195.233688,26.772850,195.617630],
[24,0,1012,84,6,6,-1.217826,-252.137741,0.017453,1,1,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-4.269726,255.084930,1.729360,255.189636,-4.165012,249.085846,1.834074,249.190552],
[25,0,1002,96,10,4,-10.181551,-249.980972,0.017453,1,1,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-15.215694,251.893402,-5.217217,252.067932,-15.145885,247.894012,-5.147408,248.068542],
[16,0,798,84,106,150,-62.330700,-258.072083,0.017453,1,1,58,34.999996,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-120.932709,292.054504,-14.948841,293.904480,-118.314842,142.077362,-12.330982,143.927307],
[17,0,390,100,162,78,-0.863717,-289.149536,0.017453,1,1,81,39,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4294967295,4294967295,4294967295,4294967295,-82.532021,326.729950,79.443306,329.557251,-81.170738,248.741821,80.804588,251.569122],
[32,0,2,180,236,30,-16.927448,-157.686462,0.017453,1,1,118,15,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,-135.171265,170.624786,100.792801,174.743561,-134.647690,140.629364,101.316376,144.748138],
[33,0,512,180,40,54,100.880058,-169.744324,0.017453,1,1,20,27,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,80.411888,196.391159,120.405800,197.089264,81.354317,142.399384,121.348228,143.097488],
[34,0,1002,84,8,10,106.826790,-172.848587,0.017453,1,1,4,5,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,102.740135,177.778015,110.738922,177.917633,102.914658,167.779541,110.913445,167.919159],
[35,0,1014,100,6,2,102.844849,-171.778931,0.017453,1,1,3,1,0,0,1,0,0,0,0,0,0,0,0,0,5,0,4294967295,4294967295,4294967295,4294967295,99.827850,172.726425,105.826942,172.831131,99.862755,170.726730,105.861847,170.831436],
[27,0,390,2,266,96,-12.966604,-294.939209,0.052360,1,1,133,48,0,0,1,0,0,0,0,0,0,0,0,0,2,0,4294967295,4294967295,4294967295,4294967295,-148.296448,335.912750,117.338982,349.834106,-143.272186,240.044312,122.363243,253.965668]
]
]
}
}
]

},{}],3:[function(require,module,exports){
'use strict';

var AssetsConfig = {};
AssetsConfig.images = {
	bg:  "./image/bg.png",
	fukidashi:  "./image/fukidashi.png",
	title:  "./image/title.png",
	logo_wht:  "./image/logo_wht.png",
};

AssetsConfig.sounds = {
};

AssetsConfig.bgms = {
};


module.exports = AssetsConfig;

},{}],4:[function(require,module,exports){
'use strict';
var DEBUG = require("./debug_constant");

var CONSTANT = {
	DEBUG: {},
};

if (DEBUG.ON) {
	CONSTANT.DEBUG = DEBUG;
}
module.exports = CONSTANT;

},{"./debug_constant":5}],5:[function(require,module,exports){
'use strict';
var DEBUG = {
	ON: false,
	SOUND_OFF: false,
	//START_SCENE: "title",
};

module.exports = DEBUG;

},{}],6:[function(require,module,exports){
var field_list = [
	require("./field/chapter0/myroom"),
	require("./field/chapter0/hospital_corridor1"),
	require("./field/chapter0/hospital_corridor2"),
	require("./field/chapter0/mansion_corridor1"),
	require("./field/chapter0/mansion_corridor2"),
	require("./field/chapter0/mansion_corridor3"),
	require("./field/chapter0/mansion_gallery1"),


];

var field_map = {};

for (var i = 0, len = field_list.length; i < len; i++) {
	var field = field_list[i];

	field_map[field.key] = field;

	// TODO: key 名が被ってたらデバッグではエラー
}
module.exports = field_map;


},{"./field/chapter0/hospital_corridor1":7,"./field/chapter0/hospital_corridor2":8,"./field/chapter0/mansion_corridor1":9,"./field/chapter0/mansion_corridor2":10,"./field/chapter0/mansion_corridor3":11,"./field/chapter0/mansion_gallery1":12,"./field/chapter0/myroom":13}],7:[function(require,module,exports){
// 病院の廊下1(コンクリ、廃れてる感じ) 車椅子とかあったほうがいいかも
module.exports = {
	key: "chapter0_hospital_corridor1",
	name: "病院の廊下1",
	right_start_position: {x: 690, y: 540},
	left_start_position:  {x: 180, y: 540},
	right_field: "chapter0_hospital_corridor2",
	left_field: "chapter0_myroom",
	background: "bg",
	objects: [
	],
};

},{}],8:[function(require,module,exports){
// 病院の廊下2(こころ)
module.exports = {
	key: "chapter0_hospital_corridor2",
	name: "病院の廊下2",
	right_start_position: {x: 690, y: 540},
	left_start_position:  {x: 180, y: 540},
	right_field: "chapter0_mansion_corridor1",
	left_field: "chapter0_hospital_corridor1",
	background: "bg",
	objects: [
	],

};



},{}],9:[function(require,module,exports){
// 屋敷の廊下1
module.exports = {
	key: "chapter0_mansion_corridor1",
	name: "屋敷の廊下1",
	right_start_position: {x: 690, y: 540},
	left_start_position:  {x: 180, y: 540},
	right_field: "chapter0_mansion_corridor2",
	left_field: "chapter0_hospital_corridor2",
	background: "bg",
	objects: [
	],

};

},{}],10:[function(require,module,exports){
// 屋敷の廊下2(ドアがある) 最初のフラッシュバックが入る
module.exports = {
	key: "chapter0_mansion_corridor2",
	name: "屋敷の廊下2",
	right_start_position: {x: 690, y: 540},
	left_start_position:  {x: 180, y: 540},
	right_field: "chapter0_mansion_corridor3",
	left_field: "chapter0_mansion_corridor1",
	background: "bg",
	objects: [
	],

};


},{}],11:[function(require,module,exports){
// 屋敷の廊下3(家具) 行き止まり (サードアイを使用すると、家具が豹変／床に扉が出現)
module.exports = {
	key: "chapter0_mansion_corridor3",
	name: "屋敷の廊下3",
	right_start_position: {x: 690, y: 540},
	left_start_position:  {x: 180, y: 540},
	right_field: null,
	left_field: "chapter0_mansion_corridor2",
	background: "bg",
	objects: [
	],

};


},{}],12:[function(require,module,exports){
// 画廊(屋敷の廊下2から遷移)
module.exports = {
	key: "chapter0_mansion_gallery1",
	name: "屋敷の廊下3",
	right_start_position: {x: 690, y: 540},
	left_start_position:  {x: 180, y: 540},
	right_field: null,
	left_field: "chapter0_mansion_corridor2",
	background: "bg",
	objects: [
	],

};


},{}],13:[function(require,module,exports){
// こいしの自室(ベッド／帽子／ドア) 帽子はベッドのふちにかけてある
module.exports = {
	key: "chapter0_myroom",
	name: "こいしの部屋",
	right_start_position: {x: 690, y: 540},
	left_start_position:  {x: 180, y: 540},
	right_field: "chapter0_hospital_corridor1",
	left_field: null,
	background: "bg",
	objects: [
		{key: "vase", name: "花瓶", x: 540+270, y: 220+110}
	],
};



},{}],14:[function(require,module,exports){
'use strict';
var core = require('./hakurei').core;
var util = require('./hakurei').util;
var CONSTANT = require('./constant');

var SaveManager = require('./save_manager');

var SceneTitle = require('./scene/title');
var SceneStage = require('./scene/stage');
var SceneLoading = require('./scene/loading');

var Game = function(canvas) {
	core.apply(this, arguments);
};
util.inherit(Game, core);

Game.prototype.init = function () {
	core.prototype.init.apply(this, arguments);

	// セーブデータ
	this.save_manager = SaveManager.load();


	this.addScene("loading", new SceneLoading(this));
	this.addScene("title", new SceneTitle(this));
	this.addScene("stage", new SceneStage(this));

	this.changeScene("loading");
};
/*
Game.prototype.playSound = function () {
	if (CONSTANT.DEBUG.SOUND_OFF) return;
	return this.audio_loader.playSound.apply(this.audio_loader, arguments);
};
Game.prototype.playBGM = function () {
	if (CONSTANT.DEBUG.SOUND_OFF) return;
	return this.audio_loader.playBGM.apply(this.audio_loader, arguments);
};
Game.prototype.changeBGM = function () {
	if (CONSTANT.DEBUG.SOUND_OFF) return;
	return this.audio_loader.changeBGM.apply(this.audio_loader, arguments);
};
Game.prototype.stopBGM = function () {
	if (CONSTANT.DEBUG.SOUND_OFF) return;
	return this.audio_loader.stopBGM.apply(this.audio_loader, arguments);
};
*/

module.exports = Game;

},{"./constant":4,"./hakurei":15,"./save_manager":59,"./scene/loading":60,"./scene/stage":61,"./scene/title":67}],15:[function(require,module,exports){
'use strict';

module.exports = require("./hakureijs/index");

},{"./hakureijs/index":23}],16:[function(require,module,exports){
'use strict';

var AudioLoader = function() {
	this.sounds = {};
	this.bgms = {};

	this.loading_audio_num = 0;
	this.loaded_audio_num = 0;

	this.id = 0;

	// flag which determine what sound.
	this.soundflag = 0x00;

	this.audio_context = null;
	if (window && window.AudioContext) {
		this.audio_context = new window.AudioContext();

		// for legacy browser
		this.audio_context.createGain = this.audio_context.createGain || this.audio_context.createGainNode;
	}

	// playing bgm name
	this._playing_bgm_name = null;

	// playing AudioBufferSourceNode instance
	this.audio_source = null;
};
AudioLoader.prototype.init = function() {
	// TODO: cancel already loading bgms and sounds

	this.sounds = {};
	this.bgms = {};

	this.loading_audio_num = 0;
	this.loaded_audio_num = 0;

	this.id = 0;

	this.soundflag = 0x00;

	this._playing_bgm_name = null;

	this.audio_source = null;
};

AudioLoader.prototype.loadSound = function(name, path, volume) {
	var self = this;
	self.loading_audio_num++;

	if(!volume) volume = 1.0;


	// it's done to load sound
	var onload_function = function() {
		self.loaded_audio_num++;
	};

	var audio = new Audio(path);
	audio.volume = volume;
	audio.addEventListener('canplay', onload_function);
	audio.load();
	self.sounds[name] = {
		id: 1 << self.id++,
		audio: audio,
	};
};

AudioLoader.prototype.loadBGM = function(name, path, volume, loopStart, loopEnd) {
	var self = this;
	self.loading_audio_num++;

	// it's done to load audio
	var successCallback = function(audioBuffer) {
		self.loaded_audio_num++;
		self.bgms[name] = {
			audio:     audioBuffer,
			volume:    volume,
			loopStart: loopStart,
			loopEnd:   loopEnd,
		};
	};

	var errorCallback = function(error) {
		if (error instanceof Error) {
			throw new Error(error.message);
		} else {
			throw error;
		}
	};

	var xhr = new XMLHttpRequest();
	xhr.onload = function() {
		if(xhr.status !== 200) {
			return;
		}

		var arrayBuffer = xhr.response;

		// decode
		self.audio_context.decodeAudioData(arrayBuffer, successCallback, errorCallback);
	};

	xhr.open('GET', path, true);
	xhr.responseType = 'arraybuffer';
	xhr.send(null);
};

AudioLoader.prototype.isAllLoaded = function() {
	return this.loaded_audio_num === this.loading_audio_num;
};

AudioLoader.prototype.playSound = function(name) {
	this.soundflag |= this.sounds[name].id;
};

AudioLoader.prototype.executePlaySound = function() {

	for(var name in this.sounds) {
		if(this.soundflag & this.sounds[name].id) {
			// play
			this.sounds[name].audio.pause();
			this.sounds[name].audio.currentTime = 0;
			this.sounds[name].audio.play();

			// delete flag
			this.soundflag &= ~this.sounds[name].id;

		}
	}
};
AudioLoader.prototype.playBGM = function(name) {
	var self = this;

	// stop playing bgm
	self.stopBGM();

	self._playing_bgm_name = name;
	self.audio_source = self._createSourceNode(name);
	self.audio_source.start(0);
};

// play if the bgm is not playing now
AudioLoader.prototype.changeBGM = function(name) {
	if (this._playing_bgm_name !== name) {
		this.playBGM(name);
	}
};
AudioLoader.prototype.stopBGM = function() {
	var self = this;
	if(self.isPlayingBGM()) {
		self.audio_source.stop(0);
		self.audio_source = null;
		self._playing_bgm_name = null;
	}
};
AudioLoader.prototype.isPlayingBGM = function() {
	return this.audio_source ? true : false;
};
AudioLoader.prototype.currentPlayingBGM = function() {
	return this._playing_bgm_name;
};


// create AudioBufferSourceNode instance
AudioLoader.prototype._createSourceNode = function(name) {
	var self = this;
	var data = self.bgms[name];

	var source = self.audio_context.createBufferSource();
	source.buffer = data.audio;

	if(data.loopStart || data.loopEnd) { source.loop = true; }
	if(data.loopStart) { source.loopStart = data.loopStart; }
	if(data.loopEnd)   { source.loopEnd = data.loopEnd; }

	var audio_gain = this.audio_context.createGain();
	audio_gain.gain.value = data.volume || 1.0;

	source.connect(audio_gain);

	audio_gain.connect(self.audio_context.destination);
	source.start = source.start || source.noteOn;
	source.stop  = source.stop  || source.noteOff;

	return source;
};

AudioLoader.prototype.progress = function() {
	return this.loaded_audio_num / this.loading_audio_num;
};


module.exports = AudioLoader;

},{}],17:[function(require,module,exports){
'use strict';

var FontLoader = function() {
	this.is_done = false;
};
FontLoader.prototype.init = function() {
	this.is_done = false;
};
FontLoader.prototype.isAllLoaded = function() {
	return this.is_done;
};

FontLoader.prototype.notifyLoadingDone = function() {
	this.is_done = true;
};

FontLoader.prototype.progress = function() {
	return this.is_done ? 1 : 0;
};




module.exports = FontLoader;

},{}],18:[function(require,module,exports){
'use strict';

var ImageLoader = function() {
	this.images = {};

	this.loading_image_num = 0;
	this.loaded_image_num = 0;
};
ImageLoader.prototype.init = function() {
	// cancel already loading images
	for(var name in this.images){
		this.images[name].src = "";
	}

	this.images = {};

	this.loading_image_num = 0;
	this.loaded_image_num = 0;
};

ImageLoader.prototype.loadImage = function(name, path) {
	var self = this;

	self.loading_image_num++;

	// it's done to load image
	var onload_function = function() {
		self.loaded_image_num++;
	};

	var image = new Image();
	image.src = path;
	image.onload = onload_function;
	this.images[name] = image;
};

ImageLoader.prototype.isAllLoaded = function() {
	return this.loaded_image_num === this.loading_image_num;
};

ImageLoader.prototype.getImage = function(name) {
	return this.images[name];
};

ImageLoader.prototype.progress = function() {
	return this.loaded_image_num / this.loading_image_num;
};




module.exports = ImageLoader;

},{}],19:[function(require,module,exports){
'use strict';

// only keyboard (because core class uses key board map)
var Constant = {
	BUTTON_LEFT:  0x01,
	BUTTON_UP:    0x02,
	BUTTON_RIGHT: 0x04,
	BUTTON_DOWN:  0x08,
	BUTTON_Z:     0x10,
	BUTTON_X:     0x20,
	BUTTON_SHIFT: 0x40,
	BUTTON_SPACE: 0x80,
};

module.exports = Constant;

},{}],20:[function(require,module,exports){
'use strict';

var CONSTANT = {
	SPRITE3D: {},
};

// vertices
CONSTANT.SPRITE3D.V_ITEM_SIZE = 3;
CONSTANT.SPRITE3D.V_ITEM_NUM = 4;
CONSTANT.SPRITE3D.V_SIZE =
	CONSTANT.SPRITE3D.V_ITEM_SIZE * CONSTANT.SPRITE3D.V_ITEM_NUM;
// texture coordinates
CONSTANT.SPRITE3D.C_ITEM_SIZE = 2;
CONSTANT.SPRITE3D.C_ITEM_NUM = 4;
CONSTANT.SPRITE3D.C_SIZE =
	CONSTANT.SPRITE3D.C_ITEM_SIZE * CONSTANT.SPRITE3D.C_ITEM_NUM;

// indices
CONSTANT.SPRITE3D.I_ITEM_SIZE = 1;
CONSTANT.SPRITE3D.I_ITEM_NUM = 6;
CONSTANT.SPRITE3D.I_SIZE =
	CONSTANT.SPRITE3D.I_ITEM_SIZE * CONSTANT.SPRITE3D.I_ITEM_NUM;

// color
CONSTANT.SPRITE3D.A_ITEM_SIZE = 4;
CONSTANT.SPRITE3D.A_ITEM_NUM = 4;
CONSTANT.SPRITE3D.A_SIZE =
	CONSTANT.SPRITE3D.A_ITEM_SIZE * CONSTANT.SPRITE3D.A_ITEM_NUM;

module.exports = CONSTANT;

},{}],21:[function(require,module,exports){
'use strict';

/* TODO: create input_manager class */

var WebGLDebugUtils = require("webgl-debug");
var CONSTANT = require("./constant");
var DebugManager = require("./debug_manager");
var InputManager = require("./input_manager");
var ImageLoader = require("./asset_loader/image");
var AudioLoader = require("./asset_loader/audio");
var FontLoader = require("./asset_loader/font");
var SceneLoading = require('./scene/loading');

var ShaderProgram = require('./shader_program');
var VS = require("./shader/main.vs");
var FS = require("./shader/main.fs");


var Core = function(canvas, options) {
	if(!options) {
		options = {};
	}

	this.canvas_dom = canvas;
	this.ctx = null; // 2D context
	this.gl  = null; // 3D context

	// WebGL 3D mode
	if(options.webgl) {
		this.gl = this.createWebGLContext(this.canvas_dom);

		// shader program
		this.sprite_3d_shader = new ShaderProgram(
			this.gl,
			// verticle shader, fragment shader
			VS, FS,
			// attributes
			[
				"aTextureCoordinates",
				"aVertexPosition",
				"aColor"
			],
			// uniforms
			[
				"uMVMatrix",
				"uPMatrix",
				"uSampler", // texture data
			]
		);
	}
	// Canvas 2D mode
	else {
		this.ctx = this.canvas_dom.getContext('2d');
	}

	this.debug_manager = new DebugManager(this);

	this.input_manager = new InputManager();

	this.width = Number(canvas.getAttribute('width'));
	this.height = Number(canvas.getAttribute('height'));

	this.current_scene = null;
	this._reserved_next_scene = null; // next scene which changes next frame run
	this.scenes = {};

	this.frame_count = 0;

	this.request_id = null;

	this.image_loader = new ImageLoader();
	this.audio_loader = new AudioLoader();
	this.font_loader = new FontLoader();
};
Core.prototype.init = function () {
	this.current_scene = null;
	this._reserved_next_scene = null; // next scene which changes next frame run

	this.frame_count = 0;

	this.request_id = null;

	// TODO:
	//this.debug_manager.init();
	this.input_manager.init();

	this.image_loader.init();
	this.audio_loader.init();
	this.font_loader.init();

	this.addScene("loading", new SceneLoading(this));
};
Core.prototype.isRunning = function () {
	return this.request_id ? true : false;
};
Core.prototype.startRun = function () {
	if(this.isRunning()) return;

	this.run();
};
Core.prototype.stopRun = function () {
	if(!this.isRunning()) return;

	cancelAnimationFrame(this.request_id);

	this.request_id = null;
};
Core.prototype.run = function(){
	// get gamepad input
	// get pressed key time
	this.input_manager.beforeRun();

	// go to next scene if next scene is set
	this.changeNextSceneIfReserved();

	// play sound which already set to play
	this.audio_loader.executePlaySound();

	var current_scene = this.currentScene();
	if(current_scene) {
		current_scene.beforeDraw();

		// clear already rendered canvas
		this.clearCanvas();

		current_scene.draw();
		current_scene.afterDraw();
	}

	/*

	if(Config.DEBUG) {
		this._renderFPS();
	}

	// play sound effects
	this.runPlaySound();
	*/

	this.frame_count++;

	this.input_manager.afterRun();

	// tick
	this.request_id = requestAnimationFrame(this.run.bind(this));
};
Core.prototype.currentScene = function() {
	if(this.current_scene === null) {
		return;
	}

	return this.scenes[this.current_scene];
};

Core.prototype.addScene = function(name, scene) {
	this.scenes[name] = scene;
};
Core.prototype.changeScene = function() {
	var args = Array.prototype.slice.call(arguments); // to convert array object
	this._reserved_next_scene = args;
};
Core.prototype.changeNextSceneIfReserved = function() {
	if(this._reserved_next_scene) {
		if (this.currentScene() && this.currentScene().isSetFadeOut() && !this.currentScene().isInFadeOut()) {
			this.currentScene().startFadeOut();
		}
		else if (this.currentScene() && this.currentScene().isSetFadeOut() && this.currentScene().isInFadeOut()) {
			// waiting for quiting fade out
		}
		else {
			// change next scene
			this.current_scene = this._reserved_next_scene.shift();
			var current_scene = this.currentScene();
			current_scene.init.apply(current_scene, this._reserved_next_scene);

			this._reserved_next_scene = null;
		}
	}
};
Core.prototype.changeSceneWithLoading = function(scene, assets) {
	if(!assets) assets = {};
	this.changeScene("loading", assets, scene);
};

Core.prototype.clearCanvas = function() {
	if (this.is2D()) {
		// 2D
		this.ctx.clearRect(0, 0, this.width, this.height);
	}
	else if (this.is3D()) {
		// 3D
		this.gl.clearColor(0.0, 0.0, 0.0, 0.0);
		this.gl.clearDepth(1.0);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);
	}
};
Core.prototype.is2D = function() {
	return this.ctx ? true : false;
};
Core.prototype.is3D = function() {
	return this.gl ? true : false;
};
// this method is deprecated.
Core.prototype.isKeyDown = function(flag) {
	return this.input_manager.isKeyDown(flag);
};
// this method is deprecated.
Core.prototype.isKeyPush = function(flag) {
	return this.input_manager.isKeyPush(flag);
};
// this method is deprecated.
Core.prototype.getKeyDownTime = function(bit_code) {
	return this.input_manager.getKeyDownTime(bit_code);
};
// this method is deprecated.
Core.prototype.isLeftClickDown = function() {
	return this.input_manager.isLeftClickDown();
};
// this method is deprecated.
Core.prototype.isLeftClickPush = function() {
	return this.input_manager.isLeftClickPush();
};
// this method is deprecated.
Core.prototype.isRightClickDown = function() {
	return this.input_manager.isRightClickDown();
};
// this method is deprecated.
Core.prototype.isRightClickPush = function() {
	return this.input_manager.isRightClickPush();
};

// this method is deprecated.
Core.prototype.mousePositionX = function () {
	return this.input_manager.mousePositionX();
};
// this method is deprecated.
Core.prototype.mousePositionY = function () {
	return this.input_manager.mousePositionX();
};
// this method is deprecated.
Core.prototype.mouseMoveX = function () {
	return this.input_manager.mouseMoveX();
};
// this method is deprecated.
Core.prototype.mouseMoveY = function () {
	return this.input_manager.mouseMoveY();
};
// this method is deprecated.
Core.prototype.mouseScroll = function () {
	return this.input_manager.mouseScroll();
};

Core.prototype.fullscreen = function() {
	var mainCanvas = this.canvas_dom;
	if (mainCanvas.requestFullscreen) {
		mainCanvas.requestFullscreen();
	}
	else if (mainCanvas.msRequestuestFullscreen) {
		mainCanvas.msRequestuestFullscreen();
	}
	else if (mainCanvas.mozRequestFullScreen) {
		mainCanvas.mozRequestFullScreen();
	}
	else if (mainCanvas.webkitRequestFullscreen) {
		mainCanvas.webkitRequestFullscreen();
	}
};

// it is done to load fonts
Core.prototype.fontLoadingDone = function() {
	this.font_loader.notifyLoadingDone();
};

Core.prototype.setupEvents = function() {
	if(!window) return;

	var self = this;

	// setup WebAudio
	window.AudioContext = (function(){
		return window.AudioContext || window.webkitAudioContext;
	})();

	// setup requestAnimationFrame
	window.requestAnimationFrame = (function(){
		return window.requestAnimationFrame	||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame	||
			function(callback) { window.setTimeout(callback, 1000 / 60); };
	})();


	// If the browser has `document.fonts`, wait font loading.
	// Note: safari 10.0 has document.fonts but not occur loadingdone event
	if(window.document && window.document.fonts && !navigator.userAgent.toLowerCase().indexOf("safari")) {
		window.document.fonts.addEventListener('loadingdone', function() { self.fontLoadingDone(); });
	}
	else {
		self.fontLoadingDone();
	}

	this.input_manager.setupEvents(this.canvas_dom);
};

Core.prototype.createWebGLContext = function(canvas) {
	var gl;
	try {
		gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
		gl = WebGLDebugUtils.makeDebugContext(gl);
	} catch (e) {
		throw e;
	}
	if (!gl) {
		throw new Error ("Could not initialize WebGL");
	}

	return gl;
};




module.exports = Core;

},{"./asset_loader/audio":16,"./asset_loader/font":17,"./asset_loader/image":18,"./constant":19,"./debug_manager":22,"./input_manager":24,"./scene/loading":43,"./shader/main.fs":45,"./shader/main.vs":46,"./shader_program":47,"webgl-debug":35}],22:[function(require,module,exports){
'use strict';

var DebugManager = function (core) {
	this.core = core;
	this.dom = null; // debug menu area

	this.is_debug_mode = false; // default: false


	this._is_showing_collision_area = false; // default: false
};

DebugManager.prototype.setOn = function (dom) {
	this.is_debug_mode = true;
	this.dom = dom;
};
DebugManager.prototype.setOff = function () {
	this.is_debug_mode = false;
	this.dom = null;
};

// add text menu
DebugManager.prototype.addMenuText = function (text) {
	if(!this.is_debug_mode) return;

	// create element
	var dom = window.document.createElement('pre');
	dom.textContent = text;

	// add element
	this.dom.appendChild(dom);
};

// add button menu
DebugManager.prototype.addMenuButton = function (button_value, func) {
	if(!this.is_debug_mode) return;

	var core = this.core;

	// create element
	var input = window.document.createElement('input');

	// set attributes
	input.setAttribute('type', 'button');
	input.setAttribute('value', button_value);
	input.onclick = function () {
		func(core);
	};

	// add element
	this.dom.appendChild(input);
};

// show collision area of object instance
DebugManager.prototype.setShowingCollisionAreaOn = function () {
	this._is_showing_collision_area = true;
};
DebugManager.prototype.setShowingCollisionAreaOff = function () {
	this._is_showing_collision_area = false;
};
DebugManager.prototype.isShowingCollisionArea = function () {
	return this._is_showing_collision_area;
};

module.exports = DebugManager;

},{}],23:[function(require,module,exports){
'use strict';
module.exports = {
	util: require("./util"),
	core: require("./core"),
	constant: require("./constant"),
	serif_manager: require("./serif_manager"),
	shader_program: require("./shader_program"),
	scene: {
		base: require("./scene/base"),
		loading: require("./scene/loading"),
	},
	object: {
		base: require("./object/base"),
		sprite: require("./object/sprite"),
		sprite3d: require("./object/sprite3d"),
		pool_manager: require("./object/pool_manager"),
		pool_manager3d: require("./object/pool_manager3d"),
		ui_parts: require("./object/ui_parts"),
	},
	asset_loader: {
		image: require("./asset_loader/image"),
		audio: require("./asset_loader/audio"),
		font:  require("./asset_loader/font"),
	},
	storage: {
		base: require("./storage/base"),
		save: require("./storage/save"),
	},

};

},{"./asset_loader/audio":16,"./asset_loader/font":17,"./asset_loader/image":18,"./constant":19,"./core":21,"./object/base":36,"./object/pool_manager":37,"./object/pool_manager3d":38,"./object/sprite":39,"./object/sprite3d":40,"./object/ui_parts":41,"./scene/base":42,"./scene/loading":43,"./serif_manager":44,"./shader_program":47,"./storage/base":48,"./storage/save":49,"./util":50}],24:[function(require,module,exports){
'use strict';

var CONSTANT = require("./constant");
var Util = require("./util");

// const
var DEFAULT_BUTTON_ID_TO_BIT_CODE = {
	0: CONSTANT.BUTTON_Z,
	1: CONSTANT.BUTTON_X,
	2: CONSTANT.BUTTON_SPACE,
	3: CONSTANT.BUTTON_SHIFT,
};

var InputManager = function () {
	this.current_keyflag = 0x0;
	this.before_keyflag = 0x0;
	this._key_bit_code_to_down_time = {};

	// gamepad button_id to bit code of key input
	this._button_id_to_key_bit_code = Util.shallowCopyHash(DEFAULT_BUTTON_ID_TO_BIT_CODE);

	this.is_left_clicked  = false;
	this.is_right_clicked = false;
	this.before_is_left_clicked  = false;
	this.before_is_right_clicked = false;
	this.mouse_change_x = 0;
	this.mouse_change_y = 0;
	this.mouse_x = 0;
	this.mouse_y = 0;
	this.mouse_scroll = 0;

	this.is_connect_gamepad = false;
};

InputManager.prototype.init = function () {
	this.current_keyflag = 0x0;
	this.before_keyflag = 0x0;
	this.initPressedKeyTime();

	// gamepad button_id to bit code of key input
	this._button_id_to_key_bit_code = Util.shallowCopyHash(DEFAULT_BUTTON_ID_TO_BIT_CODE);

	this.is_left_clicked  = false;
	this.is_right_clicked = false;
	this.before_is_left_clicked  = false;
	this.before_is_right_clicked = false;
	this.mouse_change_x = 0;
	this.mouse_change_y = 0;
	this.mouse_x = 0;
	this.mouse_y = 0;
	this.mouse_scroll = 0;

	this.is_connect_gamepad = false;
};
InputManager.prototype.enableGamePad = function () {
	this.is_connect_gamepad = true;
};
InputManager.prototype.beforeRun = function(){
	// get gamepad input
	this.handleGamePad();

	// get pressed key time
	this.handlePressedKeyTime();
};

InputManager.prototype.afterRun = function(){
	// save key current pressed keys
	this.before_keyflag = this.current_keyflag;
	this.before_is_left_clicked = this.is_left_clicked;
	this.before_is_right_clicked = this.is_right_clicked;

	// reset mouse wheel and mouse move
	this.mouse_scroll = 0;
	this.mouse_change_x = 0;
	this.mouse_change_y = 0;
};


InputManager.prototype.handleKeyDown = function(e) {
	this.current_keyflag |= this._keyCodeToBitCode(e.keyCode);
	e.preventDefault();
};
InputManager.prototype.handleKeyUp = function(e) {
	this.current_keyflag &= ~this._keyCodeToBitCode(e.keyCode);
	e.preventDefault();
};
InputManager.prototype.isKeyDown = function(flag) {
	return((this.current_keyflag & flag) ? true : false);
};
InputManager.prototype.isKeyPush = function(flag) {
	return !(this.before_keyflag & flag) && this.current_keyflag & flag;
};


InputManager.prototype.getKeyDownTime = function(bit_code) {
	return this._key_bit_code_to_down_time[bit_code];
};

InputManager.prototype.handleMouseDown = function(event) {
	if ("which" in event) { // Gecko (Firefox), WebKit (Safari/Chrome) & Opera
		this.is_left_clicked  = event.which === 1;
		this.is_right_clicked = event.which === 3;
	}
	else if ("button" in event) {  // IE, Opera
		this.is_left_clicked  = event.button === 1;
		this.is_right_clicked = event.button === 2;
	}
	event.preventDefault();
};
InputManager.prototype.handleMouseUp = function(event) {
	if ("which" in event) { // Gecko (Firefox), WebKit (Safari/Chrome) & Opera
		this.is_left_clicked  = event.which === 1 ? false : this.is_left_clicked;
		this.is_right_clicked = event.which === 3 ? false : this.is_right_clicked;
	}
	else if ("button" in event) {  // IE, Opera
		this.is_left_clicked  = event.button === 1 ? false : this.is_left_clicked;
		this.is_right_clicked = event.button === 2 ? false : this.is_right_clicked;
	}
	event.preventDefault();
};
InputManager.prototype.isLeftClickDown = function() {
	return this.is_left_clicked;
};
InputManager.prototype.isLeftClickPush = function() {
	// not true if is pressed in previous frame
	return this.is_left_clicked && !this.before_is_left_clicked;
};
InputManager.prototype.isRightClickDown = function() {
	return this.is_right_clicked;
};
InputManager.prototype.isRightClickPush = function() {
	// not true if is pressed in previous frame
	return this.is_right_clicked && !this.before_is_right_clicked;
};
InputManager.prototype.handleMouseMove = function (d) {
	d = d ? d : window.event;
	d.preventDefault();
	this.mouse_change_x = this.mouse_x - d.clientX;
	this.mouse_change_y = this.mouse_y - d.clientY;
	this.mouse_x = d.clientX;
	this.mouse_y = d.clientY;
};
InputManager.prototype.mousePositionX = function () {
	return this.mouse_x;
};
InputManager.prototype.mousePositionY = function () {
	return this.mouse_y;
};
InputManager.prototype.mouseMoveX = function () {
	return this.mouse_change_x;
};
InputManager.prototype.mouseMoveY = function () {
	return this.mouse_change_y;
};
InputManager.prototype.handleMouseWheel = function (event) {
	this.mouse_scroll = event.detail ? event.detail : -event.wheelDelta/120;
};
InputManager.prototype.mouseScroll = function () {
	return this.mouse_scroll;
};
InputManager.prototype._keyCodeToBitCode = function(keyCode) {
	var flag;
	switch(keyCode) {
		case 16: // shift
			flag = CONSTANT.BUTTON_SHIFT;
			break;
		case 32: // space
			flag = CONSTANT.BUTTON_SPACE;
			break;
		case 37: // left
			flag = CONSTANT.BUTTON_LEFT;
			break;
		case 38: // up
			flag = CONSTANT.BUTTON_UP;
			break;
		case 39: // right
			flag = CONSTANT.BUTTON_RIGHT;
			break;
		case 40: // down
			flag = CONSTANT.BUTTON_DOWN;
			break;
		case 88: // x
			flag = CONSTANT.BUTTON_X;
			break;
		case 90: // z
			flag = CONSTANT.BUTTON_Z;
			break;
	}
	return flag;
};
InputManager.prototype.handleGamePad = function() {
	if(!this.is_connect_gamepad) return;
	var pads = window.navigator.getGamepads();
	var pad = pads[0]; // 1Pコン

	if(!pad) return;

	// button
	for (var i = 0, len = pad.buttons.length; i < len; i++) {
		if(!(i in this._button_id_to_key_bit_code)) continue; // ignore if I don't know its button
		if(pad.buttons[i].pressed) { // pressed
			this.current_keyflag |= this.getKeyByButtonId(i);
		}
		else { // not pressed
			this.current_keyflag &= ~this.getKeyByButtonId(i);
		}
	}

	// arrow keys
	if (pad.axes[1] < -0.5) {
			this.current_keyflag |= CONSTANT.BUTTON_UP;
	}
	else {
			this.current_keyflag &= ~CONSTANT.BUTTON_UP;
	}
	if (pad.axes[1] > 0.5) {
			this.current_keyflag |= CONSTANT.BUTTON_DOWN;
	}
	else {
			this.current_keyflag &= ~CONSTANT.BUTTON_DOWN;
	}
	if (pad.axes[0] < -0.5) {
			this.current_keyflag |= CONSTANT.BUTTON_LEFT;
	}
	else {
			this.current_keyflag &= ~CONSTANT.BUTTON_LEFT;
	}
	if (pad.axes[0] > 0.5) {
			this.current_keyflag |= CONSTANT.BUTTON_RIGHT;
	}
	else {
			this.current_keyflag &= ~CONSTANT.BUTTON_RIGHT;
	}
};
InputManager.prototype.initPressedKeyTime = function() {
	this._key_bit_code_to_down_time = {};

	for (var button_id in CONSTANT) {
		var bit_code = CONSTANT[button_id];
		this._key_bit_code_to_down_time[bit_code] = 0;
	}
};

InputManager.prototype.handlePressedKeyTime = function() {
	for (var button_id in CONSTANT) {
		var bit_code = CONSTANT[button_id];
		if (this.isKeyDown(bit_code)) {
			this._key_bit_code_to_down_time[bit_code]++;
		}
		else {
			this._key_bit_code_to_down_time[bit_code] = 0;
		}
	}
};
InputManager.prototype.setupEvents = function(canvas_dom) {
	var self = this;

	// bind keyboard
	window.onkeydown = function(e) { self.handleKeyDown(e); };
	window.onkeyup   = function(e) { self.handleKeyUp(e); };

	// bind mouse click
	canvas_dom.onmousedown = function(e) { self.handleMouseDown(e); };
	canvas_dom.onmouseup   = function(e) { self.handleMouseUp(e); };

	// bind mouse move
	canvas_dom.onmousemove = function(d) { self.handleMouseMove(d); };

	// bind mouse wheel
	var mousewheelevent = (window.navi && /Firefox/i.test(window.navigator.userAgent)) ? "DOMMouseScroll" : "mousewheel";
	if (canvas_dom.addEventListener) { //WC3 browsers
		canvas_dom.addEventListener(mousewheelevent, function(e) {
			var event = window.event || e;
			self.handleMouseWheel(event);
		}, false);
	}

	// unable to use right click menu.
	// NOTE: not used
	// this.canvas_dom.oncontextmenu = function() { return false; };

	// bind gamepad
	if(window.Gamepad && window.navigator && window.navigator.getGamepads) {
		self.enableGamePad();
	}
};

InputManager.prototype.getKeyByButtonId = function(button_id) {
	var keys = this._button_id_to_key_bit_code[button_id];
	if(!keys) keys = 0x00;

	return keys;
};

// get one of the pressed button id
InputManager.prototype.getAnyButtonId = function(){
	if(!this.is_connect_gamepad) return;

	var pads = window.navigator.getGamepads();
	var pad = pads[0]; // 1Pコン

	if(!pad) return;

	for (var i = 0; i < pad.buttons.length; i++) {
		if(pad.buttons[i].pressed) {
			return i;
		}
	}
};
/*
InputManager.prototype.setButtonIdMapping = function(button_id, key) {
	var defined_key = this._button_id_to_key_bit_code[button_id];

	for (var target_button_id in this._button_id_to_key_bit_code) {
		var target_key = this._button_id_to_key_bit_code[target_button_id];
		// If there are already set keys in other keys, replace it.
		if (target_key === key) {
			if (defined_key) {
				// replace other key's button_id mapping to current button_id's key.
				this._button_id_to_key_bit_code[target_button_id] = defined_key;
			}
			else {
				// the player presses target_button_id, no event has occured.
				delete this._button_id_to_key_bit_code[target_button_id];
			}
		}
	}

	// set
	this._button_id_to_key_bit_code[button_id] = key;
};

InputManager.prototype.setAllButtonIdMapping = function(map) {
	this._button_id_to_key_bit_code = Util.shallowCopyHash(map);
};

InputManager.prototype.getButtonIdToKeyMap = function() {
	return Util.shallowCopyHash(this._button_id_to_key_bit_code);
};
// convert { value => key } hash
InputManager.prototype.getKeyToButtonIdMap = function() {
	var map = {};
	for (var button_id in this._button_id_to_key_bit_code) {
		var key = this._button_id_to_key_bit_code[button_id];
		map[key] = button_id; // NOTE: cannot duplicate, if it, overwrite it
	}

	return map;
};


InputManager.prototype.dumpGamePadKey = function() {
	var dump = {};

	for (var button_id in this._button_id_to_key_bit_code) {
		var key = this._button_id_to_key_bit_code[ button_id ];
		switch(key) {
			case CONSTANT.BUTTON_LEFT:
				dump[button_id] = "LEFT";
				break;
			case CONSTANT.BUTTON_UP:
				dump[button_id] = "UP";
				break;
			case CONSTANT.BUTTON_RIGHT:
				dump[button_id] = "RIGHT";
				break;
			case CONSTANT.BUTTON_DOWN:
				dump[button_id] = "DOWN";
				break;
			case CONSTANT.BUTTON_Z:
				dump[button_id] = "Z";
				break;
			case CONSTANT.BUTTON_X:
				dump[button_id] = "X";
				break;
			case CONSTANT.BUTTON_SHIFT:
				dump[button_id] = "SHIFT";
				break;
			case CONSTANT.BUTTON_SPACE:
				dump[button_id] = "SPACE";
				break;
			default:
				dump[button_id] = "UNKNOWN";
		}
	}

	console.log(dump);
};
*/





module.exports = InputManager;

},{"./constant":19,"./util":50}],25:[function(require,module,exports){
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.3.2
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER

exports.glMatrix = require("./gl-matrix/common.js");
exports.mat2 = require("./gl-matrix/mat2.js");
exports.mat2d = require("./gl-matrix/mat2d.js");
exports.mat3 = require("./gl-matrix/mat3.js");
exports.mat4 = require("./gl-matrix/mat4.js");
exports.quat = require("./gl-matrix/quat.js");
exports.vec2 = require("./gl-matrix/vec2.js");
exports.vec3 = require("./gl-matrix/vec3.js");
exports.vec4 = require("./gl-matrix/vec4.js");
},{"./gl-matrix/common.js":26,"./gl-matrix/mat2.js":27,"./gl-matrix/mat2d.js":28,"./gl-matrix/mat3.js":29,"./gl-matrix/mat4.js":30,"./gl-matrix/quat.js":31,"./gl-matrix/vec2.js":32,"./gl-matrix/vec3.js":33,"./gl-matrix/vec4.js":34}],26:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * @class Common utilities
 * @name glMatrix
 */
var glMatrix = {};

// Configuration Constants
glMatrix.EPSILON = 0.000001;
glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
glMatrix.RANDOM = Math.random;
glMatrix.ENABLE_SIMD = false;

// Capability detection
glMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);
glMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;

/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
glMatrix.setMatrixArrayType = function(type) {
    glMatrix.ARRAY_TYPE = type;
}

var degree = Math.PI / 180;

/**
* Convert Degree To Radian
*
* @param {Number} Angle in Degrees
*/
glMatrix.toRadian = function(a){
     return a * degree;
}

/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less 
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 * 
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */
glMatrix.equals = function(a, b) {
	return Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));
}

module.exports = glMatrix;

},{}],27:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 2x2 Matrix
 * @name mat2
 */
var mat2 = {};

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
mat2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
mat2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */
mat2.fromValues = function(m00, m01, m10, m11) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
};

/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */
mat2.set = function(out, m00, m01, m10, m11) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
};


/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    
    return out;
};

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

        // Calculate the determinant
        det = a0 * a3 - a2 * a1;

    if (!det) {
        return null;
    }
    det = 1.0 / det;
    
    out[0] =  a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] =  a0 * det;

    return out;
};

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] =  a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] =  a0;

    return out;
};

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
mat2.determinant = function (a) {
    return a[0] * a[3] - a[2] * a[1];
};

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
};

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
mat2.mul = mat2.multiply;

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
};

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */
mat2.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2.str = function (a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
};

/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix 
 * @param {mat2} D the diagonal matrix 
 * @param {mat2} U the upper triangular matrix 
 * @param {mat2} a the input matrix to factorize
 */

mat2.LDU = function (L, D, U, a) { 
    L[2] = a[2]/a[0]; 
    U[0] = a[0]; 
    U[1] = a[1]; 
    U[3] = a[3] - L[2] * U[1]; 
    return [L, D, U];       
}; 

/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link mat2.subtract}
 * @function
 */
mat2.sub = mat2.subtract;

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
};

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */
mat2.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */
mat2.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
};

module.exports = mat2;

},{"./common.js":26}],28:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 2x3 Matrix
 * @name mat2d
 * 
 * @description 
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */
var mat2d = {};

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.create = function() {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */
mat2d.fromValues = function(a, b, c, d, tx, ty) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
};

/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */
mat2d.set = function(out, a, b, c, d, tx, ty) {
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
};

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.invert = function(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5];

    var det = aa * ad - ab * ac;
    if(!det){
        return null;
    }
    det = 1.0 / det;

    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
};

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
mat2d.determinant = function (a) {
    return a[0] * a[3] - a[1] * a[2];
};

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
};

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
mat2d.mul = mat2d.multiply;

/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
mat2d.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
mat2d.translate = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */
mat2d.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */
mat2d.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v[0];
    out[5] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2d.str = function (a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
};

/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2d.frob = function (a) { 
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
}; 

/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    return out;
};

/**
 * Alias for {@link mat2d.subtract}
 * @function
 */
mat2d.sub = mat2d.subtract;

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */
mat2d.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    return out;
};

/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */
mat2d.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    out[4] = a[4] + (b[4] * scale);
    out[5] = a[5] + (b[5] * scale);
    return out;
};

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2d.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2d.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));
};

module.exports = mat2d;

},{"./common.js":26}],29:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 3x3 Matrix
 * @name mat3
 */
var mat3 = {};

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
mat3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
mat3.fromMat4 = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
};

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
mat3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */
mat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
};

/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */
mat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
};

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    
    return out;
};

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,

        // Calculate the determinant
        det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
};

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
mat3.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b00 = b[0], b01 = b[1], b02 = b[2],
        b10 = b[3], b11 = b[4], b12 = b[5],
        b20 = b[6], b21 = b[7], b22 = b[8];

    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
mat3.mul = mat3.multiply;

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
mat3.translate = function(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],
        x = v[0], y = v[1];

    out[0] = a00;
    out[1] = a01;
    out[2] = a02;

    out[3] = a10;
    out[4] = a11;
    out[5] = a12;

    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
};

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.rotate = function (out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        s = Math.sin(rad),
        c = Math.cos(rad);

    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;

    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;

    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.scale = function(out, a, v) {
    var x = v[0], y = v[1];

    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];

    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];

    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */
mat3.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);

    out[0] = c;
    out[1] = s;
    out[2] = 0;

    out[3] = -s;
    out[4] = c;
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */
mat3.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;

    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;

    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;

    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
};

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
mat3.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;

    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;

    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;

    return out;
};

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
mat3.normalFromMat4 = function (out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

    return out;
};

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat3.str = function (a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
};

/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat3.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
};

/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    return out;
};

/**
 * Alias for {@link mat3.subtract}
 * @function
 */
mat3.sub = mat3.subtract;

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */
mat3.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    return out;
};

/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */
mat3.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    out[4] = a[4] + (b[4] * scale);
    out[5] = a[5] + (b[5] * scale);
    out[6] = a[6] + (b[6] * scale);
    out[7] = a[7] + (b[7] * scale);
    out[8] = a[8] + (b[8] * scale);
    return out;
};

/*
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat3.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && 
           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&
           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat3.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));
};


module.exports = mat3;

},{"./common.js":26}],30:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 4x4 Matrix
 * @name mat4
 */
var mat4 = {
  scalar: {},
  SIMD: {},
};

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
mat4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
mat4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */
mat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
};

/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */
mat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
};


/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Transpose the values of a mat4 not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.scalar.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }

    return out;
};

/**
 * Transpose the values of a mat4 using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.SIMD.transpose = function(out, a) {
    var a0, a1, a2, a3,
        tmp01, tmp23,
        out0, out1, out2, out3;

    a0 = SIMD.Float32x4.load(a, 0);
    a1 = SIMD.Float32x4.load(a, 4);
    a2 = SIMD.Float32x4.load(a, 8);
    a3 = SIMD.Float32x4.load(a, 12);

    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
    SIMD.Float32x4.store(out, 0,  out0);
    SIMD.Float32x4.store(out, 4,  out1);

    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
    SIMD.Float32x4.store(out, 8,  out2);
    SIMD.Float32x4.store(out, 12, out3);

    return out;
};

/**
 * Transpse a mat4 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;

/**
 * Inverts a mat4 not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.scalar.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
        return null;
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/**
 * Inverts a mat4 using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.SIMD.invert = function(out, a) {
  var row0, row1, row2, row3,
      tmp1,
      minor0, minor1, minor2, minor3,
      det,
      a0 = SIMD.Float32x4.load(a, 0),
      a1 = SIMD.Float32x4.load(a, 4),
      a2 = SIMD.Float32x4.load(a, 8),
      a3 = SIMD.Float32x4.load(a, 12);

  // Compute matrix adjugate
  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);
  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);

  tmp1   = SIMD.Float32x4.mul(row2, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.mul(row1, tmp1);
  minor1 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row1, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
  minor3 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
  minor2 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row0, row1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);

  // Compute matrix determinant
  det   = SIMD.Float32x4.mul(row0, minor0);
  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);
  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);
  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);
  det   = SIMD.Float32x4.sub(
               SIMD.Float32x4.add(tmp1, tmp1),
               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));
  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);
  if (!det) {
      return null;
  }

  // Compute matrix inverse
  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));
  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));
  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));
  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));
  return out;
}

/**
 * Inverts a mat4 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;

/**
 * Calculates the adjugate of a mat4 not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.scalar.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/**
 * Calculates the adjugate of a mat4 using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.SIMD.adjoint = function(out, a) {
  var a0, a1, a2, a3;
  var row0, row1, row2, row3;
  var tmp1;
  var minor0, minor1, minor2, minor3;

  var a0 = SIMD.Float32x4.load(a, 0);
  var a1 = SIMD.Float32x4.load(a, 4);
  var a2 = SIMD.Float32x4.load(a, 8);
  var a3 = SIMD.Float32x4.load(a, 12);

  // Transpose the source matrix.  Sort of.  Not a true transpose operation
  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);

  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);

  tmp1   = SIMD.Float32x4.mul(row2, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.mul(row1, tmp1);
  minor1 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row1, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
  minor3 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
  minor2 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row0, row1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);

  SIMD.Float32x4.store(out, 0,  minor0);
  SIMD.Float32x4.store(out, 4,  minor1);
  SIMD.Float32x4.store(out, 8,  minor2);
  SIMD.Float32x4.store(out, 12, minor3);
  return out;
};

/**
 * Calculates the adjugate of a mat4 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
 mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
mat4.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/**
 * Multiplies two mat4's explicitly using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand, must be a Float32Array
 * @param {mat4} b the second operand, must be a Float32Array
 * @returns {mat4} out
 */
mat4.SIMD.multiply = function (out, a, b) {
    var a0 = SIMD.Float32x4.load(a, 0);
    var a1 = SIMD.Float32x4.load(a, 4);
    var a2 = SIMD.Float32x4.load(a, 8);
    var a3 = SIMD.Float32x4.load(a, 12);

    var b0 = SIMD.Float32x4.load(b, 0);
    var out0 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),
                       SIMD.Float32x4.add(
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 0, out0);

    var b1 = SIMD.Float32x4.load(b, 4);
    var out1 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),
                       SIMD.Float32x4.add(
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 4, out1);

    var b2 = SIMD.Float32x4.load(b, 8);
    var out2 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),
                       SIMD.Float32x4.add(
                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),
                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 8, out2);

    var b3 = SIMD.Float32x4.load(b, 12);
    var out3 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),
                        SIMD.Float32x4.add(
                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),
                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 12, out3);

    return out;
};

/**
 * Multiplies two mat4's explicitly not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.scalar.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/**
 * Multiplies two mat4's using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
mat4.mul = mat4.multiply;

/**
 * Translate a mat4 by the given vector not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.scalar.translate = function (out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/**
 * Translates a mat4 by the given vector using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.SIMD.translate = function (out, a, v) {
    var a0 = SIMD.Float32x4.load(a, 0),
        a1 = SIMD.Float32x4.load(a, 4),
        a2 = SIMD.Float32x4.load(a, 8),
        a3 = SIMD.Float32x4.load(a, 12),
        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);

    if (a !== out) {
        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];
        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];
        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];
    }

    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));
    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));
    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));

    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));
    SIMD.Float32x4.store(out, 12, t0);

    return out;
};

/**
 * Translates a mat4 by the given vector using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;

/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.scalar.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3 using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.SIMD.scale = function(out, a, v) {
    var a0, a1, a2;
    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);

    a0 = SIMD.Float32x4.load(a, 0);
    SIMD.Float32x4.store(
        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));

    a1 = SIMD.Float32x4.load(a, 4);
    SIMD.Float32x4.store(
        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));

    a2 = SIMD.Float32x4.load(a, 8);
    SIMD.Float32x4.store(
        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));

    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 */
mat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;

/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.rotate = function (out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < glMatrix.EPSILON) { return null; }

    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.scalar.rotateX = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.SIMD.rotateX = function (out, a, rad) {
    var s = SIMD.Float32x4.splat(Math.sin(rad)),
        c = SIMD.Float32x4.splat(Math.cos(rad));

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
      out[0]  = a[0];
      out[1]  = a[1];
      out[2]  = a[2];
      out[3]  = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    var a_1 = SIMD.Float32x4.load(a, 4);
    var a_2 = SIMD.Float32x4.load(a, 8);
    SIMD.Float32x4.store(out, 4,
                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));
    SIMD.Float32x4.store(out, 8,
                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;

/**
 * Rotates a matrix by the given angle around the Y axis not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.scalar.rotateY = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.SIMD.rotateY = function (out, a, rad) {
    var s = SIMD.Float32x4.splat(Math.sin(rad)),
        c = SIMD.Float32x4.splat(Math.cos(rad));

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    var a_0 = SIMD.Float32x4.load(a, 0);
    var a_2 = SIMD.Float32x4.load(a, 8);
    SIMD.Float32x4.store(out, 0,
                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));
    SIMD.Float32x4.store(out, 8,
                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
 mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;

/**
 * Rotates a matrix by the given angle around the Z axis not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.scalar.rotateZ = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.SIMD.rotateZ = function (out, a, rad) {
    var s = SIMD.Float32x4.splat(Math.sin(rad)),
        c = SIMD.Float32x4.splat(Math.cos(rad));

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    var a_0 = SIMD.Float32x4.load(a, 0);
    var a_1 = SIMD.Float32x4.load(a, 4);
    SIMD.Float32x4.store(out, 0,
                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));
    SIMD.Float32x4.store(out, 4,
                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
 mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
mat4.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.fromRotation = function(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t;

    if (Math.abs(len) < glMatrix.EPSILON) { return null; }

    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    // Perform rotation-specific matrix multiplication
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromXRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    out[0]  = 1;
    out[1]  = 0;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromYRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = 0;
    out[2]  = -s;
    out[3]  = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromZRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = s;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslation = function (out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;

    return out;
};

/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
mat4.getTranslation = function (out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];

  return out;
};

/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */
mat4.getRotation = function (out, mat) {
  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
  var trace = mat[0] + mat[5] + mat[10];
  var S = 0;

  if (trace > 0) { 
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (mat[6] - mat[9]) / S;
    out[1] = (mat[8] - mat[2]) / S; 
    out[2] = (mat[1] - mat[4]) / S; 
  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { 
    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
    out[3] = (mat[6] - mat[9]) / S;
    out[0] = 0.25 * S;
    out[1] = (mat[1] + mat[4]) / S; 
    out[2] = (mat[8] + mat[2]) / S; 
  } else if (mat[5] > mat[10]) { 
    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
    out[3] = (mat[8] - mat[2]) / S;
    out[0] = (mat[1] + mat[4]) / S; 
    out[1] = 0.25 * S;
    out[2] = (mat[6] + mat[9]) / S; 
  } else { 
    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
    out[3] = (mat[1] - mat[4]) / S;
    out[0] = (mat[8] + mat[2]) / S;
    out[1] = (mat[6] + mat[9]) / S;
    out[2] = 0.25 * S;
  }

  return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScale = function (out, q, v, s) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,
        sx = s[0],
        sy = s[1],
        sz = s[2];

    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;

    return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {
  // Quaternion math
  var x = q[0], y = q[1], z = q[2], w = q[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,

      xx = x * x2,
      xy = x * y2,
      xz = x * z2,
      yy = y * y2,
      yz = y * z2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2,

      sx = s[0],
      sy = s[1],
      sz = s[2],

      ox = o[0],
      oy = o[1],
      oz = o[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
  out[15] = 1;

  return out;
};

/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */
mat4.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.frustum = function (out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspective = function (out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspectiveFromFieldOfView = function (out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.ortho = function (out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
mat4.lookAt = function (out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&
        Math.abs(eyey - centery) < glMatrix.EPSILON &&
        Math.abs(eyez - centerz) < glMatrix.EPSILON) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat4.str = function (a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat4.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
};

/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
};

/**
 * Alias for {@link mat4.subtract}
 * @function
 */
mat4.sub = mat4.subtract;

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */
mat4.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
};

/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */
mat4.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    out[4] = a[4] + (b[4] * scale);
    out[5] = a[5] + (b[5] * scale);
    out[6] = a[6] + (b[6] * scale);
    out[7] = a[7] + (b[7] * scale);
    out[8] = a[8] + (b[8] * scale);
    out[9] = a[9] + (b[9] * scale);
    out[10] = a[10] + (b[10] * scale);
    out[11] = a[11] + (b[11] * scale);
    out[12] = a[12] + (b[12] * scale);
    out[13] = a[13] + (b[13] * scale);
    out[14] = a[14] + (b[14] * scale);
    out[15] = a[15] + (b[15] * scale);
    return out;
};

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat4.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && 
           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && 
           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat4.equals = function (a, b) {
    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],
        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], 
        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], 
        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];

    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],
        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], 
        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], 
        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];

    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));
};



module.exports = mat4;

},{"./common.js":26}],31:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");
var mat3 = require("./mat3.js");
var vec3 = require("./vec3.js");
var vec4 = require("./vec4.js");

/**
 * @class Quaternion
 * @name quat
 */
var quat = {};

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
quat.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
quat.rotationTo = (function() {
    var tmpvec3 = vec3.create();
    var xUnitVec3 = vec3.fromValues(1,0,0);
    var yUnitVec3 = vec3.fromValues(0,1,0);

    return function(out, a, b) {
        var dot = vec3.dot(a, b);
        if (dot < -0.999999) {
            vec3.cross(tmpvec3, xUnitVec3, a);
            if (vec3.length(tmpvec3) < 0.000001)
                vec3.cross(tmpvec3, yUnitVec3, a);
            vec3.normalize(tmpvec3, tmpvec3);
            quat.setAxisAngle(out, tmpvec3, Math.PI);
            return out;
        } else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        } else {
            vec3.cross(tmpvec3, a, b);
            out[0] = tmpvec3[0];
            out[1] = tmpvec3[1];
            out[2] = tmpvec3[2];
            out[3] = 1 + dot;
            return quat.normalize(out, out);
        }
    };
})();

/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
quat.setAxes = (function() {
    var matr = mat3.create();

    return function(out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];

        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];

        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];

        return quat.normalize(out, quat.fromMat3(out, matr));
    };
})();

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
quat.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
quat.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
quat.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
quat.set = vec4.set;

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};

/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */
quat.getAxisAngle = function(out_axis, q) {
    var rad = Math.acos(q[3]) * 2.0;
    var s = Math.sin(rad / 2.0);
    if (s != 0.0) {
        out_axis[0] = q[0] / s;
        out_axis[1] = q[1] / s;
        out_axis[2] = q[2] / s;
    } else {
        // If s is zero, return any axis (no rotation - axis does not matter)
        out_axis[0] = 1;
        out_axis[1] = 0;
        out_axis[2] = 0;
    }
    return rad;
};

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
quat.add = vec4.add;

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};

/**
 * Alias for {@link quat.multiply}
 * @function
 */
quat.mul = quat.multiply;

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
quat.scale = vec4.scale;

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateX = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateY = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        by = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateZ = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bz = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
quat.calculateW = function (out, a) {
    var x = a[0], y = a[1], z = a[2];

    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
quat.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
quat.lerp = vec4.lerp;

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.slerp = function (out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    var        omega, cosom, sinom, scale0, scale1;

    // calc cosine
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    // adjust signs (if necessary)
    if ( cosom < 0.0 ) {
        cosom = -cosom;
        bx = - bx;
        by = - by;
        bz = - bz;
        bw = - bw;
    }
    // calculate coefficients
    if ( (1.0 - cosom) > 0.000001 ) {
        // standard case (slerp)
        omega  = Math.acos(cosom);
        sinom  = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
    } else {        
        // "from" and "to" quaternions are very close 
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
    }
    // calculate final values
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    
    return out;
};

/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
quat.sqlerp = (function () {
  var temp1 = quat.create();
  var temp2 = quat.create();
  
  return function (out, a, b, c, d, t) {
    quat.slerp(temp1, a, d, t);
    quat.slerp(temp2, b, c, t);
    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
    
    return out;
  };
}());

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
        invDot = dot ? 1.0/dot : 0;
    
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    out[0] = -a0*invDot;
    out[1] = -a1*invDot;
    out[2] = -a2*invDot;
    out[3] = a3*invDot;
    return out;
};

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
quat.conjugate = function (out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
quat.length = vec4.length;

/**
 * Alias for {@link quat.length}
 * @function
 */
quat.len = quat.length;

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
quat.squaredLength = vec4.squaredLength;

/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
quat.sqrLen = quat.squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
quat.normalize = vec4.normalize;

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
quat.fromMat3 = function(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;

    if ( fTrace > 0.0 ) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0);  // 2w
        out[3] = 0.5 * fRoot;
        fRoot = 0.5/fRoot;  // 1/(4w)
        out[0] = (m[5]-m[7])*fRoot;
        out[1] = (m[6]-m[2])*fRoot;
        out[2] = (m[1]-m[3])*fRoot;
    } else {
        // |w| <= 1/2
        var i = 0;
        if ( m[4] > m[0] )
          i = 1;
        if ( m[8] > m[i*3+i] )
          i = 2;
        var j = (i+1)%3;
        var k = (i+2)%3;
        
        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
    }
    
    return out;
};

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
quat.str = function (a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
quat.exactEquals = vec4.exactEquals;

/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
quat.equals = vec4.equals;

module.exports = quat;

},{"./common.js":26,"./mat3.js":29,"./vec3.js":33,"./vec4.js":34}],32:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 2 Dimensional Vector
 * @name vec2
 */
var vec2 = {};

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
vec2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for {@link vec2.subtract}
 * @function
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for {@link vec2.multiply}
 * @function
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for {@link vec2.divide}
 * @function
 */
vec2.div = vec2.divide;

/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */
vec2.ceil = function (out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    return out;
};

/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */
vec2.floor = function (out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    return out;
};

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};

/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */
vec2.round = function (out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
vec2.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.distance}
 * @function
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.length}
 * @function
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */
vec2.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
vec2.random = function (out, scale) {
    scale = scale || 1.0;
    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat4 = function(out, a, m) {
    var x = a[0], 
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
};

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec2.forEach = (function() {
    var vec = vec2.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 2;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec2.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1];
};

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec2.equals = function (a, b) {
    var a0 = a[0], a1 = a[1];
    var b0 = b[0], b1 = b[1];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));
};

module.exports = vec2;

},{"./common.js":26}],33:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 3 Dimensional Vector
 * @name vec3
 */
var vec3 = {};

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
vec3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
};

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
vec3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
vec3.fromValues = function(x, y, z) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
vec3.sub = vec3.subtract;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};

/**
 * Alias for {@link vec3.multiply}
 * @function
 */
vec3.mul = vec3.multiply;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};

/**
 * Alias for {@link vec3.divide}
 * @function
 */
vec3.div = vec3.divide;

/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */
vec3.ceil = function (out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
};

/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */
vec3.floor = function (out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
};

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};

/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */
vec3.round = function (out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    return out;
};

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
vec3.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.distance}
 * @function
 */
vec3.dist = vec3.distance;

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
vec3.sqrDist = vec3.squaredDistance;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
vec3.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.length}
 * @function
 */
vec3.len = vec3.length;

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec3.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
vec3.sqrLen = vec3.squaredLength;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
vec3.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
};

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x*x + y*y + z*z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
vec3.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2];

    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};

/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.hermite = function (out, a, b, c, d, t) {
  var factorTimes2 = t * t,
      factor1 = factorTimes2 * (2 * t - 3) + 1,
      factor2 = factorTimes2 * (t - 2) + t,
      factor3 = factorTimes2 * (t - 1),
      factor4 = factorTimes2 * (3 - 2 * t);
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.bezier = function (out, a, b, c, d, t) {
  var inverseFactor = 1 - t,
      inverseFactorTimesTwo = inverseFactor * inverseFactor,
      factorTimes2 = t * t,
      factor1 = inverseFactorTimesTwo * inverseFactor,
      factor2 = 3 * t * inverseFactorTimesTwo,
      factor3 = 3 * factorTimes2 * inverseFactor,
      factor4 = factorTimes2 * t;
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
vec3.random = function (out, scale) {
    scale = scale || 1.0;

    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    var z = (glMatrix.RANDOM() * 2.0) - 1.0;
    var zScale = Math.sqrt(1.0-z*z) * scale;

    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
};

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
};

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat3 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
};

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
vec3.transformQuat = function(out, a, q) {
    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateX = function(out, a, b, c){
   var p = [], r=[];
	  //Translate point to the origin
	  p[0] = a[0] - b[0];
	  p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];

	  //perform rotation
	  r[0] = p[0];
	  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
	  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

	  //translate to correct position
	  out[0] = r[0] + b[0];
	  out[1] = r[1] + b[1];
	  out[2] = r[2] + b[2];

  	return out;
};

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateY = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
  	r[1] = p[1];
  	r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateZ = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
  	r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
  	r[2] = p[2];
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec3.forEach = (function() {
    var vec = vec3.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 3;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        
        return a;
    };
})();

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
vec3.angle = function(a, b) {
   
    var tempA = vec3.fromValues(a[0], a[1], a[2]);
    var tempB = vec3.fromValues(b[0], b[1], b[2]);
 
    vec3.normalize(tempA, tempA);
    vec3.normalize(tempB, tempB);
 
    var cosine = vec3.dot(tempA, tempB);

    if(cosine > 1.0){
        return 0;
    } else {
        return Math.acos(cosine);
    }     
};

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec3.str = function (a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
};

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec3.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
};

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec3.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2];
    var b0 = b[0], b1 = b[1], b2 = b[2];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));
};

module.exports = vec3;

},{"./common.js":26}],34:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 4 Dimensional Vector
 * @name vec4
 */
var vec4 = {};

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
vec4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
};

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
vec4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
vec4.fromValues = function(x, y, z, w) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
vec4.sub = vec4.subtract;

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};

/**
 * Alias for {@link vec4.multiply}
 * @function
 */
vec4.mul = vec4.multiply;

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};

/**
 * Alias for {@link vec4.divide}
 * @function
 */
vec4.div = vec4.divide;

/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */
vec4.ceil = function (out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    out[3] = Math.ceil(a[3]);
    return out;
};

/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */
vec4.floor = function (out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    out[3] = Math.floor(a[3]);
    return out;
};

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};

/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */
vec4.round = function (out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    out[3] = Math.round(a[3]);
    return out;
};

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
vec4.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.distance}
 * @function
 */
vec4.dist = vec4.distance;

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
vec4.sqrDist = vec4.squaredDistance;

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
vec4.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.length}
 * @function
 */
vec4.len = vec4.length;

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec4.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
vec4.sqrLen = vec4.squaredLength;

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
vec4.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
};

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x*x + y*y + z*z + w*w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
vec4.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
vec4.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
vec4.random = function (out, scale) {
    scale = scale || 1.0;

    //TODO: This is a pretty awful way of doing this. Find something better.
    out[0] = glMatrix.RANDOM();
    out[1] = glMatrix.RANDOM();
    out[2] = glMatrix.RANDOM();
    out[3] = glMatrix.RANDOM();
    vec4.normalize(out, out);
    vec4.scale(out, out, scale);
    return out;
};

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
};

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec4.forEach = (function() {
    var vec = vec4.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 4;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec4.str = function (a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec4.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
};

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec4.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
};

module.exports = vec4;

},{"./common.js":26}],35:[function(require,module,exports){
(function (global){
/*
** Copyright (c) 2012 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

//Ported to node by Marcin Ignac on 2016-05-20

// Various functions for helping debug WebGL apps.

WebGLDebugUtils = function() {

//polyfill window in node
if (typeof(window) == 'undefined') {
    window = global;
}

/**
 * Wrapped logging function.
 * @param {string} msg Message to log.
 */
var log = function(msg) {
  if (window.console && window.console.log) {
    window.console.log(msg);
  }
};

/**
 * Wrapped error logging function.
 * @param {string} msg Message to log.
 */
var error = function(msg) {
  if (window.console && window.console.error) {
    window.console.error(msg);
  } else {
    log(msg);
  }
};


/**
 * Which arguments are enums based on the number of arguments to the function.
 * So
 *    'texImage2D': {
 *       9: { 0:true, 2:true, 6:true, 7:true },
 *       6: { 0:true, 2:true, 3:true, 4:true },
 *    },
 *
 * means if there are 9 arguments then 6 and 7 are enums, if there are 6
 * arguments 3 and 4 are enums
 *
 * @type {!Object.<number, !Object.<number, string>}
 */
var glValidEnumContexts = {
  // Generic setters and getters

  'enable': {1: { 0:true }},
  'disable': {1: { 0:true }},
  'getParameter': {1: { 0:true }},

  // Rendering

  'drawArrays': {3:{ 0:true }},
  'drawElements': {4:{ 0:true, 2:true }},

  // Shaders

  'createShader': {1: { 0:true }},
  'getShaderParameter': {2: { 1:true }},
  'getProgramParameter': {2: { 1:true }},
  'getShaderPrecisionFormat': {2: { 0: true, 1:true }},

  // Vertex attributes

  'getVertexAttrib': {2: { 1:true }},
  'vertexAttribPointer': {6: { 2:true }},

  // Textures

  'bindTexture': {2: { 0:true }},
  'activeTexture': {1: { 0:true }},
  'getTexParameter': {2: { 0:true, 1:true }},
  'texParameterf': {3: { 0:true, 1:true }},
  'texParameteri': {3: { 0:true, 1:true, 2:true }},
  'texImage2D': {
     9: { 0:true, 2:true, 6:true, 7:true },
     6: { 0:true, 2:true, 3:true, 4:true }
  },
  'texSubImage2D': {
    9: { 0:true, 6:true, 7:true },
    7: { 0:true, 4:true, 5:true }
  },
  'copyTexImage2D': {8: { 0:true, 2:true }},
  'copyTexSubImage2D': {8: { 0:true }},
  'generateMipmap': {1: { 0:true }},
  'compressedTexImage2D': {7: { 0: true, 2:true }},
  'compressedTexSubImage2D': {8: { 0: true, 6:true }},

  // Buffer objects

  'bindBuffer': {2: { 0:true }},
  'bufferData': {3: { 0:true, 2:true }},
  'bufferSubData': {3: { 0:true }},
  'getBufferParameter': {2: { 0:true, 1:true }},

  // Renderbuffers and framebuffers

  'pixelStorei': {2: { 0:true, 1:true }},
  'readPixels': {7: { 4:true, 5:true }},
  'bindRenderbuffer': {2: { 0:true }},
  'bindFramebuffer': {2: { 0:true }},
  'checkFramebufferStatus': {1: { 0:true }},
  'framebufferRenderbuffer': {4: { 0:true, 1:true, 2:true }},
  'framebufferTexture2D': {5: { 0:true, 1:true, 2:true }},
  'getFramebufferAttachmentParameter': {3: { 0:true, 1:true, 2:true }},
  'getRenderbufferParameter': {2: { 0:true, 1:true }},
  'renderbufferStorage': {4: { 0:true, 1:true }},

  // Frame buffer operations (clear, blend, depth test, stencil)

  'clear': {1: { 0: { 'enumBitwiseOr': ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] }}},
  'depthFunc': {1: { 0:true }},
  'blendFunc': {2: { 0:true, 1:true }},
  'blendFuncSeparate': {4: { 0:true, 1:true, 2:true, 3:true }},
  'blendEquation': {1: { 0:true }},
  'blendEquationSeparate': {2: { 0:true, 1:true }},
  'stencilFunc': {3: { 0:true }},
  'stencilFuncSeparate': {4: { 0:true, 1:true }},
  'stencilMaskSeparate': {2: { 0:true }},
  'stencilOp': {3: { 0:true, 1:true, 2:true }},
  'stencilOpSeparate': {4: { 0:true, 1:true, 2:true, 3:true }},

  // Culling

  'cullFace': {1: { 0:true }},
  'frontFace': {1: { 0:true }},

  // ANGLE_instanced_arrays extension

  'drawArraysInstancedANGLE': {4: { 0:true }},
  'drawElementsInstancedANGLE': {5: { 0:true, 2:true }},

  // EXT_blend_minmax extension

  'blendEquationEXT': {1: { 0:true }}
};

/**
 * Map of numbers to names.
 * @type {Object}
 */
var glEnums = null;

/**
 * Map of names to numbers.
 * @type {Object}
 */
var enumStringToValue = null;

/**
 * Initializes this module. Safe to call more than once.
 * @param {!WebGLRenderingContext} ctx A WebGL context. If
 *    you have more than one context it doesn't matter which one
 *    you pass in, it is only used to pull out constants.
 */
function init(ctx) {
  if (glEnums == null) {
    glEnums = { };
    enumStringToValue = { };
    for (var propertyName in ctx) {
      if (typeof ctx[propertyName] == 'number') {
        glEnums[ctx[propertyName]] = propertyName;
        enumStringToValue[propertyName] = ctx[propertyName];
      }
    }
  }
}

/**
 * Checks the utils have been initialized.
 */
function checkInit() {
  if (glEnums == null) {
    throw 'WebGLDebugUtils.init(ctx) not called';
  }
}

/**
 * Returns true or false if value matches any WebGL enum
 * @param {*} value Value to check if it might be an enum.
 * @return {boolean} True if value matches one of the WebGL defined enums
 */
function mightBeEnum(value) {
  checkInit();
  return (glEnums[value] !== undefined);
}

/**
 * Gets an string version of an WebGL enum.
 *
 * Example:
 *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());
 *
 * @param {number} value Value to return an enum for
 * @return {string} The string version of the enum.
 */
function glEnumToString(value) {
  checkInit();
  var name = glEnums[value];
  return (name !== undefined) ? ("gl." + name) :
      ("/*UNKNOWN WebGL ENUM*/ 0x" + value.toString(16) + "");
}

/**
 * Returns the string version of a WebGL argument.
 * Attempts to convert enum arguments to strings.
 * @param {string} functionName the name of the WebGL function.
 * @param {number} numArgs the number of arguments passed to the function.
 * @param {number} argumentIndx the index of the argument.
 * @param {*} value The value of the argument.
 * @return {string} The value as a string.
 */
function glFunctionArgToString(functionName, numArgs, argumentIndex, value) {
  var funcInfo = glValidEnumContexts[functionName];
  if (funcInfo !== undefined) {
    var funcInfo = funcInfo[numArgs];
    if (funcInfo !== undefined) {
      if (funcInfo[argumentIndex]) {
        if (typeof funcInfo[argumentIndex] === 'object' &&
            funcInfo[argumentIndex]['enumBitwiseOr'] !== undefined) {
          var enums = funcInfo[argumentIndex]['enumBitwiseOr'];
          var orResult = 0;
          var orEnums = [];
          for (var i = 0; i < enums.length; ++i) {
            var enumValue = enumStringToValue[enums[i]];
            if ((value & enumValue) !== 0) {
              orResult |= enumValue;
              orEnums.push(glEnumToString(enumValue));
            }
          }
          if (orResult === value) {
            return orEnums.join(' | ');
          } else {
            return glEnumToString(value);
          }
        } else {
          return glEnumToString(value);
        }
      }
    }
  }
  if (value === null) {
    return "null";
  } else if (value === undefined) {
    return "undefined";
  } else {
    return value.toString();
  }
}

/**
 * Converts the arguments of a WebGL function to a string.
 * Attempts to convert enum arguments to strings.
 *
 * @param {string} functionName the name of the WebGL function.
 * @param {number} args The arguments.
 * @return {string} The arguments as a string.
 */
function glFunctionArgsToString(functionName, args) {
  // apparently we can't do args.join(",");
  var argStr = "";
  var numArgs = args.length;
  for (var ii = 0; ii < numArgs; ++ii) {
    argStr += ((ii == 0) ? '' : ', ') +
        glFunctionArgToString(functionName, numArgs, ii, args[ii]);
  }
  return argStr;
};


function makePropertyWrapper(wrapper, original, propertyName) {
  //log("wrap prop: " + propertyName);
  wrapper.__defineGetter__(propertyName, function() {
    return original[propertyName];
  });
  // TODO(gmane): this needs to handle properties that take more than
  // one value?
  wrapper.__defineSetter__(propertyName, function(value) {
    //log("set: " + propertyName);
    original[propertyName] = value;
  });
}

// Makes a function that calls a function on another object.
function makeFunctionWrapper(original, functionName) {
  //log("wrap fn: " + functionName);
  var f = original[functionName];
  return function() {
    //log("call: " + functionName);
    var result = f.apply(original, arguments);
    return result;
  };
}

/**
 * Given a WebGL context returns a wrapped context that calls
 * gl.getError after every command and calls a function if the
 * result is not gl.NO_ERROR.
 *
 * @param {!WebGLRenderingContext} ctx The webgl context to
 *        wrap.
 * @param {!function(err, funcName, args): void} opt_onErrorFunc
 *        The function to call when gl.getError returns an
 *        error. If not specified the default function calls
 *        console.log with a message.
 * @param {!function(funcName, args): void} opt_onFunc The
 *        function to call when each webgl function is called.
 *        You can use this to log all calls for example.
 * @param {!WebGLRenderingContext} opt_err_ctx The webgl context
 *        to call getError on if different than ctx.
 */
function makeDebugContext(ctx, opt_onErrorFunc, opt_onFunc, opt_err_ctx) {
  opt_err_ctx = opt_err_ctx || ctx;
  init(ctx);
  opt_onErrorFunc = opt_onErrorFunc || function(err, functionName, args) {
        // apparently we can't do args.join(",");
        var argStr = "";
        var numArgs = args.length;
        for (var ii = 0; ii < numArgs; ++ii) {
          argStr += ((ii == 0) ? '' : ', ') +
              glFunctionArgToString(functionName, numArgs, ii, args[ii]);
        }
        error("WebGL error "+ glEnumToString(err) + " in "+ functionName +
              "(" + argStr + ")");
      };

  // Holds booleans for each GL error so after we get the error ourselves
  // we can still return it to the client app.
  var glErrorShadow = { };

  // Makes a function that calls a WebGL function and then calls getError.
  function makeErrorWrapper(ctx, functionName) {
    return function() {
      if (opt_onFunc) {
        opt_onFunc(functionName, arguments);
      }
      var result = ctx[functionName].apply(ctx, arguments);
      var err = opt_err_ctx.getError();
      if (err != 0) {
        glErrorShadow[err] = true;
        opt_onErrorFunc(err, functionName, arguments);
      }
      return result;
    };
  }

  // Make a an object that has a copy of every property of the WebGL context
  // but wraps all functions.
  var wrapper = {};
  for (var propertyName in ctx) {
    if (typeof ctx[propertyName] == 'function') {
      if (propertyName != 'getExtension') {
        wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);
      } else {
        var wrapped = makeErrorWrapper(ctx, propertyName);
        wrapper[propertyName] = function () {
          var result = wrapped.apply(ctx, arguments);
          return makeDebugContext(result, opt_onErrorFunc, opt_onFunc, opt_err_ctx);
        };
      }
    } else {
      makePropertyWrapper(wrapper, ctx, propertyName);
    }
  }

  // Override the getError function with one that returns our saved results.
  wrapper.getError = function() {
    for (var err in glErrorShadow) {
      if (glErrorShadow.hasOwnProperty(err)) {
        if (glErrorShadow[err]) {
          glErrorShadow[err] = false;
          return err;
        }
      }
    }
    return ctx.NO_ERROR;
  };

  return wrapper;
}

function resetToInitialState(ctx) {
  var numAttribs = ctx.getParameter(ctx.MAX_VERTEX_ATTRIBS);
  var tmp = ctx.createBuffer();
  ctx.bindBuffer(ctx.ARRAY_BUFFER, tmp);
  for (var ii = 0; ii < numAttribs; ++ii) {
    ctx.disableVertexAttribArray(ii);
    ctx.vertexAttribPointer(ii, 4, ctx.FLOAT, false, 0, 0);
    ctx.vertexAttrib1f(ii, 0);
  }
  ctx.deleteBuffer(tmp);

  var numTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);
  for (var ii = 0; ii < numTextureUnits; ++ii) {
    ctx.activeTexture(ctx.TEXTURE0 + ii);
    ctx.bindTexture(ctx.TEXTURE_CUBE_MAP, null);
    ctx.bindTexture(ctx.TEXTURE_2D, null);
  }

  ctx.activeTexture(ctx.TEXTURE0);
  ctx.useProgram(null);
  ctx.bindBuffer(ctx.ARRAY_BUFFER, null);
  ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, null);
  ctx.bindFramebuffer(ctx.FRAMEBUFFER, null);
  ctx.bindRenderbuffer(ctx.RENDERBUFFER, null);
  ctx.disable(ctx.BLEND);
  ctx.disable(ctx.CULL_FACE);
  ctx.disable(ctx.DEPTH_TEST);
  ctx.disable(ctx.DITHER);
  ctx.disable(ctx.SCISSOR_TEST);
  ctx.blendColor(0, 0, 0, 0);
  ctx.blendEquation(ctx.FUNC_ADD);
  ctx.blendFunc(ctx.ONE, ctx.ZERO);
  ctx.clearColor(0, 0, 0, 0);
  ctx.clearDepth(1);
  ctx.clearStencil(-1);
  ctx.colorMask(true, true, true, true);
  ctx.cullFace(ctx.BACK);
  ctx.depthFunc(ctx.LESS);
  ctx.depthMask(true);
  ctx.depthRange(0, 1);
  ctx.frontFace(ctx.CCW);
  ctx.hint(ctx.GENERATE_MIPMAP_HINT, ctx.DONT_CARE);
  ctx.lineWidth(1);
  ctx.pixelStorei(ctx.PACK_ALIGNMENT, 4);
  ctx.pixelStorei(ctx.UNPACK_ALIGNMENT, 4);
  ctx.pixelStorei(ctx.UNPACK_FLIP_Y_WEBGL, false);
  ctx.pixelStorei(ctx.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
  // TODO: Delete this IF.
  if (ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL) {
    ctx.pixelStorei(ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx.BROWSER_DEFAULT_WEBGL);
  }
  ctx.polygonOffset(0, 0);
  ctx.sampleCoverage(1, false);
  ctx.scissor(0, 0, ctx.canvas.width, ctx.canvas.height);
  ctx.stencilFunc(ctx.ALWAYS, 0, 0xFFFFFFFF);
  ctx.stencilMask(0xFFFFFFFF);
  ctx.stencilOp(ctx.KEEP, ctx.KEEP, ctx.KEEP);
  ctx.viewport(0, 0, ctx.canvas.width, ctx.canvas.height);
  ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT | ctx.STENCIL_BUFFER_BIT);

  // TODO: This should NOT be needed but Firefox fails with 'hint'
  while(ctx.getError());
}

function makeLostContextSimulatingCanvas(canvas) {
  var unwrappedContext_;
  var wrappedContext_;
  var onLost_ = [];
  var onRestored_ = [];
  var wrappedContext_ = {};
  var contextId_ = 1;
  var contextLost_ = false;
  var resourceId_ = 0;
  var resourceDb_ = [];
  var numCallsToLoseContext_ = 0;
  var numCalls_ = 0;
  var canRestore_ = false;
  var restoreTimeout_ = 0;

  // Holds booleans for each GL error so can simulate errors.
  var glErrorShadow_ = { };

  canvas.getContext = function(f) {
    return function() {
      var ctx = f.apply(canvas, arguments);
      // Did we get a context and is it a WebGL context?
      if (ctx instanceof WebGLRenderingContext) {
        if (ctx != unwrappedContext_) {
          if (unwrappedContext_) {
            throw "got different context"
          }
          unwrappedContext_ = ctx;
          wrappedContext_ = makeLostContextSimulatingContext(unwrappedContext_);
        }
        return wrappedContext_;
      }
      return ctx;
    }
  }(canvas.getContext);

  function wrapEvent(listener) {
    if (typeof(listener) == "function") {
      return listener;
    } else {
      return function(info) {
        listener.handleEvent(info);
      }
    }
  }

  var addOnContextLostListener = function(listener) {
    onLost_.push(wrapEvent(listener));
  };

  var addOnContextRestoredListener = function(listener) {
    onRestored_.push(wrapEvent(listener));
  };


  function wrapAddEventListener(canvas) {
    var f = canvas.addEventListener;
    canvas.addEventListener = function(type, listener, bubble) {
      switch (type) {
        case 'webglcontextlost':
          addOnContextLostListener(listener);
          break;
        case 'webglcontextrestored':
          addOnContextRestoredListener(listener);
          break;
        default:
          f.apply(canvas, arguments);
      }
    };
  }

  wrapAddEventListener(canvas);

  canvas.loseContext = function() {
    if (!contextLost_) {
      contextLost_ = true;
      numCallsToLoseContext_ = 0;
      ++contextId_;
      while (unwrappedContext_.getError());
      clearErrors();
      glErrorShadow_[unwrappedContext_.CONTEXT_LOST_WEBGL] = true;
      var event = makeWebGLContextEvent("context lost");
      var callbacks = onLost_.slice();
      setTimeout(function() {
          //log("numCallbacks:" + callbacks.length);
          for (var ii = 0; ii < callbacks.length; ++ii) {
            //log("calling callback:" + ii);
            callbacks[ii](event);
          }
          if (restoreTimeout_ >= 0) {
            setTimeout(function() {
                canvas.restoreContext();
              }, restoreTimeout_);
          }
        }, 0);
    }
  };

  canvas.restoreContext = function() {
    if (contextLost_) {
      if (onRestored_.length) {
        setTimeout(function() {
            if (!canRestore_) {
              throw "can not restore. webglcontestlost listener did not call event.preventDefault";
            }
            freeResources();
            resetToInitialState(unwrappedContext_);
            contextLost_ = false;
            numCalls_ = 0;
            canRestore_ = false;
            var callbacks = onRestored_.slice();
            var event = makeWebGLContextEvent("context restored");
            for (var ii = 0; ii < callbacks.length; ++ii) {
              callbacks[ii](event);
            }
          }, 0);
      }
    }
  };

  canvas.loseContextInNCalls = function(numCalls) {
    if (contextLost_) {
      throw "You can not ask a lost contet to be lost";
    }
    numCallsToLoseContext_ = numCalls_ + numCalls;
  };

  canvas.getNumCalls = function() {
    return numCalls_;
  };

  canvas.setRestoreTimeout = function(timeout) {
    restoreTimeout_ = timeout;
  };

  function isWebGLObject(obj) {
    //return false;
    return (obj instanceof WebGLBuffer ||
            obj instanceof WebGLFramebuffer ||
            obj instanceof WebGLProgram ||
            obj instanceof WebGLRenderbuffer ||
            obj instanceof WebGLShader ||
            obj instanceof WebGLTexture);
  }

  function checkResources(args) {
    for (var ii = 0; ii < args.length; ++ii) {
      var arg = args[ii];
      if (isWebGLObject(arg)) {
        return arg.__webglDebugContextLostId__ == contextId_;
      }
    }
    return true;
  }

  function clearErrors() {
    var k = Object.keys(glErrorShadow_);
    for (var ii = 0; ii < k.length; ++ii) {
      delete glErrorShadow_[k];
    }
  }

  function loseContextIfTime() {
    ++numCalls_;
    if (!contextLost_) {
      if (numCallsToLoseContext_ == numCalls_) {
        canvas.loseContext();
      }
    }
  }

  // Makes a function that simulates WebGL when out of context.
  function makeLostContextFunctionWrapper(ctx, functionName) {
    var f = ctx[functionName];
    return function() {
      // log("calling:" + functionName);
      // Only call the functions if the context is not lost.
      loseContextIfTime();
      if (!contextLost_) {
        //if (!checkResources(arguments)) {
        //  glErrorShadow_[wrappedContext_.INVALID_OPERATION] = true;
        //  return;
        //}
        var result = f.apply(ctx, arguments);
        return result;
      }
    };
  }

  function freeResources() {
    for (var ii = 0; ii < resourceDb_.length; ++ii) {
      var resource = resourceDb_[ii];
      if (resource instanceof WebGLBuffer) {
        unwrappedContext_.deleteBuffer(resource);
      } else if (resource instanceof WebGLFramebuffer) {
        unwrappedContext_.deleteFramebuffer(resource);
      } else if (resource instanceof WebGLProgram) {
        unwrappedContext_.deleteProgram(resource);
      } else if (resource instanceof WebGLRenderbuffer) {
        unwrappedContext_.deleteRenderbuffer(resource);
      } else if (resource instanceof WebGLShader) {
        unwrappedContext_.deleteShader(resource);
      } else if (resource instanceof WebGLTexture) {
        unwrappedContext_.deleteTexture(resource);
      }
    }
  }

  function makeWebGLContextEvent(statusMessage) {
    return {
      statusMessage: statusMessage,
      preventDefault: function() {
          canRestore_ = true;
        }
    };
  }

  return canvas;

  function makeLostContextSimulatingContext(ctx) {
    // copy all functions and properties to wrapper
    for (var propertyName in ctx) {
      if (typeof ctx[propertyName] == 'function') {
         wrappedContext_[propertyName] = makeLostContextFunctionWrapper(
             ctx, propertyName);
       } else {
         makePropertyWrapper(wrappedContext_, ctx, propertyName);
       }
    }

    // Wrap a few functions specially.
    wrappedContext_.getError = function() {
      loseContextIfTime();
      if (!contextLost_) {
        var err;
        while (err = unwrappedContext_.getError()) {
          glErrorShadow_[err] = true;
        }
      }
      for (var err in glErrorShadow_) {
        if (glErrorShadow_[err]) {
          delete glErrorShadow_[err];
          return err;
        }
      }
      return wrappedContext_.NO_ERROR;
    };

    var creationFunctions = [
      "createBuffer",
      "createFramebuffer",
      "createProgram",
      "createRenderbuffer",
      "createShader",
      "createTexture"
    ];
    for (var ii = 0; ii < creationFunctions.length; ++ii) {
      var functionName = creationFunctions[ii];
      wrappedContext_[functionName] = function(f) {
        return function() {
          loseContextIfTime();
          if (contextLost_) {
            return null;
          }
          var obj = f.apply(ctx, arguments);
          obj.__webglDebugContextLostId__ = contextId_;
          resourceDb_.push(obj);
          return obj;
        };
      }(ctx[functionName]);
    }

    var functionsThatShouldReturnNull = [
      "getActiveAttrib",
      "getActiveUniform",
      "getBufferParameter",
      "getContextAttributes",
      "getAttachedShaders",
      "getFramebufferAttachmentParameter",
      "getParameter",
      "getProgramParameter",
      "getProgramInfoLog",
      "getRenderbufferParameter",
      "getShaderParameter",
      "getShaderInfoLog",
      "getShaderSource",
      "getTexParameter",
      "getUniform",
      "getUniformLocation",
      "getVertexAttrib"
    ];
    for (var ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {
      var functionName = functionsThatShouldReturnNull[ii];
      wrappedContext_[functionName] = function(f) {
        return function() {
          loseContextIfTime();
          if (contextLost_) {
            return null;
          }
          return f.apply(ctx, arguments);
        }
      }(wrappedContext_[functionName]);
    }

    var isFunctions = [
      "isBuffer",
      "isEnabled",
      "isFramebuffer",
      "isProgram",
      "isRenderbuffer",
      "isShader",
      "isTexture"
    ];
    for (var ii = 0; ii < isFunctions.length; ++ii) {
      var functionName = isFunctions[ii];
      wrappedContext_[functionName] = function(f) {
        return function() {
          loseContextIfTime();
          if (contextLost_) {
            return false;
          }
          return f.apply(ctx, arguments);
        }
      }(wrappedContext_[functionName]);
    }

    wrappedContext_.checkFramebufferStatus = function(f) {
      return function() {
        loseContextIfTime();
        if (contextLost_) {
          return wrappedContext_.FRAMEBUFFER_UNSUPPORTED;
        }
        return f.apply(ctx, arguments);
      };
    }(wrappedContext_.checkFramebufferStatus);

    wrappedContext_.getAttribLocation = function(f) {
      return function() {
        loseContextIfTime();
        if (contextLost_) {
          return -1;
        }
        return f.apply(ctx, arguments);
      };
    }(wrappedContext_.getAttribLocation);

    wrappedContext_.getVertexAttribOffset = function(f) {
      return function() {
        loseContextIfTime();
        if (contextLost_) {
          return 0;
        }
        return f.apply(ctx, arguments);
      };
    }(wrappedContext_.getVertexAttribOffset);

    wrappedContext_.isContextLost = function() {
      return contextLost_;
    };

    return wrappedContext_;
  }
}

return {
  /**
   * Initializes this module. Safe to call more than once.
   * @param {!WebGLRenderingContext} ctx A WebGL context. If
   *    you have more than one context it doesn't matter which one
   *    you pass in, it is only used to pull out constants.
   */
  'init': init,

  /**
   * Returns true or false if value matches any WebGL enum
   * @param {*} value Value to check if it might be an enum.
   * @return {boolean} True if value matches one of the WebGL defined enums
   */
  'mightBeEnum': mightBeEnum,

  /**
   * Gets an string version of an WebGL enum.
   *
   * Example:
   *   WebGLDebugUtil.init(ctx);
   *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());
   *
   * @param {number} value Value to return an enum for
   * @return {string} The string version of the enum.
   */
  'glEnumToString': glEnumToString,

  /**
   * Converts the argument of a WebGL function to a string.
   * Attempts to convert enum arguments to strings.
   *
   * Example:
   *   WebGLDebugUtil.init(ctx);
   *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 2, 0, gl.TEXTURE_2D);
   *
   * would return 'TEXTURE_2D'
   *
   * @param {string} functionName the name of the WebGL function.
   * @param {number} numArgs The number of arguments
   * @param {number} argumentIndx the index of the argument.
   * @param {*} value The value of the argument.
   * @return {string} The value as a string.
   */
  'glFunctionArgToString': glFunctionArgToString,

  /**
   * Converts the arguments of a WebGL function to a string.
   * Attempts to convert enum arguments to strings.
   *
   * @param {string} functionName the name of the WebGL function.
   * @param {number} args The arguments.
   * @return {string} The arguments as a string.
   */
  'glFunctionArgsToString': glFunctionArgsToString,

  /**
   * Given a WebGL context returns a wrapped context that calls
   * gl.getError after every command and calls a function if the
   * result is not NO_ERROR.
   *
   * You can supply your own function if you want. For example, if you'd like
   * an exception thrown on any GL error you could do this
   *
   *    function throwOnGLError(err, funcName, args) {
   *      throw WebGLDebugUtils.glEnumToString(err) +
   *            " was caused by call to " + funcName;
   *    };
   *
   *    ctx = WebGLDebugUtils.makeDebugContext(
   *        canvas.getContext("webgl"), throwOnGLError);
   *
   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.
   * @param {!function(err, funcName, args): void} opt_onErrorFunc The function
   *     to call when gl.getError returns an error. If not specified the default
   *     function calls console.log with a message.
   * @param {!function(funcName, args): void} opt_onFunc The
   *     function to call when each webgl function is called. You
   *     can use this to log all calls for example.
   */
  'makeDebugContext': makeDebugContext,

  /**
   * Given a canvas element returns a wrapped canvas element that will
   * simulate lost context. The canvas returned adds the following functions.
   *
   * loseContext:
   *   simulates a lost context event.
   *
   * restoreContext:
   *   simulates the context being restored.
   *
   * lostContextInNCalls:
   *   loses the context after N gl calls.
   *
   * getNumCalls:
   *   tells you how many gl calls there have been so far.
   *
   * setRestoreTimeout:
   *   sets the number of milliseconds until the context is restored
   *   after it has been lost. Defaults to 0. Pass -1 to prevent
   *   automatic restoring.
   *
   * @param {!Canvas} canvas The canvas element to wrap.
   */
  'makeLostContextSimulatingCanvas': makeLostContextSimulatingCanvas,

  /**
   * Resets a context to the initial state.
   * @param {!WebGLRenderingContext} ctx The webgl context to
   *     reset.
   */
  'resetToInitialState': resetToInitialState
};

}();

module.exports = WebGLDebugUtils;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],36:[function(require,module,exports){
'use strict';

var util = require('../util');

// used by isOutOfStage method
var EXTRA_OUT_OF_SIZE = 100;

var id = 0;

var ObjectBase = function(scene, object) {
	this.scene = scene;
	this.core = scene.core;
	this.parent = object; // parent object if this is sub object
	this.id = ++id;

	this.frame_count = 0;

	this._x = 0; // local center x
	this._y = 0; // local center y

	// manage flags that disappears in frame elapsed
	this._auto_disable_times_map = {};

	this._velocity = null;
	this.resetVelocity();

	// sub object
	this.objects = [];

};

ObjectBase.prototype.init = function(){
	this.frame_count = 0;

	// NOTE: abolished
	//this._x = 0;
	//this._y = 0;

	this._auto_disable_times_map = {};

	this.resetVelocity();

	for(var i = 0, len = this.objects.length; i < len; i++) {
		this.objects[i].init();
	}
};

ObjectBase.prototype.beforeDraw = function(){
	this.frame_count++;

	// check flags that disappears in frame elapsed
	this._checkAutoDisableFlags();

	for(var i = 0, len = this.objects.length; i < len; i++) {
		this.objects[i].beforeDraw();
	}

	// move if this object is set velocity
	this._move();
};

ObjectBase.prototype.draw = function() {
	var ctx = this.core.ctx;

	// If is in DEBUG mode, show collision area
	if(this.core.debug_manager.isShowingCollisionArea()) {
		this._drawCollisionArea();
	}


	for(var i = 0, len = this.objects.length; i < len; i++) {
		this.objects[i].draw();
	}
};

ObjectBase.prototype.afterDraw = function() {
	for(var i = 0, len = this.objects.length; i < len; i++) {
		this.objects[i].afterDraw();
	}
};

ObjectBase.prototype.width = function() {
	return 0;
};
ObjectBase.prototype.height = function() {
	return 0;
};

ObjectBase.prototype.x = function(val) {
	if (typeof val !== 'undefined') { this._x = val; }
	return this._x;
};
ObjectBase.prototype.y = function(val) {
	if (typeof val !== 'undefined') { this._y = val; }
	return this._y;
};

ObjectBase.prototype.setPosition = function(x, y) {
	this._x = x;
	this._y = y;
};

/*
*******************************
* position methods
*******************************
*/

ObjectBase.prototype.globalCenterX = function() {
	return this.scene.x() + this.x();
};

ObjectBase.prototype.globalCenterY = function() {
	return this.scene.y() + this.y();
};


ObjectBase.prototype.globalLeftX = function() {
	return this.scene.x() + this.x() - this.width()/2;
};

ObjectBase.prototype.globalRightX = function() {
	return this.scene.x() + this.x() + this.width()/2;
};

ObjectBase.prototype.globalUpY = function() {
	return this.scene.x() + this.y() - this.height()/2;
};

ObjectBase.prototype.globalDownY = function() {
	return this.scene.x() + this.y() + this.height()/2;
};

/*
*******************************
* sub object methods
*******************************
*/

// add sub object
ObjectBase.prototype.addSubObject = function(object){
	this.objects.push(object);
};

ObjectBase.prototype.removeSubObject = function(object){
	// TODO: O(n) -> O(1)
	for(var i = 0, len = this.objects.length; i < len; i++) {
		if(this.objects[i].id === object.id) {
			this.objects.splice(i, 1);
			break;
		}
	}
};

ObjectBase.prototype.removeAllSubObject = function() {
	this.objects = [];
};

/*
*******************************
* collision methods
*******************************
*/

// collision width
// NOTE: the obj of arguments is collision target object
ObjectBase.prototype.collisionWidth = function(obj) {
	return 0;
};

// collision height
// NOTE: the obj of arguments is collision target object
ObjectBase.prototype.collisionHeight = function(obj) {
	return 0;
};

// callback if the object is collision with
// NOTE: the obj of arguments is collision target object
ObjectBase.prototype.onCollision = function(obj){
};

// flag if the object is check collision with
// NOTE: the obj of arguments is collision target object
ObjectBase.prototype.isCollision = function(obj) {
	return true;
};

// check Collision Detect with object and execute onCollision method if detect
ObjectBase.prototype.checkCollisionWithObject = function(obj1) {
	var obj2 = this;
	var is_collision = obj1.intersect(obj2);

	if(is_collision) {
		obj1.onCollision(obj2);
		obj2.onCollision(obj1);
	}

	return is_collision;
};

// check Collision Detect with object array and execute onCollision method if detect
ObjectBase.prototype.checkCollisionWithObjects = function(objs) {
	var obj1 = this;
	var return_flag = false;
	for(var i = 0; i < objs.length; i++) {
		var obj2 = objs[i];
		if(obj1.checkCollisionByObject(obj2)) {
			obj1.onCollision(obj2);
			obj2.onCollision(obj1);
			return_flag = true;
		}
	}

	return return_flag;
};

// check Collision Detect with (x, y) and execute onCollision method if detect
ObjectBase.prototype.checkCollisionWithPosition = function(x, y) {
	var point = new ObjectPoint(this.scene);
	point.init();
	point.setPosition(x, y);

	return this.checkCollisionWithObject(point);
};

// is the object collides with obj of argument ?
ObjectBase.prototype.intersect = function(obj) {
	if (!this.isCollision(obj) || !obj.isCollision(this)) return false;

	if(Math.abs(this.x() - obj.x()) < this.collisionWidth(obj)/2 + obj.collisionWidth(this)/2 &&
		Math.abs(this.y() - obj.y()) < this.collisionHeight(obj)/2 + obj.collisionHeight(this)/2) {
		return true;
	}

	return false;
};

ObjectBase.prototype.getCollisionLeftX = function(obj) {
	return this.x() - this.collisionWidth(obj) / 2;
};

ObjectBase.prototype.getCollisionRightX = function(obj) {
	return this.x() + this.collisionWidth(obj) / 2;
};

ObjectBase.prototype.getCollisionUpY = function(obj) {
	return this.y() - this.collisionHeight(obj) / 2;
};

ObjectBase.prototype.getCollisionDownY = function(obj) {
	return this.y() + this.collisionHeight(obj) / 2;
};

ObjectBase.prototype._drawCollisionArea = function() {
	// make dummy object to decide collision width and height
	var dummy_object = new ObjectBase(this.scene);

	var ctx = this.core.ctx;
	ctx.save();
	ctx.fillStyle = 'rgb( 255, 255, 255 )' ;
	ctx.globalAlpha = 0.4;
	ctx.fillRect(
		this.getCollisionLeftX(dummy_object),
		this.getCollisionUpY(dummy_object),
		this.collisionWidth(dummy_object),
		this.collisionHeight(dummy_object)
	);
	ctx.restore();
};


// NOTE: deprecated
ObjectBase.prototype.checkCollision = function(obj) {
	return this.checkCollisionByObject(obj);
};

// NOTE: deprecated
ObjectBase.prototype.checkCollisionByObject = function(obj) {
	return this.intersect(obj);
};
/*
*******************************
* disable flag methods
*******************************
*/

// set flags that disappears in frame elapsed
// TODO: enable to set flag which becomes false -> true
// TODO: reset flag if the object calls init method
ObjectBase.prototype.setAutoDisableFlag = function(flag_name, count) {
	var self = this;

	self[flag_name] = true;

	self._auto_disable_times_map[flag_name] = self.frame_count + count;

};

// check flags that disappears in frame elapsed
ObjectBase.prototype._checkAutoDisableFlags = function() {
	var self = this;
	for (var flag_name in self._auto_disable_times_map) {
		if(this._auto_disable_times_map[flag_name] < self.frame_count) {
			self[flag_name] = false;
			delete self._auto_disable_times_map[flag_name];
		}
	}
};

/*
*******************************
* velocity methods
*******************************
*/

ObjectBase.prototype.setVelocity = function(velocity) {
	this._velocity = velocity;
};

ObjectBase.prototype.resetVelocity = function() {
	this._velocity = {magnitude:0, theta:0};
};

ObjectBase.prototype.setVelocityMagnitude = function(magnitude) {
	this._velocity.magnitude = magnitude;
};

ObjectBase.prototype.setVelocityTheta = function(theta) {
	this._velocity.theta = theta;
};

// move if this object is set velocity
// TODO: doesn't move if the object's velocity magnitude is 0
ObjectBase.prototype._move = function() {
	var x = util.calcMoveXByVelocity(this._velocity);
	var y = util.calcMoveYByVelocity(this._velocity);

	this._x += x;
	this._y += y;
};

/*
*******************************
* other methods
*******************************
*/

// TODO: this.core -> this.scene
ObjectBase.prototype.isOutOfStage = function( ) {
	if(this.x() + EXTRA_OUT_OF_SIZE < 0 ||
	   this.y() + EXTRA_OUT_OF_SIZE < 0 ||
	   this.x() > this.core.width  + EXTRA_OUT_OF_SIZE ||
	   this.y() > this.core.height + EXTRA_OUT_OF_SIZE
	  ) {
		return true;
	}

	return false;
};

/*
*******************************
* point object class
*******************************
*/

var ObjectPoint = function(scene) {
	ObjectBase.apply(this, arguments);

};
util.inherit(ObjectPoint, ObjectBase);

ObjectPoint.prototype.collisionWidth = function(){
	return 1;
};
ObjectPoint.prototype.collisionHeight = function(){
	return 1;
};
ObjectPoint.prototype.width = function() {
	return 1;
};
ObjectPoint.prototype.height = function() {
	return 1;
};

module.exports = ObjectBase;

},{"../util":50}],37:[function(require,module,exports){
'use strict';

// TODO: add pooling logic
// TODO: split manager class and pool manager class
var base_object = require('./base');
var util = require('../util');

var PoolManager = function(scene, Class) {
	base_object.apply(this, arguments);

	this.Class = Class;
	this.objects = {};
};
util.inherit(PoolManager, base_object);

PoolManager.prototype.init = function() {
	base_object.prototype.init.apply(this, arguments);

	this.objects = {};
};

PoolManager.prototype.beforeDraw = function(){
	base_object.prototype.beforeDraw.apply(this, arguments);

	for(var id in this.objects) {
		this.objects[id].beforeDraw();
	}
};

PoolManager.prototype.draw = function(){
	base_object.prototype.draw.apply(this, arguments);
	for(var id in this.objects) {
		this.objects[id].draw();
	}
};

PoolManager.prototype.afterDraw = function(){
	base_object.prototype.afterDraw.apply(this, arguments);
	for(var id in this.objects) {
		this.objects[id].afterDraw();
	}
};

PoolManager.prototype.create = function() {
	var object = new this.Class(this.scene);
	object.init.apply(object, arguments);

	this.objects[object.id] = object;

	return object;
};
PoolManager.prototype.remove = function(id) {
	delete this.objects[id];
};

PoolManager.prototype.checkCollisionWithObject = function(obj1) {
	for(var id in this.objects) {
		var obj2 = this.objects[id];
		if(obj1.checkCollision(obj2)) {
			obj1.onCollision(obj2);
			obj2.onCollision(obj1);
		}
	}
};

PoolManager.prototype.checkCollisionWithManager = function(manager) {
	for(var obj1_id in this.objects) {
		for(var obj2_id in manager.objects) {
			if(this.objects[obj1_id].checkCollision(manager.objects[obj2_id])) {
				var obj1 = this.objects[obj1_id];
				var obj2 = manager.objects[obj2_id];

				obj1.onCollision(obj2);
				obj2.onCollision(obj1);

				// do not check died object twice
				if (!this.objects[obj1_id]) {
					break;
				}
			}
		}
	}
};

PoolManager.prototype.removeOutOfStageObjects = function() {
	for(var id in this.objects) {
		if(this.objects[id].isOutOfStage()) {
			this.remove(id);
		}
	}
};




module.exports = PoolManager;

},{"../util":50,"./base":36}],38:[function(require,module,exports){
'use strict';

// TODO: add pooling logic
// TODO: split manager class and pool manager class
var base_object = require('./base');
var util = require('../util');
var glmat = require('gl-matrix');

var CONSTANT_3D = require('../constant_3d').SPRITE3D;

var PoolManager3D = function(scene, Class) {
	base_object.apply(this, arguments);

	this.Class = Class;
	this.objects = {};

	this.vertices = [];
	this.coordinates = [];
	this.indices = [];
	this.colors = [];

	var gl = this.core.gl;
	this.vBuffer = gl.createBuffer();
	this.cBuffer = gl.createBuffer();
	this.iBuffer = gl.createBuffer();
	this.aBuffer = gl.createBuffer();

	this.mvMatrix = glmat.mat4.create();
	this.pMatrix = glmat.mat4.create();
};
util.inherit(PoolManager3D, base_object);

PoolManager3D.prototype.init = function() {
	base_object.prototype.init.apply(this, arguments);

	this.objects = {};

	this._initmvpMatrix();

};
PoolManager3D.prototype._initmvpMatrix = function() {
	// The upper left corner is the canvas origin
	// so reduce canvas width and add canvas height
	glmat.mat4.identity(this.mvMatrix);
	glmat.mat4.translate(this.mvMatrix, this.mvMatrix, [-this.core.width/2, this.core.height/2, 0]);

	this._setOrthographicProjection();
};
PoolManager3D.prototype._setOrthographicProjection = function() {
	glmat.mat4.identity(this.pMatrix);
	var near = 0.1;
	var far  = 10.0;
	glmat.mat4.ortho(this.pMatrix,
		-this.core.width/2,
		this.core.width/2,
		-this.core.height/2,
		this.core.height/2,
		near, far);
};

PoolManager3D.prototype.beforeDraw = function(){
	base_object.prototype.beforeDraw.apply(this, arguments);

	for(var id in this.objects) {
		this.objects[id].beforeDraw();
	}

	// update: vertices, indices, texture coordinates, colors
	this._updateAttributes();
};

// update: vertices, indices, texture coordinates, colors
PoolManager3D.prototype._updateAttributes = function() {
	this._resetAttributes();

	var i = 0;
	for(var id in this.objects) {
		var object = this.objects[id];

		if(!object.isShow()){
			continue;
		}

		var j;
		for(j = 0; j < CONSTANT_3D.V_SIZE; j++) {
			this.vertices[i * CONSTANT_3D.V_SIZE + j] = object.vertices[j];
		}

		for(j = 0; j < CONSTANT_3D.C_SIZE; j++) {
			this.coordinates[i * CONSTANT_3D.C_SIZE + j] = object.coordinates[j];
		}

		for(j = 0; j < CONSTANT_3D.I_SIZE; j++) {
			this.indices[i * CONSTANT_3D.I_SIZE + j] = i * CONSTANT_3D.V_ITEM_NUM + object.indices[j];
		}

		for(j = 0; j < CONSTANT_3D.A_SIZE; j++) {
			this.colors[i * CONSTANT_3D.A_SIZE + j] = object.colors[j];
		}

		i++;
	}
};

PoolManager3D.prototype._resetAttributes = function() {
	this.vertices.length    = 0;
	this.coordinates.length = 0;
	this.indices.length     = 0;
	this.colors.length      = 0;
};




PoolManager3D.prototype.draw = function(){
	base_object.prototype.draw.apply(this, arguments);

	// There is no objects.
	if (this.vertices.length === 0) return;

	var gl = this.core.gl;
	var shader = this.shader();

	gl.useProgram(shader.shader_program);
	gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
	gl.enable(gl.BLEND);
	gl.disable(gl.DEPTH_TEST);

	this._setupAttribute("aVertexPosition", this.vBuffer, new Float32Array(this.vertices), CONSTANT_3D.V_ITEM_SIZE);
	this._setupAttribute("aTextureCoordinates", this.cBuffer, new Float32Array(this.coordinates), CONSTANT_3D.C_ITEM_SIZE);
	this._setupAttribute("aColor", this.aBuffer, new Float32Array(this.colors), CONSTANT_3D.A_ITEM_SIZE);

	// TODO: use some types of texture
	for(var id in this.objects) {
		var texture = this.objects[id].texture;
		this._setupTexture("uSampler", 0, texture);
		break;
	}

	gl.uniformMatrix4fv(shader.uniform_locations.uPMatrix,  false, this.pMatrix);
	gl.uniformMatrix4fv(shader.uniform_locations.uMVMatrix, false, this.mvMatrix);

	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.iBuffer);
	gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.indices), gl.STATIC_DRAW);

	// TODO: how to implement?
	//this.setupAdditionalVariables();

	gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);

	/*
	 * TODO:
	 * reflect
	 * scaling
	*/
};

PoolManager3D.prototype._setupAttribute = function(attr_name, buffer, data, size){
	var gl = this.core.gl;
	var shader = this.shader();
	gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
	gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
	gl.enableVertexAttribArray(shader.attribute_locations[attr_name]);
	gl.vertexAttribPointer(shader.attribute_locations[attr_name], size, gl.FLOAT, false, 0, 0);
};
PoolManager3D.prototype._setupTexture = function(uniform_name, unit_no, texture){
	var gl = this.core.gl;
	var shader = this.shader();
	gl.activeTexture(gl["TEXTURE" + unit_no]);
	gl.bindTexture(gl.TEXTURE_2D, texture);
	gl.uniform1i(shader.uniform_locations[uniform_name], unit_no);
};



PoolManager3D.prototype.afterDraw = function(){
	base_object.prototype.afterDraw.apply(this, arguments);
	for(var id in this.objects) {
		this.objects[id].afterDraw();
	}
};

PoolManager3D.prototype.create = function() {
	var object = new this.Class(this.scene);
	object.init.apply(object, arguments);

	this.objects[object.id] = object;

	return object;
};
PoolManager3D.prototype.remove = function(id) {
	delete this.objects[id];
};

PoolManager3D.prototype.checkCollisionWithObject = function(obj1) {
	for(var id in this.objects) {
		var obj2 = this.objects[id];
		if(obj1.checkCollision(obj2)) {
			obj1.onCollision(obj2);
			obj2.onCollision(obj1);
		}
	}
};

PoolManager3D.prototype.checkCollisionWithManager = function(manager) {
	for(var obj1_id in this.objects) {
		for(var obj2_id in manager.objects) {
			if(this.objects[obj1_id].checkCollision(manager.objects[obj2_id])) {
				var obj1 = this.objects[obj1_id];
				var obj2 = manager.objects[obj2_id];

				obj1.onCollision(obj2);
				obj2.onCollision(obj1);

				// do not check died object twice
				if (!this.objects[obj1_id]) {
					break;
				}
			}
		}
	}
};

PoolManager3D.prototype.removeOutOfStageObjects = function() {
	for(var id in this.objects) {
		if(this.objects[id].isOutOfStage()) {
			this.remove(id);
		}
	}
};

PoolManager3D.prototype.shader = function(){
	return this.core.sprite_3d_shader;
};




module.exports = PoolManager3D;

},{"../constant_3d":20,"../util":50,"./base":36,"gl-matrix":25}],39:[function(require,module,exports){
'use strict';
var base_object = require('./base');
var util = require('../util');

var Sprite = function(scene) {
	base_object.apply(this, arguments);

	this.current_sprite_index = 0;
};
util.inherit(Sprite, base_object);

Sprite.prototype.init = function(){
	base_object.prototype.init.apply(this, arguments);

	this.current_sprite_index = 0;
};

Sprite.prototype.beforeDraw = function(){
	base_object.prototype.beforeDraw.apply(this, arguments);

	// animation sprite
	if(this.frame_count % this.spriteAnimationSpan() === 0) {
		this.current_sprite_index++;
		if(this.current_sprite_index >= this.spriteIndices().length) {
			this.current_sprite_index = 0;
		}
	}
};
Sprite.prototype.draw = function(){
	if(this.isShow()) {

		var image = this.core.image_loader.getImage(this.spriteName());

		if(this.scale()) console.error("scale method is deprecated. you should use scaleWidth and scaleHeight.");

		var ctx = this.core.ctx;

		ctx.save();

		// set position
		ctx.translate(this.globalCenterX(), this.globalCenterY());

		// rotate
		var rotate = util.thetaToRadian(this.velocity.theta + this.rotateAdjust());
		ctx.rotate(rotate);

		var sprite_width  = this.spriteWidth();
		var sprite_height = this.spriteHeight();
		if(!sprite_width)  sprite_width = image.width;
		if(!sprite_height) sprite_height = image.height;

		var width  = this.width();
		var height = this.height();

		// reflect left or right
		if(this.isReflect()) {
			ctx.transform(-1, 0, 0, 1, 0, 0);
		}

		ctx.globalAlpha = this.alpha();
		ctx.drawImage(image,
			// sprite position
			sprite_width * this.spriteIndexX(), sprite_height * this.spriteIndexY(),
			// sprite size to get
			sprite_width,                       sprite_height,
			// adjust left x, up y because of x and y indicate sprite center.
			-width/2,                           -height/2,
			// sprite size to show
			width,                              height
		);
		ctx.restore();
	}

	// draw sub objects(even if this object is not show)
	base_object.prototype.draw.apply(this, arguments);
};

Sprite.prototype.spriteName = function(){
	throw new Error("spriteName method must be overridden.");
};
Sprite.prototype.spriteIndexX = function(){
	return this.spriteIndices()[this.current_sprite_index].x;
};
Sprite.prototype.spriteIndexY = function(){
	return this.spriteIndices()[this.current_sprite_index].y;
};
Sprite.prototype.width = function(){
	return this.spriteWidth() * this.scaleWidth();
};
Sprite.prototype.height = function(){
	return this.spriteHeight() * this.scaleHeight();
};




Sprite.prototype.isShow = function(){
	return true;
};


Sprite.prototype.spriteAnimationSpan = function(){
	return 0;
};
Sprite.prototype.spriteIndices = function(){
	return [{x: 0, y: 0}];
};
Sprite.prototype.spriteWidth = function(){
	return 0;
};
Sprite.prototype.spriteHeight = function(){
	return 0;
};
Sprite.prototype.rotateAdjust = function(){
	return 0;
};

// scale method is deprecated. you should use scaleWidth and scaleHeight
Sprite.prototype.scale = function(){
	return 0;
};


Sprite.prototype.scaleWidth = function(){
	return 1;
};
Sprite.prototype.scaleHeight = function(){
	return 1;
};
Sprite.prototype.isReflect = function(){
	return false;
};
Sprite.prototype.alpha = function() {
	return 1.0;
};





module.exports = Sprite;

},{"../util":50,"./base":36}],40:[function(require,module,exports){
'use strict';
var base_object = require('./base');
var util = require('../util');
var CONSTANT_3D = require('../constant_3d').SPRITE3D;
var glmat = require('gl-matrix');

var Sprite3d = function(scene) {
	base_object.apply(this, arguments);

	this.current_sprite_index = 0;

	this._z = 0;

	this.vertices = [];
	this.coordinates = [];
	this.indices = [];
	this.colors = [];

	this.vertices.length    = CONSTANT_3D.V_SIZE;
	this.coordinates.length = CONSTANT_3D.C_SIZE;
	this.indices.length     = CONSTANT_3D.I_SIZE;
	this.colors.length      = CONSTANT_3D.A_SIZE;

	var gl = this.core.gl;
	this.vBuffer = gl.createBuffer();
	this.cBuffer = gl.createBuffer();
	this.iBuffer = gl.createBuffer();
	this.aBuffer = gl.createBuffer();

	this.texture = null;

	this.mvMatrix = glmat.mat4.create();
	this.pMatrix = glmat.mat4.create();
};
util.inherit(Sprite3d, base_object);

Sprite3d.prototype.init = function(){
	base_object.prototype.init.apply(this, arguments);

	this.current_sprite_index = 0;

	this._initmvpMatrix();
	this._initVertices();
	this._initCoordinates();
	this._initIndices();
	this._initColors();

	this._initTexture();

};

Sprite3d.prototype._initmvpMatrix = function() {
	// The upper left corner is the canvas origin
	// so reduce canvas width and add canvas height
	glmat.mat4.identity(this.mvMatrix);
	glmat.mat4.translate(this.mvMatrix, this.mvMatrix, [-this.core.width/2, this.core.height/2, 0]);

	this._setOrthographicProjection();
};
Sprite3d.prototype._initVertices = function() {
	var w = this.spriteWidth()/2;
	var h = this.spriteHeight()/2;

	this.vertices[0]  = -w;
	this.vertices[1]  = -h;
	this.vertices[2]  = -1.0;

	this.vertices[3]  =  w;
	this.vertices[4]  = -h;
	this.vertices[5]  = -1.0;

	this.vertices[6]  =  w;
	this.vertices[7]  =  h;
	this.vertices[8]  = -1.0;

	this.vertices[9]  = -w;
	this.vertices[10] =  h;
	this.vertices[11] = -1.0;
};

Sprite3d.prototype._initCoordinates = function() {

	var image = this.core.image_loader.getImage(this.spriteName());

	var w = this.spriteWidth() / image.width;
	var h = this.spriteHeight() / image.height;

	var x1 = w * this.spriteIndexX();
	var y1 = h * this.spriteIndexY();
	var x2 = x1 + w;
	var y2 = y1 + h;

	this.coordinates[0] = x1;
	this.coordinates[1] = y2;

	this.coordinates[2] = x2;
	this.coordinates[3] = y2;

	this.coordinates[4] = x2;
	this.coordinates[5] = y1;

	this.coordinates[6] = x1;
	this.coordinates[7] = y1;
};

Sprite3d.prototype._initIndices = function() {
	this.indices[0] = 0;
	this.indices[1] = 1;
	this.indices[2] = 2;

	this.indices[3] = 0;
	this.indices[4] = 2;
	this.indices[5] = 3;
};

Sprite3d.prototype._initColors = function() {
	this.colors[0] = 1.0;
	this.colors[1] = 1.0;
	this.colors[2] = 1.0;
	this.colors[3] = 1.0;

	this.colors[4] = 1.0;
	this.colors[5] = 1.0;
	this.colors[6] = 1.0;
	this.colors[7] = 1.0;

	this.colors[8] = 1.0;
	this.colors[9] = 1.0;
	this.colors[10] = 1.0;
	this.colors[11] = 1.0;

	this.colors[12] = 1.0;
	this.colors[13] = 1.0;
	this.colors[14] = 1.0;
	this.colors[15] = 1.0;
};

Sprite3d.prototype._initTexture = function() {
	var gl = this.core.gl;
	var image = this.core.image_loader.getImage(this.spriteName());

	var texture = gl.createTexture();

	gl.bindTexture(gl.TEXTURE_2D, texture);
	gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
	gl.bindTexture(gl.TEXTURE_2D, null);

	this.texture = texture;
};
Sprite3d.prototype._setOrthographicProjection = function() {
	glmat.mat4.identity(this.pMatrix);
	var near = 0.1;
	var far  = 10.0;
	glmat.mat4.ortho(this.pMatrix,
		-this.core.width/2,
		this.core.width/2,
		-this.core.height/2,
		this.core.height/2,
		near, far);
};




Sprite3d.prototype.beforeDraw = function(){
	base_object.prototype.beforeDraw.apply(this, arguments);
	// animation sprite
	if(this.frame_count % this.spriteAnimationSpan() === 0) {
		this.current_sprite_index++;
		if(this.current_sprite_index >= this.spriteIndices().length) {
			this.current_sprite_index = 0;
		}
	}

	// update vertices property
	this._initVertices();
	this._initCoordinates();
	this._translate();
	// TODO: rotate
	//this._rotate();
};


Sprite3d.prototype._translate = function() {
	for(var i = 0; i < CONSTANT_3D.V_ITEM_NUM; i++) {
		this.vertices[i * CONSTANT_3D.V_ITEM_SIZE + 0] += this.x();
		this.vertices[i * CONSTANT_3D.V_ITEM_SIZE + 1] -= this.y();
		this.vertices[i * CONSTANT_3D.V_ITEM_SIZE + 2] += this.z();
	}
};

Sprite3d.prototype._rotate = function() {
	var radian = this._getRadian();
	for(var i = 0; i < CONSTANT_3D.V_ITEM_NUM; i++) {
		var x = this.vertices[i * CONSTANT_3D.V_ITEM_SIZE + 0];
		var y = this.vertices[i * CONSTANT_3D.V_ITEM_SIZE + 1];

		this.vertices[i * CONSTANT_3D.V_ITEM_SIZE + 0] = x * Math.cos(radian) - y * Math.sin(radian);
		this.vertices[i * CONSTANT_3D.V_ITEM_SIZE + 1] = x * Math.sin(radian) + y * Math.cos(radian);
	}
};

Sprite3d.prototype._getRadian = function() {
	var theta = this.velocity.theta;
	return util.thetaToRadian(theta);
};

Sprite3d.prototype.draw = function(){
	if(this.isShow()) {
		var gl = this.core.gl;

		var shader = this.shader();

		gl.useProgram(shader.shader_program);

		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		gl.enable(gl.BLEND);
		gl.disable(gl.DEPTH_TEST);

		this._setupAttribute("aVertexPosition", this.vBuffer, new Float32Array(this.vertices), CONSTANT_3D.V_ITEM_SIZE);
		this._setupAttribute("aTextureCoordinates", this.cBuffer, new Float32Array(this.coordinates), CONSTANT_3D.C_ITEM_SIZE);
		this._setupAttribute("aColor", this.aBuffer, new Float32Array(this.colors), CONSTANT_3D.A_ITEM_SIZE);

		this._setupTexture("uSampler", 0, this.texture);

		gl.uniformMatrix4fv(shader.uniform_locations.uPMatrix,  false, this.pMatrix);
		gl.uniformMatrix4fv(shader.uniform_locations.uMVMatrix, false, this.mvMatrix);

		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.iBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.indices), gl.STATIC_DRAW);

		// inherit class may implement this.
		this.setupAdditionalVariables();

		gl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_SHORT, 0);

		/*
		 * TODO:
		 * reflect
		 * scaling
		*/
	}

	// draw sub objects(even if this object is not show)
	base_object.prototype.draw.apply(this, arguments);
};

Sprite3d.prototype._setupAttribute = function(attr_name, buffer, data, size){
	var gl = this.core.gl;
	var shader = this.shader();
	gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
	gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
	gl.enableVertexAttribArray(shader.attribute_locations[attr_name]);
	gl.vertexAttribPointer(shader.attribute_locations[attr_name], size, gl.FLOAT, false, 0, 0);
};
Sprite3d.prototype._setupTexture = function(uniform_name, unit_no, texture){
	var gl = this.core.gl;
	var shader = this.shader();
	gl.activeTexture(gl["TEXTURE" + unit_no]);
	gl.bindTexture(gl.TEXTURE_2D, texture);
	gl.uniform1i(shader.uniform_locations[uniform_name], unit_no);
};




Sprite3d.prototype.z = function(val) {
	if (typeof val !== 'undefined') { this._z = val; }
	return this._z;
};

Sprite3d.prototype.shader = function(){
	return this.core.sprite_3d_shader;
};

// setup additional variables for shader(attributes, uniforms)
Sprite3d.prototype.setupAdditionalVariables = function(){


};






Sprite3d.prototype.spriteName = function(){
	throw new Error("spriteName method must be overridden.");
};
Sprite3d.prototype.spriteIndexX = function(){
	return this.spriteIndices()[this.current_sprite_index].x;
};
Sprite3d.prototype.spriteIndexY = function(){
	return this.spriteIndices()[this.current_sprite_index].y;
};
Sprite3d.prototype.width = function(){
	return this.spriteWidth() * this.scaleWidth();
};
Sprite3d.prototype.height = function(){
	return this.spriteHeight() * this.scaleHeight();
};




Sprite3d.prototype.isShow = function(){
	return true;
};


Sprite3d.prototype.spriteAnimationSpan = function(){
	return 0;
};
Sprite3d.prototype.spriteIndices = function(){
	return [{x: 0, y: 0}];
};
Sprite3d.prototype.spriteWidth = function(){
	return 0;
};
Sprite3d.prototype.spriteHeight = function(){
	return 0;
};
Sprite3d.prototype.rotateAdjust = function(){
	return 0;
};

Sprite3d.prototype.scaleWidth = function(){
	return 1;
};
Sprite3d.prototype.scaleHeight = function(){
	return 1;
};
Sprite3d.prototype.isReflect = function(){
	return false;
};



module.exports = Sprite3d;

},{"../constant_3d":20,"../util":50,"./base":36,"gl-matrix":25}],41:[function(require,module,exports){
'use strict';
var base_object = require('./base');
var Util = require('../util');

var ObjectUIParts = function(scene, x, y, width, height, draw_function) {
	base_object.apply(this, arguments);

	this.x(x);
	this.y(y);

	this._width  = width;
	this._height = height;

	this._draw_function = draw_function.bind(this);

	this._is_show_rect = false;

	this._scale = 1;
};
Util.inherit(ObjectUIParts, base_object);

ObjectUIParts.prototype.collisionWidth = function(){
	return this._width;
};

ObjectUIParts.prototype.collisionHeight = function(){
	return this._height;
};

ObjectUIParts.prototype.setShowRect = function() {
	this._is_show_rect = true;
	return this;
};

ObjectUIParts.prototype.setVariable = function (name, value){
	this[name] = value;
	return this;
};

ObjectUIParts.prototype.draw = function(){
	var ctx = this.core.ctx;
	ctx.save();
	this._draw_function();
	ctx.restore();

	if(this._is_show_rect) {
		ctx.save();
		ctx.fillStyle = 'rgb( 255, 255, 255 )' ;
		ctx.globalAlpha = 0.4;
		ctx.fillRect(this.getCollisionLeftX(), this.getCollisionUpY(), this.collisionWidth(), this.collisionHeight());
		ctx.restore();
	}
};

module.exports = ObjectUIParts;

},{"../util":50,"./base":36}],42:[function(require,module,exports){
'use strict';

var SceneBase = function(core, scene) {
	this.core = core;
	this.parent = scene; // parent scene if this is sub scene
	this.width = this.core.width; // default
	this.height = this.core.height; // default

	this._x = 0;
	this._y = 0;

	this.frame_count = 0;

	this.objects = [];

	// sub scenes
	this.current_scene = null;
	this._reserved_next_scene = null; // next scene which changes next frame run
	this.scenes = {};

	// property for fade in
	this._fade_in_duration = null;
	this._fade_in_color = null;
	this._fade_in_start_frame_count = null;

	// property for fade out
	this._fade_out_duration = null;
	this._fade_out_color = null;
	this._fade_out_start_frame_count = null;
};

SceneBase.prototype.init = function(){
	// sub scenes
	this.current_scene = null;
	this._reserved_next_scene = null; // next scene which changes next frame run

	this._x = 0;
	this._y = 0;

	this.frame_count = 0;

	// property for fade in
	this._fade_in_duration = null;
	this._fade_in_color = null;
	this._fade_in_start_frame_count = null;

	// property for fade out
	this._fade_out_duration = null;
	this._fade_out_color = null;
	this._fade_out_start_frame_count = null;

	for(var i = 0, len = this.objects.length; i < len; i++) {
		this.objects[i].init();
	}
};

SceneBase.prototype.beforeDraw = function(){
	this.frame_count++;

	// go to next sub scene if next scene is set
	this.changeNextSubSceneIfReserved();

	for(var i = 0, len = this.objects.length; i < len; i++) {
		this.objects[i].beforeDraw();
	}

	if(this.currentSubScene()) this.currentSubScene().beforeDraw();
};

SceneBase.prototype.draw = function(){
	for(var i = 0, len = this.objects.length; i < len; i++) {
		this.objects[i].draw();
	}
	if(this.currentSubScene()) this.currentSubScene().draw();
};

SceneBase.prototype.afterDraw = function(){
	var ctx = this.core.ctx;

	var alpha;
	// fade in
	if (this.isInFadeIn()) {
		ctx.save();

		// tranparent settings
		if(this.frame_count - this._fade_in_start_frame_count < this._fade_in_duration) {
			alpha = 1.0 - (this.frame_count - this._fade_in_start_frame_count) / this._fade_in_duration;
		}
		else {
			alpha = 0.0;
		}

		ctx.globalAlpha = alpha;

		// transition color
		ctx.fillStyle = this._fade_in_color;
		ctx.fillRect(0, 0, this.width, this.height);

		ctx.restore();

		// alpha === 0.0 by transparent settings so quit fade in
		// why there? because alpha === 0, _fade_in_color === null by quitFadeIn method
		if(alpha === 1) this._quitFadeIn();

	}
	// fade out
	else if (this.isInFadeOut()) {
		ctx.save();

		// tranparent settings
		if(this.frame_count - this._fade_out_start_frame_count < this._fade_out_duration) {
			alpha = (this.frame_count - this._fade_out_start_frame_count) / this._fade_out_duration;
		}
		else {
			alpha = 1.0;
		}

		ctx.globalAlpha = alpha;

		// transition color
		ctx.fillStyle = this._fade_out_color;
		ctx.fillRect(0, 0, this.width, this.height);

		ctx.restore();

		// alpha === 1.0 by transparent settings so quit fade out
		// why there? because alpha === 1, _fade_out_color === null by quitFadeOut method
		if(alpha === 1) this._quitFadeOut();
	}

	for(var i = 0, len = this.objects.length; i < len; i++) {
		this.objects[i].afterDraw();
	}

	if(this.currentSubScene()) this.currentSubScene().afterDraw();
};

SceneBase.prototype.addObject = function(object){
	this.objects.push(object);
};
SceneBase.prototype.addObjects = function(object_list){
	this.objects = this.objects.concat(object_list);
};
SceneBase.prototype.removeAllObject = function() {
	this.objects = [];
};
SceneBase.prototype.removeObject = function(object){
	// TODO: O(n) -> O(1)
	for(var i = 0, len = this.objects.length; i < len; i++) {
		if(this.objects[i].id === object.id) {
			this.objects.splice(i, 1);
			break;
		}
	}
};






SceneBase.prototype.currentSubScene = function() {
	if(this.current_scene === null) {
		return;
	}

	return this.scenes[this.current_scene];
};
SceneBase.prototype.getSubScene = function(name) {
	return this.scenes[name];
};

SceneBase.prototype.addSubScene = function(name, scene) {
	this.scenes[name] = scene;
};
SceneBase.prototype.changeSubScene = function() {
	var args = Array.prototype.slice.call(arguments); // to convert array object
	this._reserved_next_scene = args;

};
SceneBase.prototype.changeNextSubSceneIfReserved = function() {
	if(this._reserved_next_scene) {
		this.current_scene = this._reserved_next_scene.shift();

		var current_sub_scene = this.currentSubScene();
		current_sub_scene.init.apply(current_sub_scene, this._reserved_next_scene);

		this._reserved_next_scene = null;
	}

};

SceneBase.prototype.setFadeIn = function(duration, color) {
	this._fade_in_duration = duration || 30;
	this._fade_in_color = color || 'white';

	// start fade in immediately
	this._startFadeIn();
};
SceneBase.prototype._startFadeIn = function() {
	this._quitFadeOut();
	this._fade_in_start_frame_count = this.frame_count;
};

SceneBase.prototype._quitFadeIn = function() {
	this._fade_in_duration = null;
	this._fade_in_color = null;
	this._fade_in_start_frame_count = null;
};
SceneBase.prototype.isInFadeIn = function() {
	return this._fade_in_start_frame_count !== null ? true : false;
};


SceneBase.prototype.setFadeOut = function(duration, color) {
	this._fade_out_duration = duration || 30;
	this._fade_out_color = color || 'black';
};
SceneBase.prototype.startFadeOut = function() {
	if(!this.isSetFadeOut()) return;

	this._quitFadeIn();
	this._fade_out_start_frame_count = this.frame_count;
};

SceneBase.prototype._quitFadeOut = function() {
	this._fade_out_duration = null;
	this._fade_out_color = null;
	this._fade_out_start_frame_count = null;
};
SceneBase.prototype.isInFadeOut = function() {
	return this._fade_out_start_frame_count !== null ? true : false;
};
SceneBase.prototype.isSetFadeOut = function() {
	return this._fade_out_duration && this._fade_out_color ? true : false;
};

SceneBase.prototype.x = function(val) {
	if (typeof val !== 'undefined') { this._x = val; }
	return this._x;
};
SceneBase.prototype.y = function(val) {
	if (typeof val !== 'undefined') { this._y = val; }
	return this._y;
};

module.exports = SceneBase;


},{}],43:[function(require,module,exports){
'use strict';

// loading scene

var base_scene = require('./base');
var util = require('../util');

var SceneLoading = function(core) {
	base_scene.apply(this, arguments);

	// go if the all assets loading is done.
	this.next_scene_name = null;
};
util.inherit(SceneLoading, base_scene);

SceneLoading.prototype.init = function(assets, next_scene_name) {
	base_scene.prototype.init.apply(this, arguments);

	// assets
	var images = assets.images || [];
	var sounds = assets.sounds || [];
	var bgms   = assets.bgms   || [];

	// go if the all assets loading is done.
	this.next_scene_name = next_scene_name;

	for (var key in images) {
		this.core.image_loader.loadImage(key, images[key]);
	}

	for (var key2 in sounds) {
		var conf2 = sounds[key2];
		this.core.audio_loader.loadSound(key2, conf2.path, conf2.volume);
	}

	for (var key3 in bgms) {
		var conf3 = bgms[key3];
		this.core.audio_loader.loadBGM(key3, conf3.path, 1.0, conf3.loopStart, conf3.loopEnd);
	}
};

SceneLoading.prototype.beforeDraw = function() {
	base_scene.prototype.beforeDraw.apply(this, arguments);

	// TODO: not wait font loading if no font is ready to load
	//if (this.core.image_loader.isAllLoaded() && this.core.audio_loader.isAllLoaded() && this.core.font_loader.isAllLoaded()) {
	if (this.core.image_loader.isAllLoaded() && this.core.audio_loader.isAllLoaded()) {
		this.notifyAllLoaded();
	}
};

SceneLoading.prototype.progress = function(){
	var progress = (this.core.audio_loader.progress() + this.core.image_loader.progress() + this.core.font_loader.progress()) / 3;
	return progress;
};

SceneLoading.prototype.draw = function(){
	base_scene.prototype.draw.apply(this, arguments);
};
SceneLoading.prototype.notifyAllLoaded = function(){
	if (this.next_scene_name) {
		this.core.changeScene(this.next_scene_name);
	}
};


module.exports = SceneLoading;

},{"../util":50,"./base":42}],44:[function(require,module,exports){
'use strict';

// typography speed
var TYPOGRAPHY_SPEED = 10;

var Util = require("./util");

var SerifManager = function () {
	this._timeoutID = null;

	// serif scenario
	this._script = null;

	// where serif has progressed
	this._progress = null;

	this._chara_id_list  = [];
	this._exp_id_list    = [];
	this._option = {};

	// which chara is talking, left or right
	this._pos = null;

	this._is_background_changed = false;
	this._background_image_name = null;

	this._char_list = "";
	this._char_idx = 0;

	this._is_enable_printing_message = true;

	// now printing message
	this._line_num = 0;
	this._printing_lines = [];
};

SerifManager.prototype.init = function (script) {
	if(!script) console.error("set script arguments to use serif_manager class");

	// serif scenario
	this._script = script;

	this._chara_id_list  = [];
	this._exp_id_list    = [];
	this._option = {};



	this._progress = -1;
	this._timeoutID = null;
	this._pos  = null;

	this._is_background_changed = false;
	this._background_image_name = null;


	this._char_list = "";
	this._char_idx = 0;

	this._is_enable_printing_message = true;

	this._line_num = 0;
	this._printing_lines = [];

	if(!this.is_end()) {
		this.next(); // start
	}
};

SerifManager.prototype.isEnd = function () {
	return this._progress === this._script.length - 1;
};

SerifManager.prototype.next = function () {
	this._progress++;

	var script = this._script[this._progress];

	this._showChara(script);

	this._showBackground(script);

	this._setOption(script);

	if(script.serif) {
		this._printMessage(script.serif);
	}
	else {
		// If serif is empty, show chara without talking and next
		this.next();
	}
};

SerifManager.prototype._showBackground = function(script) {
	this._is_background_changed = false;
	if(script.background && this._background_image_name !== script.background) {
		this._is_background_changed = true;
		this._background_image_name  = script.background;
	}
};

SerifManager.prototype._showChara = function(script) {
	var pos = script.pos;

	if (pos) {
		// NOTE: for deprecated pos setting
		if (pos === "left")  pos = 0;
		if (pos === "right") pos = 1;

		this._pos  = pos;

		this._chara_id_list[pos] = script.chara;
		this._exp_id_list[pos]   = script.exp;
	}
};

SerifManager.prototype._setOption = function(script) {
	this._option = script.option || {};

	// for deprecated script "font_color"
	if (script.font_color) {
		this._option = Util.shallowCopyHash(this.option);
		this._option.font_color = script.font_color;
	}
};

SerifManager.prototype._printMessage = function (message) {
	// cancel already started message
	this._cancelPrintMessage();

	// setup to show message
	this._char_list = message.split("");
	this._char_idx = 0;

	// clear showing message
	this._line_num = 0;
	this._printing_lines = [];

	this._startPrintMessage();
};

SerifManager.prototype._startPrintMessage = function () {
	var char_length = this._char_list.length;
	if (this._char_idx >= char_length) return;

	if(this._is_enable_printing_message) {
		var ch = this._char_list[this._char_idx];
		this._char_idx++;

		if (ch === "\n") {
			this._line_num++;
		}
		else {
			// initialize
			if(!this._printing_lines[this._line_num]) {
				this._printing_lines[this._line_num] = "";
			}

			// show A word
			this._printing_lines[this._line_num] = this._printing_lines[this._line_num] + ch;
		}
	}

	this._timeoutID = setTimeout(this._startPrintMessage.bind(this), TYPOGRAPHY_SPEED);
};

SerifManager.prototype._cancelPrintMessage = function () {
	if(this._timeoutID !== null) {
		clearTimeout(this._timeoutID);
		this._timeoutID = null;
	}
};

SerifManager.prototype.startPrintMessage = function () {
	this._is_enable_printing_message = true;
};
SerifManager.prototype.cancelPrintMessage = function () {
	this._is_enable_printing_message = false;
};

SerifManager.prototype.isBackgroundChanged = function () {
	return this._is_background_changed;
};
SerifManager.prototype.getBackgroundImageName = function () {
	return this._background_image_name;
};

SerifManager.prototype.getImageName = function (pos) {
	pos = pos || 0;
	return(this._chara_id_list[pos] ? this._chara_id_list[pos] + "_" + this._exp_id_list[pos] : null);
};
SerifManager.prototype.isTalking = function (pos) {
	return this._pos === pos ? true : false;
};
SerifManager.prototype.getOption = function () {
	return this._option;
};
SerifManager.prototype.lines = function () {
	return this._printing_lines;
};



// NOTE: deprecated
SerifManager.prototype.right_image = function () {
	var pos = 1; // means right

	return this.getImageName(pos);
};
// NOTE: deprecated
SerifManager.prototype.left_image = function () {
	var pos = 0; // means left

	return this.getImageName(pos);
};
// NOTE: deprecated
SerifManager.prototype.is_right_talking = function () {
	var pos = 1; // means right

	return this.isTalking(pos);
};
// NOTE: deprecated
SerifManager.prototype.is_left_talking = function () {
	var pos = 0; // means left

	return this.isTalking(pos);
};
// NOTE: deprecated
SerifManager.prototype.font_color = function () {
	return this._option.font_color;
};
// NOTE: deprecated
SerifManager.prototype.is_end = function () {
	return this.isEnd();
};
// NOTE: deprecated
SerifManager.prototype.is_background_changed = function () {
	return this.isBackgroundChanged();
};
// NOTE: deprecated
SerifManager.prototype.background_image = function () {
	return this.getBackgroundImageName();
};

module.exports = SerifManager;

},{"./util":50}],45:[function(require,module,exports){
module.exports = "precision mediump float;\nuniform sampler2D uSampler;\nvarying vec2 vTextureCoordinates;\nvarying vec4 vColor;\n\nvoid main() {\n\tvec4 textureColor = texture2D(uSampler, vTextureCoordinates);\n\tgl_FragColor = textureColor * vColor;\n}\n\n";

},{}],46:[function(require,module,exports){
module.exports = "attribute vec3 aVertexPosition;\nattribute vec2 aTextureCoordinates;\nattribute vec4 aColor;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nvarying vec2 vTextureCoordinates;\nvarying vec4 vColor;\n\nvoid main() {\n\tgl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n\tvTextureCoordinates = aTextureCoordinates;\n\tvColor = aColor;\n}\n\n";

},{}],47:[function(require,module,exports){
'use strict';
var glmat = require("gl-matrix");

var ShaderProgram = function(
	gl,
	vs_text,
	fs_text,
	attribute_variables,
	uniform_variables
) {
	if (!gl) throw new Error("arguments 1 must be WebGLRenderingContext instance");

	this.gl = gl;

	var vs_shader = this.createShader(gl, gl.VERTEX_SHADER, vs_text);
	var fs_shader = this.createShader(gl, gl.FRAGMENT_SHADER, fs_text);
	var shader_program = this.createShaderProgram(gl, vs_shader, fs_shader);

	var i;
	var attribute_locations = {};
	for (i=0; i < attribute_variables.length; i++) {
		attribute_locations[ attribute_variables[i] ] = gl.getAttribLocation(shader_program, attribute_variables[i]);
	}

	var uniform_locations = {};
	for (i=0; i < uniform_variables.length; i++) {
		uniform_locations[ uniform_variables[i] ] = gl.getUniformLocation(shader_program, uniform_variables[i]);
	}

	this.shader_program = shader_program;
	this.attribute_locations = attribute_locations;
	this.uniform_locations = uniform_locations;
};

ShaderProgram.prototype.createShader = function (gl, type, source_text) {
	if(type !== gl.VERTEX_SHADER && type !== gl.FRAGMENT_SHADER) {
		throw new Error ("type must be vertex or fragment");
	}

	var shader = gl.createShader(type);

	gl.shaderSource(shader, source_text);

	gl.compileShader(shader);

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
		throw (
			(type === gl.VERTEX_SHADER ? "Vertex" : "Fragment") + " failed to compile:\n\n" + gl.getShaderInfoLog(shader));
	}

	return shader;
};

ShaderProgram.prototype.createShaderProgram = function(gl, vertex_shader, fragment_shader) {
	var shaderProgram = gl.createProgram();

	gl.attachShader(shaderProgram, vertex_shader);
	gl.attachShader(shaderProgram, fragment_shader);

	gl.linkProgram(shaderProgram);

	if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
		throw new Error("Could not initialize shaders:\n\n" + gl.getProgramInfoLog(shaderProgram));
	}

	return shaderProgram;
};

module.exports = ShaderProgram;

},{"gl-matrix":25}],48:[function(require,module,exports){
'use strict';

/*
 * TODO: split load and save method by sync and async
 * TODO: compress save data
 * TODO: implement: defineColumnProperty method
 */

var Util = require("../util");

var DEFAULT_KEY = "hakurei_engine:default";

var StorageBase = function (data) {
	if(!data) data = {};
	this._data = data;
};

// save file unique key
// this constant must be overridden!
StorageBase.KEY = function() {
	return DEFAULT_KEY;
};

StorageBase.prototype.set = function(key, value) {
	this._data[key] = value;
};
StorageBase.prototype.get = function(key) {
	return this._data[key];
};
StorageBase.prototype.remove = function(key) {
	return delete this._data[key];
};
StorageBase.prototype.isEmpty = function(key) {
	return Object.keys(this._data).length === 0;
};
StorageBase.prototype.toHash = function() {
	return Util.shallowCopyHash(this._data);
};


// is Electron or NW.js ?
StorageBase.isLocalMode = function() {
	// this is Electron
	if (Util.isElectron()) {
		return true;
	}

	// TODO: NW.js
	return false;
};

StorageBase.prototype.save = function() {
	var Klass = this.constructor;
	if (Klass.isLocalMode()) {
		this._saveToLocalFile();
	}
	else {
		this._saveToWebStorage();

	}
};

StorageBase.prototype._saveToLocalFile = function() {
	var Klass = this.constructor;
	var fs = window.require('fs');

	var data = JSON.stringify(this._data);

	var dir_path = Klass._localFileDirectoryPath();

	var file_path = dir_path + Klass._localFileName(Klass.KEY());

	if (!fs.existsSync(dir_path)) {
		fs.mkdirSync(dir_path);
	}
	fs.writeFileSync(file_path, data);
};

// save file directory
StorageBase._localFileDirectoryPath = function() {
	var path = window.require('path');
	var app  = window.require('electron').remote.app;
	var base = app.getPath("appData");
	var app_name = app.getName();
	return path.join(base, app_name, 'save/');
};

StorageBase._localFileName = function(key) {
	return key + ".json";
};

StorageBase._localFilePath = function(key) {
	return this._localFileDirectoryPath() + this._localFileName(key);
};

StorageBase.prototype._saveToWebStorage = function() {
	var Klass = this.constructor;

	var key = Klass.KEY();
	var data = JSON.stringify(this._data);
	try {
		window.localStorage.setItem(key, data);
	}
	catch (e) {
	}
};

StorageBase.load = function() {
	var data;
	if (this.isLocalMode()) {
		data = this._loadFromLocalFile();
	}
	else {
		data = this._loadFromWebStorage();
	}

	var Klass = this;
	if (data) {
		// there is a storage data
		return new Klass(data);
	}
	else {
		// there is NOT a storage data
		return new Klass();
	}

};

StorageBase._loadFromLocalFile = function() {
	var fs = window.require('fs');

	var file_path = this._localFilePath(this.KEY());
	if (!fs.existsSync(file_path)) return null;

	var data = fs.readFileSync(file_path, { encoding: 'utf8' });

	var Klass = this;
	if (data) {
		return JSON.parse(data);
	}
	else {
		return null;
	}
};

StorageBase._loadFromWebStorage = function() {
	var key = this.KEY();
	var data;
	try {
		data = window.localStorage.getItem(key);
	}
	catch (e) {
	}

	var Klass = this;
	if (data) {
		return JSON.parse(data);
	}
	else {
		return null;
	}

};

StorageBase.prototype.del = function() {
	var Klass = this.constructor;
	if (Klass.isLocalMode()) {
		this._removeLocalFile();
	}
	else {
		this._removeWebStorage();
	}

	// reset this object properties
	this._data = {};
};

StorageBase.prototype._removeLocalFile = function() {
	var Klass = this.constructor;
	var fs = window.require('fs');
	var file_path = this._localFilePath(Klass.KEY());

	if (fs.existsSync(file_path)) {
		fs.unlinkSync(file_path);
	}
};

StorageBase.prototype._removeWebStorage = function() {
	var Klass = this.constructor;
	var key = Klass.KEY();
	try {
		window.localStorage.removeItem(key);
	}
	catch (e) {
	}
};

module.exports = StorageBase;

},{"../util":50}],49:[function(require,module,exports){
'use strict';
var base_class = require('./base');
var util = require('../util');

var StorageSave = function(scene) {
	base_class.apply(this, arguments);
};
util.inherit(StorageSave, base_class);

StorageSave.KEY = function(){
	var key = "hakurei_engine:save";
	if (!this.isLocalMode() && window && window.location) {
		return(key + ":" + window.location.pathname);
	}
	else {
		return "save";
	}
};

module.exports = StorageSave;

},{"../util":50,"./base":48}],50:[function(require,module,exports){
'use strict';
var Util = {
	inherit: function( child, parent ) {
		// inherit instance methods
		var getPrototype = function(p) {
			if(Object.create) return Object.create(p);

			var F = function() {};
			F.prototype = p;
			return new F();
		};
		child.prototype = getPrototype(parent.prototype);
		child.prototype.constructor = child;

		// inherit static methods
		for (var func_name in parent) {
			child[func_name] = parent[func_name];
		}
	},
	radianToTheta: function(radian) {
		return (radian * 180 / Math.PI) | 0;
	},
	thetaToRadian: function(theta) {
		return theta * Math.PI / 180;
	},
	calcMoveXByVelocity: function(velocity) {
		return velocity.magnitude * Math.cos(Util.thetaToRadian(velocity.theta));
	},
	calcMoveYByVelocity: function(velocity) {
		return velocity.magnitude * Math.sin(Util.thetaToRadian(velocity.theta));
	},
	hexToRGBString: function(h) {
		var hex16 = (h.charAt(0) === "#") ? h.substring(1, 7) : h;
		var r = parseInt(hex16.substring(0, 2), 16);
		var g = parseInt(hex16.substring(2, 4), 16);
		var b = parseInt(hex16.substring(4, 6), 16);

		return 'rgb(' + r + ', ' + g + ', ' + b + ')';
	},
	clamp: function(num, min, max) {
		return (num < min ? min : (num > max ? max : num));
	},
	isElectron: function() {
		if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
			return true;
		}
		return false;
	},
	canPlayOgg: function () {
		var audio = document.createElement('audio');
		if (audio.canPlayType) {
			return audio.canPlayType('audio/ogg');
		}

		return false;
	},
	shallowCopyHash: function (src_hash) {
		var dst_hash = {};
		for(var k in src_hash){
			dst_hash[k] = src_hash[k];
		}
		return dst_hash;
	}
};

module.exports = Util;

},{}],51:[function(require,module,exports){
'use strict';
var Game = require('./game');

var game;

window.onload = function() {
	// Canvas
	var mainCanvas = document.getElementById('mainCanvas');
	// Game オブジェクト
	game = new Game(mainCanvas);
	// 初期化
	game.init();
	// イベントハンドラの設定
	game.setupEvents();
	/*
	// デバッグ設定
	if (CONSTANT.DEBUG.ON) {
		var debugDOM = document.getElementById('debug');
		game.setupDebug(debugDOM);
	}
	*/

	// ゲーム起動
	game.startRun();
};
window.onerror = function (msg, file, line, column, err) {
	/*
	msg: error message
	file: file path
	line: row number
	column: column number
	err: error object
	*/ 
	//window.alert(msg + "\n" + line + ":" + column);
};
window.changeFullScreen = function () {
	game.fullscreen();
};

// Electron のレンダラプロセスならば
if(window.require) {
	window.require('electron').webFrame.setVisualZoomLevelLimits(1,1); //zoomさせない
}



},{"./game":14}],52:[function(require,module,exports){
'use strict';
var base_scene = require('../hakurei').object.base;
var Util = require('../hakurei').util;

var ObjectItemButton = function(core) {
	base_scene.apply(this, arguments);
};
Util.inherit(ObjectItemButton, base_scene);

ObjectItemButton.prototype.init = function(){
	base_scene.prototype.init.apply(this, arguments);
	this.setPosition();
};


ObjectItemButton.prototype.onCollision = function(obj){
	var scene_name = this.scene.mainStage().current_scene;
	if (scene_name === "play") {
		// メニューを開く
		this.scene.mainStage().changeSubScene("menu");
	}
	else if (scene_name === "menu") {
		// メニューを閉じる
		this.scene.mainStage().changeSubScene("play");
	}
};

ObjectItemButton.prototype.setPosition = function(){
	this.x(48 + 24);
	this.y(this.scene.mainStage().height - 75);
};

ObjectItemButton.prototype.draw = function(){
	var ctx = this.core.ctx;
	ctx.save();

	// 仮で四角形を描画
	ctx.fillStyle = 'rgb( 255, 255, 255 )' ;
	//ctx.globalAlpha = 0.4;
	ctx.fillRect(this.getCollisionLeftX(), this.getCollisionUpY(), this.collisionWidth(), this.collisionHeight());

	// メニュー文字 表示
	ctx.font = "24px 'Migu'";
	ctx.textAlign = 'center';
	ctx.textBaseAlign = 'middle';
	ctx.fillStyle = 'rgb( 0, 0, 0 )';
	ctx.fillText("メニュー", this.x() + 5, this.y() + 5);

	ctx.restore();
};



ObjectItemButton.prototype.collisionWidth = function(){
	return 128;
};

ObjectItemButton.prototype.collisionHeight = function(){
	return 128;
};

module.exports = ObjectItemButton;

},{"../hakurei":15}],53:[function(require,module,exports){
'use strict';

var SPEED = 2;


var base_object = require('../hakurei').object.base;
var util = require('../hakurei').util;
var CONSTANT = require('../constant');
var jsonDataOfWait = require('../anime/koishi/wait_anime_1');
var jsonDataOfWalk = require('../anime/koishi/walk_anime_1');
var SS = require('../object/sprite_studio');


var Koishi = function (scene, parent) {
	base_object.apply(this, arguments);

	this.sprite = new SS(this.scene);
};
util.inherit(Koishi, base_object);

Koishi.prototype.init = function() {
	base_object.prototype.init.apply(this, arguments);

	this._target_x = 0;
	this._target_y = 0;

	this.setVelocity({magnitude:0, theta:0});
};

Koishi.prototype.setPosition = function(x, y) {
	base_object.prototype.setPosition.apply(this, arguments);
	this.sprite.init(x, y, jsonDataOfWait, 0, {scale: 0.6});
};

Koishi.prototype.setWait = function() {
	this.sprite.changeAnimation(jsonDataOfWait);
};
Koishi.prototype.setWalk = function() {
	this.sprite.changeAnimation(jsonDataOfWalk);
};




Koishi.prototype.setReflect = function(flag) {
	this.sprite.setReflect(flag);
};




Koishi.prototype.beforeDraw = function(){
	base_object.prototype.beforeDraw.apply(this, arguments);

	// update sprite
	this.sprite.x(this.x());
	this.sprite.y(this.y());
	this.sprite.beforeDraw();

	// move
	if (this._target_x) {
		if (this.x() + SPEED >= this._target_x && this._target_x > this.x() - SPEED) {
			// end move
			this._target_x = 0;
			this.setVelocity({magnitude:0, theta:0});

			this.setWait();
		}
	}
	if (this._target_y) {
		if (this.y() + SPEED >= this._target_y && this._target_y > this.y() - SPEED) {
			// end move
			this._target_y = 0;
			this.setVelocity({magnitude:0, theta:0});

			this.setWait();
		}
	}

	// 一定以上の奥行きには移動できない
	if (this.y() < this.scene.height - 150) {
		this.y(this.scene.height - 150);
	}
};
Koishi.prototype.draw = function(){
	base_object.prototype.draw.apply(this, arguments);
	this.sprite.draw();
};

Koishi.prototype.setMoveTarget = function(x, y) {
	base_object.prototype.beforeDraw.apply(this, arguments);
	var ax = x - this.x();
	var ay = y - this.y();

	var theta = util.radianToTheta(Math.atan2(ay, ax));

	this.setVelocity({magnitude:SPEED, theta:theta});

	this._target_x = x;
	this._target_y = y;

	this.setWalk();
	if (this._target_x > this.x()) {
		this.sprite.setReflect(false);
	}
	else {
		this.sprite.setReflect(true);
	}
};

module.exports = Koishi;

},{"../anime/koishi/wait_anime_1":1,"../anime/koishi/walk_anime_1":2,"../constant":4,"../hakurei":15,"../object/sprite_studio":58}],54:[function(require,module,exports){
'use strict';
var base_scene = require('../hakurei').object.base;
var Util = require('../hakurei').util;

var ObjectLeftYajirushi = function(core) {
	base_scene.apply(this, arguments);
};
Util.inherit(ObjectLeftYajirushi, base_scene);

ObjectLeftYajirushi.prototype.init = function(){
	base_scene.prototype.init.apply(this, arguments);
	this.setPosition();
};


ObjectLeftYajirushi.prototype.onCollision = function(obj){
	// フィールド遷移
	this.scene.mainStage().setFadeOut(30, "black");
	this.core.changeScene("stage", this.scene.mainStage().field().left_field, true);
};

ObjectLeftYajirushi.prototype.setPosition = function(){
	this.x(48);
	this.y(this.scene.mainStage().height/2);
};

ObjectLeftYajirushi.prototype.draw = function(){
	var ctx = this.core.ctx;
	ctx.save();
	/*
	// 仮で四角形を描画
	ctx.fillStyle = 'rgb( 255, 255, 255 )' ;
	ctx.globalAlpha = 0.4;
	ctx.fillRect(this.getCollisionLeftX(), this.getCollisionUpY(), this.collisionWidth(), this.collisionHeight());
	*/
	// フィールド遷移矢印 表示
	ctx.font = "96px 'Migu'";
	ctx.textAlign = 'center';
	ctx.textBaseAlign = 'middle';
	ctx.fillStyle = 'rgb( 255, 255, 255 )';
	ctx.fillText("◀", this.x(), this.y() + 20);

	ctx.restore();
};



ObjectLeftYajirushi.prototype.collisionWidth = function(){
	return 128;
};

ObjectLeftYajirushi.prototype.collisionHeight = function(){
	return 128;
};

module.exports = ObjectLeftYajirushi;

},{"../hakurei":15}],55:[function(require,module,exports){
'use strict';

/* メニューのアイテム */

var base_object = require('../hakurei').object.base;
var Util = require('../hakurei').util;

var ObjectMenuItem = function(scene, item_id) {
	base_object.apply(this, arguments);

	this.item_id = item_id;
};
Util.inherit(ObjectMenuItem, base_object);

ObjectMenuItem.prototype.init = function(){
	base_object.prototype.init.apply(this, arguments);
};


ObjectMenuItem.prototype.onCollision = function(obj){
	this.scene.focus_item_id = this.item_id;
};

ObjectMenuItem.prototype.draw = function(){
	var ctx = this.core.ctx;
	ctx.save();

	// 仮で四角形を描画
	ctx.fillStyle = 'rgb( 255, 255, 255 )' ;
	//ctx.globalAlpha = 0.4;
	ctx.fillRect(this.getCollisionLeftX(), this.getCollisionUpY(), this.collisionWidth(), this.collisionHeight());

	// 選択しているアイテムなら
	if (this.scene.focus_item_id === this.item_id) {
		ctx.strokeStyle = "rgb(200, 0, 0)";
		ctx.lineWidth = 10;
		ctx.strokeRect(this.getCollisionLeftX(), this.getCollisionUpY(), this.collisionWidth(), this.collisionHeight());
	}

	// メニュー文字 表示
	ctx.font = "24px 'Migu'";
	ctx.textAlign = 'center';
	ctx.textBaseAlign = 'middle';
	ctx.fillStyle = 'rgb( 0, 0, 0 )';
	ctx.fillText("ITEM1", this.x() + 5, this.y() + 5);

	ctx.restore();
};



ObjectMenuItem.prototype.collisionWidth = function(){
	return 96;
};

ObjectMenuItem.prototype.collisionHeight = function(){
	return 96;
};


// アイテムが使用されたとき
ObjectMenuItem.prototype.use = function(){
	this.core.save_manager.increase3rdeyeGauge(100); // TODO:
};








module.exports = ObjectMenuItem;

},{"../hakurei":15}],56:[function(require,module,exports){
'use strict';
var base_scene = require('../../hakurei').object.base;
var Util = require('../../hakurei').util;

var ObjectPiece = function(core) {
	base_scene.apply(this, arguments);
};
Util.inherit(ObjectPiece, base_scene);

ObjectPiece.prototype.onCollision = function(obj){
	// 会話するオブジェクトなので、クリックしたら会話する
	this.scene.mainStage().changeSubScene("talk");
};

ObjectPiece.prototype.draw = function(){
	/*
	// 仮で四角形を描画
	var ctx = this.core.ctx;
	ctx.save();
	ctx.fillStyle = 'rgb( 255, 255, 255 )' ;
	ctx.globalAlpha = 0.4;
	ctx.fillRect(this.getCollisionLeftX(), this.getCollisionUpY(), this.collisionWidth(), this.collisionHeight());
	ctx.restore();
	*/
};



ObjectPiece.prototype.collisionWidth = function(){
	return 100;
};

ObjectPiece.prototype.collisionHeight = function(){
	return 100;
};

module.exports = ObjectPiece;

},{"../../hakurei":15}],57:[function(require,module,exports){
'use strict';
var base_scene = require('../hakurei').object.base;
var Util = require('../hakurei').util;

var ObjectRightYajirushi = function(core) {
	base_scene.apply(this, arguments);
};
Util.inherit(ObjectRightYajirushi, base_scene);

ObjectRightYajirushi.prototype.init = function(){
	base_scene.prototype.init.apply(this, arguments);

	this.setPosition();
};

ObjectRightYajirushi.prototype.onCollision = function(obj){
	// フィールド遷移
	this.scene.mainStage().setFadeOut(30, "black");
	this.core.changeScene("stage", this.scene.mainStage().field().right_field, false);
};

ObjectRightYajirushi.prototype.setPosition = function(){
	this.x(this.scene.mainStage().width - 48);
	this.y(this.scene.mainStage().height/2);
};

ObjectRightYajirushi.prototype.draw = function(){
	var ctx = this.core.ctx;
	ctx.save();
	/*
	// 仮で四角形を描画
	ctx.fillStyle = 'rgb( 255, 255, 255 )' ;
	ctx.globalAlpha = 0.4;
	ctx.fillRect(this.getCollisionLeftX(), this.getCollisionUpY(), this.collisionWidth(), this.collisionHeight());
	*/

	// フィールド遷移矢印 表示
	ctx.font = "96px 'Migu'";
	ctx.textAlign = 'center';
	ctx.textBaseAlign = 'middle';
	ctx.fillStyle = 'rgb( 255, 255, 255 )';
	ctx.fillText("▶", this.x(), this.y() + 20);

	ctx.restore();
};



ObjectRightYajirushi.prototype.collisionWidth = function(){
	return 128;
};

ObjectRightYajirushi.prototype.collisionHeight = function(){
	return 128;
};

module.exports = ObjectRightYajirushi;

},{"../hakurei":15}],58:[function(require,module,exports){
'use strict';

var base_object = require('../hakurei').object.base;
var util = require('../hakurei').util;
var CONSTANT = require('../hakurei').constant;

var SsaPlayer = require('../vendor/SsaPlayer/SsaPlayer');
var SsImageList = SsaPlayer.SsImageList;
var SsAnimation = SsaPlayer.SsAnimation;
var SsSprite = SsaPlayer.SsSprite;

var SpriteStudio = function(scene) {
	base_object.apply(this, arguments);
};
util.inherit(SpriteStudio, base_object);

SpriteStudio.prototype.init = function(x, y, jsonData, data_index, opt){
	base_object.prototype.init.apply(this, arguments);
	this.x(x);
	this.y(y);
	data_index = data_index || 0;

	this.scale_size = opt && opt.scale ? opt.scale : 1.0;
	this.width = jsonData[data_index].animation.CanvasWidth;
	this.height = jsonData[data_index].animation.CanvasHeight;

	this.is_reflect = false;

	// TODO: preload
	this.imageList = new SsImageList(jsonData[data_index].images, "./image/", true);
	this.animation = new SsAnimation(jsonData[data_index].animation, this.imageList);

	var ss = new SsSprite(this.animation);

	this.sprite = ss;
};

SpriteStudio.prototype.changeAnimation = function(jsonData){
	var data_index = 0;
	this.width = jsonData[data_index].animation.CanvasWidth;
	this.height = jsonData[data_index].animation.CanvasHeight;

	this.animation = new SsAnimation(jsonData[data_index].animation, this.imageList);

	this.sprite.setAnimation(this.animation);

};





SpriteStudio.prototype.beforeDraw = function(){
	base_object.prototype.beforeDraw.apply(this, arguments);

	// update ss state
	this.sprite.rootScaleX = this.scaleWidth();
	this.sprite.rootScaleY = this.scaleHeight();
	this.sprite.x = this.width/2;
	this.sprite.y = this.height/2;
};

// 画面更新
SpriteStudio.prototype.draw = function(){
	if (!this.isShow()) return;
	var ctx = this.core.ctx;

	// create canvas
	var canvas = document.createElement('canvas');
	canvas.width  = this.width;
	canvas.height = this.height;
	var ctx2 = canvas.getContext('2d');
	var t = new Date().getTime();
	this.sprite.draw(ctx2, t);


	// draw
	ctx.save();
	ctx.translate(this.x(), this.y());
	if (this.isReflect()) {
		ctx.transform(-1, 0, 0, 1, 0, 0);
	}
	ctx.drawImage(canvas, -this.width/2, -this.height/2);

	ctx.restore();
};

SpriteStudio.prototype.isShow = function(){
	return true;
};
SpriteStudio.prototype.scaleWidth = function(){
	return this.scale_size;
};
SpriteStudio.prototype.scaleHeight = function(){
	return this.scale_size;
};
SpriteStudio.prototype.isReflect = function(){
	return this.is_reflect;
};

SpriteStudio.prototype.setReflect = function(flag){
	this.is_reflect = flag;
};

// TODO:
SpriteStudio.prototype.alpha = function() {
	return 1.0;
};

module.exports = SpriteStudio;

},{"../hakurei":15,"../vendor/SsaPlayer/SsaPlayer":69}],59:[function(require,module,exports){
'use strict';

// セーブデータ
var base_class = require('./hakurei').storage.save;
var util = require('./hakurei').util;

var SaveManager = function(scene) {
	base_class.apply(this, arguments);
};
util.inherit(SaveManager, base_class);

// 取得しているアイテム一覧を取得
SaveManager.prototype.getItemList = function() {
	var list = this.get("item_list");

	if(!list) list = [];

	return list;
};

// 取得しているアイテム一覧を取得
SaveManager.prototype.getItem = function(index){
	var list = this.getItemList();

	return list[index];
};

// アイテムを追加(追加したアイテムのindexを返す)
SaveManager.prototype.addItem = function(item_id){
	var list = this.getItemList();

	list.push(item_id);
	this.set("item_list", list);
	return list.length - 1;
};


SaveManager.prototype.get3rdeyeGauge = function(){
	var gauge = this.get("3rdeye_gauge") || 0;

	return gauge;
};
SaveManager.prototype.increase3rdeyeGauge = function(num){
	var gauge = this.get3rdeyeGauge();

	gauge += num;

	// TODO: 定数化
	if (gauge > 1000) gauge = 1000;

	this.set("3rdeye_gauge", gauge);
};







module.exports = SaveManager;

},{"./hakurei":15}],60:[function(require,module,exports){
'use strict';

// ローディングシーン

var base_scene = require('../hakurei').scene.base;
var util = require('../hakurei').util;
var AssetsConfig = require('../assets_config');
var CONSTANT = require('../constant');

var SceneLoading = function(core) {
	base_scene.apply(this, arguments);
};
util.inherit(SceneLoading, base_scene);

SceneLoading.prototype.init = function() {
	base_scene.prototype.init.apply(this, arguments);

	// ゲームで使用する画像一覧
	for (var key in AssetsConfig.images) {
		this.core.image_loader.loadImage(key, AssetsConfig.images[key]);
	}

	// ゲームで使用するSE一覧
	for (var key2 in AssetsConfig.sounds) {
		var conf2 = AssetsConfig.sounds[key2];
		this.core.audio_loader.loadSound(key2, conf2.path, conf2.volume);
	}

	// ゲームで使用するBGM一覧
	for (var key3 in AssetsConfig.bgms) {
		var conf3 = AssetsConfig.bgms[key3];
		this.core.audio_loader.loadBGM(key3, conf3.path, 1.0, conf3.loopStart, conf3.loopEnd);
	}
};

SceneLoading.prototype.beforeDraw = function() {
	base_scene.prototype.beforeDraw.apply(this, arguments);

	//if (this.core.image_loader.isAllLoaded() && this.core.audio_loader.isAllLoaded() && this.core.font_loader.isAllLoaded()) {
	if (this.core.image_loader.isAllLoaded()) {
		this.core.changeScene("title");
	}
};
SceneLoading.prototype.draw = function(){
	base_scene.prototype.draw.apply(this, arguments);
	var ctx = this.core.ctx;

	if(!ctx) return; // 2D context has been depricated in this game

	// 背景
	ctx.save();
	ctx.fillStyle = 'white';
	ctx.fillRect(0, 0, this.core.width, this.core.height);
	ctx.restore();

	// メッセージ
	var per_frame = this.frame_count % 60;
	var DOT_SPAN = 15;

	var dot = "";
	if (DOT_SPAN > per_frame && per_frame >= 0) {
		dot = "";
	}
	else if (DOT_SPAN*2 > per_frame && per_frame >= DOT_SPAN*1) {
		dot = ".";
	}
	else if (DOT_SPAN*3 > per_frame && per_frame >= DOT_SPAN*2) {
		dot = "..";
	}
	else {
		dot = "...";
	}

	ctx.save();
	ctx.fillStyle = 'rgb( 0, 0, 0 )';
	ctx.textAlign = 'left';
	ctx.font = "30px 'OradanoGSRR'";
	ctx.fillText('Now Loading' + dot, this.core.width - 250, this.core.height - 50);
	ctx.restore();


	// プログレスバー
	ctx.save();
	ctx.fillStyle = 'rgb(119, 66, 244)';
	ctx.fillRect(0, this.core.height - 20, this.core.width * this.progress(), 50);
	ctx.restore();
};


SceneLoading.prototype.progress = function(){
	var progress = (this.core.audio_loader.progress() + this.core.image_loader.progress() + this.core.font_loader.progress()) / 3;
	return progress;
};

module.exports = SceneLoading;

},{"../assets_config":3,"../constant":4,"../hakurei":15}],61:[function(require,module,exports){
'use strict';

var base_scene = require('./stage_base');

var util = require('../hakurei').util;
var CONSTANT = require('../hakurei').constant;

var SceneSubStagePlay = require('./sub_stage/play');
var SceneSubStageTalk = require('./sub_stage/talk');
var SceneSubStageMenu = require('./sub_stage/menu');

var Koishi = require('../object/koishi');

var Piece = require('../object/piece/1');

var LeftYajirushi = require('../object/left_yajirushi');
var RightYajirushi = require('../object/right_yajirushi');
var ItemButton = require('../object/item_button');

var FieldMap = require('../field');

var SceneStage = function(core) {
	base_scene.apply(this, arguments);

	// 現在のフィールド
	this._current_field_name = null;
	// フィールド一覧
	this._field_map = FieldMap;

	// TODO: この addobject なくせないかな...
	// 自機
	this._koishi = new Koishi(this);
	this.addObject(this._koishi);

	this.left_yajirushi  = new LeftYajirushi(this);
	this.right_yajirushi = new RightYajirushi(this);
	this.addObject(this.left_yajirushi);
	this.addObject(this.right_yajirushi);

	this.item_button = new ItemButton(this);
	this.addObject(this.item_button);

	/* sub scene 一覧
	調べてるオブジェクト(机の上、窓の外) →そこからさらにアイテム調べられるので、サブシーンのサブシーンができるように、各サブシーンを作っておかねば。
	アイテムを読んでいるサブシーン(ページ送り等)
	アニメーションサブシーン(オブジェクトが反応する、その間こいしは動けない)
	*/

	// 通常
	this.addSubScene("play", new SceneSubStagePlay(core, this));
	// 会話中
	this.addSubScene("talk", new SceneSubStageTalk(core, this));
	// メニュー
	this.addSubScene("menu", new SceneSubStageMenu(core, this));
};
util.inherit(SceneStage, base_scene);

SceneStage.prototype.init = function(field_name, is_right){
	base_scene.prototype.init.apply(this, arguments);

	// 現在のフィールド
	this._current_field_name = field_name;

	this.removeAllObject();
	this.addObject(this._koishi);

	// フィールド移動時にフェードインする
	this.setFadeIn(30, "black");

	// フィールド開始時の初期位置の決定
	// 右から来たか、左から来たかでこいしの初期位置が変わる
	var pos;
	if (is_right) {
		pos = this.field().right_start_position;
		this.koishi().setPosition(pos.x, pos.y);
		this.koishi().setReflect(true);
	}
	else {
		pos = this.field().left_start_position;
		this.koishi().setPosition(pos.x, pos.y);
	}

	this.setupPiece();

	if (this.field().left_field) {
		this.addObject(this.left_yajirushi);
	}

	if (this.field().right_field) {
		this.addObject(this.right_yajirushi);
	}

	this.addObject(this.item_button);

	this.changeSubScene("play");
};

SceneStage.prototype.beforeDraw = function(){
	base_scene.prototype.beforeDraw.apply(this, arguments);
};

// 画面更新
SceneStage.prototype.draw = function(){
	var ctx = this.core.ctx;

	// 背景描画
	var title_bg = this.core.image_loader.getImage(this.field().background);
	ctx.save();
	ctx.drawImage(title_bg,
					0,
					0,
					title_bg.width,
					title_bg.height,
					0,
					0,
					this.core.width,
					this.core.height);
	ctx.restore();

	ctx.save();
	// フィールド名 表示
	// TODO: 削除
	ctx.font = "60px 'OradanoGSRR'";
	ctx.textAlign = 'center';
	ctx.textBaseAlign = 'middle';
	ctx.fillStyle = 'rgb( 0, 0, 0 )';
	ctx.fillText(this.field().name, this.width - 180, this.height - 20);

	ctx.restore();

	// こいし／サブシーン描画
	base_scene.prototype.draw.apply(this, arguments);
};


SceneStage.prototype.koishi = function(){
	return this._koishi;
};

SceneStage.prototype.mainStage = function(){
	return this;
};

SceneStage.prototype.field = function(){
	return this._field_map[this._current_field_name];
};



SceneStage.prototype.setupPiece = function() {
	this.pieces = [];
	var objects = this.field().objects;

	for (var i = 0, len = objects.length; i < len; i++) {
		var object = objects[i];
		var piece = new Piece(this);
		piece.init();
		piece.setPosition(object.x, object.y);
		this.addObject(piece);

		this.pieces.push(piece);
	}
};



module.exports = SceneStage;

},{"../field":6,"../hakurei":15,"../object/item_button":52,"../object/koishi":53,"../object/left_yajirushi":54,"../object/piece/1":56,"../object/right_yajirushi":57,"./stage_base":62,"./sub_stage/menu":64,"./sub_stage/play":65,"./sub_stage/talk":66}],62:[function(require,module,exports){
'use strict';
var base_scene = require('../hakurei').scene.base;
var Util = require('../hakurei').util;

var SceneStageBase = function(core) {
	base_scene.apply(this, arguments);
};
Util.inherit(SceneStageBase, base_scene);


SceneStageBase.prototype.koishi = function(){
	throw new Error("koishi method must be implemented");
};

SceneStageBase.prototype.mainStage = function(){
	throw new Error("mainStage method must be implemented");
};




module.exports = SceneStageBase;

},{"../hakurei":15}],63:[function(require,module,exports){
'use strict';
var base_scene = require('../stage_base');
var Util = require('../../hakurei').util;

var SceneSubStageBase = function(core, stage) { // stage は stage_base class を継承したオブジェクト
	base_scene.apply(this, arguments);
};
Util.inherit(SceneSubStageBase, base_scene);

SceneSubStageBase.prototype.koishi = function(){
	return this.parent.koishi();
};

SceneSubStageBase.prototype.mainStage = function(){
	return this.parent.mainStage();
};




module.exports = SceneSubStageBase;

},{"../../hakurei":15,"../stage_base":62}],64:[function(require,module,exports){
'use strict';
var base_scene = require('./base');
var Util = require('../../hakurei').util;
var MenuItem = require('../../object/menu_item');
var UIParts = require('../../hakurei').object.ui_parts;

var MESSAGE_WINDOW_OUTLINE_MARGIN = 10;

var SceneSubStageTalk = function(core, stage) {
	base_scene.apply(this, arguments);

	// テスト用アイテム
	// TODO: 削除
	this.core.save_manager.addItem(1);
	this.core.save_manager.addItem(2);
};
Util.inherit(SceneSubStageTalk, base_scene);

SceneSubStageTalk.prototype.init = function(){
	base_scene.prototype.init.apply(this, arguments);
	var self = this;

	this.focus_item_id = null;

	var item_list = this.core.save_manager.getItemList();

	self.removeAllObject();
	for (var i = 0, len = item_list.length; i<len; i++) {
		var item_id = item_list[i];
		var item = new MenuItem(this, item_id);
		item.init();
		item.setPosition(68 + i*100, 68);
		self.addObject(item);
	}

	// 使用ボタン
	this.use_button = new UIParts(self, 150, self.mainStage().height - 150, 160, 60, function draw () {
		var ctx = this.core.ctx;

		ctx.save();
		// 四角形
		ctx.globalAlpha = 0.8;
		ctx.fillStyle = 'rgb( 0, 0, 0 )';
		ctx.fillRect(
			MESSAGE_WINDOW_OUTLINE_MARGIN + 150,
			this.scene.mainStage().height - 150,
			160,
			60
		);

		// メニュー文字 表示
		ctx.font = "32px 'Migu'";
		ctx.textAlign = 'center';
		ctx.textBaseAlign = 'middle';
		ctx.fillStyle = 'rgb( 255, 255, 255 )';
		ctx.fillText("使用",
			MESSAGE_WINDOW_OUTLINE_MARGIN + 150 + 60,
			this.scene.mainStage().height - 150 + 40
		);
		ctx.restore();
	});
	self.addObject(this.use_button);

};

SceneSubStageTalk.prototype.beforeDraw = function(){
	base_scene.prototype.beforeDraw.apply(this, arguments);

	if(this.core.input_manager.isLeftClickPush()) {
		// 左クリックしたところを取得
		var x = this.core.input_manager.mousePositionX();
		var y = this.core.input_manager.mousePositionY();

		// メニュー閉じる
		this.mainStage().item_button.checkCollisionWithPosition(x, y);

		// アイテム選択
		for (var i = 0, len = this.objects.length; i < len; i++) {
			var object = this.objects[i];
			object.checkCollisionWithPosition(x, y);
		}

		// 使用ボタン
		if(this.use_button.checkCollisionWithPosition(x, y)) {
			this._useItem();
		}

	}


/*
	if(this.core.input_manager.isLeftClickPush()) {
		if(this.serif.is_end()) {
			// セリフ終わり
			this.mainStage().changeSubScene("play");
		}
		else {
			// セリフを送る
			this.serif.next();
		}
	}
*/
};

SceneSubStageTalk.prototype.draw = function(){
	var ctx = this.core.ctx;

	ctx.save();

	// ウィンドウ表示
	this._showWindow();

	// アイテム表示
	base_scene.prototype.draw.apply(this, arguments);

	// ボタン表示
	this._showButtons();

	// メッセージウィンドウ表示
	this._showMessageWindow();

	// メッセージ表示
	this._showMessage();

	ctx.restore();
};

SceneSubStageTalk.prototype._showWindow = function(){
	var ctx = this.core.ctx;

	ctx.globalAlpha = 0.8;
	ctx.fillStyle = 'rgb( 0, 0, 0 )';
	ctx.fillRect(
		MESSAGE_WINDOW_OUTLINE_MARGIN,
		MESSAGE_WINDOW_OUTLINE_MARGIN,
		this.mainStage().width - MESSAGE_WINDOW_OUTLINE_MARGIN * 2,
		this.mainStage().height - 150 - MESSAGE_WINDOW_OUTLINE_MARGIN * 2
	);

};

SceneSubStageTalk.prototype._showButtons = function(){
	var ctx = this.core.ctx;

	ctx.save();


	/* combine */

	// 四角形
	ctx.globalAlpha = 0.8;
	ctx.fillStyle = 'rgb( 0, 0, 0 )';
	ctx.fillRect(
		MESSAGE_WINDOW_OUTLINE_MARGIN + 150 + 160 + MESSAGE_WINDOW_OUTLINE_MARGIN,
		this.mainStage().height - 150,
		160,
		60
	);

	// メニュー文字 表示
	ctx.font = "32px 'Migu'";
	ctx.textAlign = 'center';
	ctx.textBaseAlign = 'middle';
	ctx.fillStyle = 'rgb( 255, 255, 255 )';
	ctx.fillText("合成",
		MESSAGE_WINDOW_OUTLINE_MARGIN + 150 + 60 + 160 + MESSAGE_WINDOW_OUTLINE_MARGIN,
		this.mainStage().height - 150 + 40
	);

	/* examine */

	// 四角形
	ctx.globalAlpha = 0.8;
	ctx.fillStyle = 'rgb( 0, 0, 0 )';
	ctx.fillRect(
		MESSAGE_WINDOW_OUTLINE_MARGIN + 150 + 160 + MESSAGE_WINDOW_OUTLINE_MARGIN + 160 + MESSAGE_WINDOW_OUTLINE_MARGIN,
		this.mainStage().height - 150,
		160,
		60
	);

	// メニュー文字 表示
	ctx.font = "32px 'Migu'";
	ctx.textAlign = 'center';
	ctx.textBaseAlign = 'middle';
	ctx.fillStyle = 'rgb( 255, 255, 255 )';
	ctx.fillText("調べる",
		MESSAGE_WINDOW_OUTLINE_MARGIN + 150 + 60 + 160 + MESSAGE_WINDOW_OUTLINE_MARGIN + 160 + MESSAGE_WINDOW_OUTLINE_MARGIN,
		this.mainStage().height - 150 + 40
	);



	ctx.restore();



};

SceneSubStageTalk.prototype._showMessageWindow = function(){
	var ctx = this.core.ctx;

	ctx.globalAlpha = 0.8;
	ctx.fillStyle = 'rgb( 0, 0, 0 )';
	ctx.fillRect(
		MESSAGE_WINDOW_OUTLINE_MARGIN + 150,
		this.mainStage().height - 80,
		this.mainStage().width  - 180 - MESSAGE_WINDOW_OUTLINE_MARGIN * 2,
		70
	);

};

SceneSubStageTalk.prototype._showMessage = function(){
	var ctx = this.core.ctx;

	// メニュー文字 表示
	ctx.font = "27px 'Migu'";
	ctx.textAlign = 'center';
	ctx.textBaseAlign = 'middle';
	ctx.fillStyle = 'rgb( 255, 255, 255 )';
	ctx.fillText("ITEM1 だ",
		MESSAGE_WINDOW_OUTLINE_MARGIN + 160 + 70,
		this.mainStage().height - 60 + 20
	);

};

SceneSubStageTalk.prototype._useItem = function(){
	// アイテムを選択してなければ何もしない
	if(!this.focus_item_id) return;

	for(var i = 0, len = this.objects.length; i < len; i++) {
		var obj = this.objects[i];
		if(obj.item_id === this.focus_item_id) {
			this.removeObject(obj);
			obj.use();
			break;
		}
	}

	this.focus_item_id = null;
};







module.exports = SceneSubStageTalk;

},{"../../hakurei":15,"../../object/menu_item":55,"./base":63}],65:[function(require,module,exports){
'use strict';
var base_scene = require('./base');
var Util = require('../../hakurei').util;

var SceneSubStagePlay = function(core, stage) {
	base_scene.apply(this, arguments);
};
Util.inherit(SceneSubStagePlay, base_scene);

SceneSubStagePlay.prototype.draw = function(){
	base_scene.prototype.draw.apply(this, arguments);
	var ctx = this.core.ctx;
};

SceneSubStagePlay.prototype.beforeDraw = function(){
	base_scene.prototype.beforeDraw.apply(this, arguments);

	if(this.core.input_manager.isLeftClickPush()) {
		// 左クリックしたところを取得
		var x = this.core.input_manager.mousePositionX();
		var y = this.core.input_manager.mousePositionY();

		// 会話するオブジェクトとの当たり判定
		var is_talk = false;
		this.mainStage().pieces.forEach(function(piece) {
			var is_collision = piece.checkCollisionWithPosition(x, y);

			if (is_collision) is_talk = true;
		});


		// 会話するオブジェクトとの当たり判定にならなかったら
		if (!is_talk) {
			var is_change_scene = false;

			// TODO: refactor

			// シーン遷移
			if(this.mainStage().field().left_field && this.mainStage().left_yajirushi.checkCollisionWithPosition(x, y)) {

			}
			// シーン遷移
			else if(this.mainStage().field().right_field && this.mainStage().right_yajirushi.checkCollisionWithPosition(x, y)) {

			}
			else if (this.mainStage().item_button.checkCollisionWithPosition(x, y)) {

			}
			// こいしを移動
			else {
				this.koishi().setMoveTarget(x, y);
			}
		}
	}
};


module.exports = SceneSubStagePlay;

},{"../../hakurei":15,"./base":63}],66:[function(require,module,exports){
'use strict';
var base_scene = require('./base');
var Util = require('../../hakurei').util;

var SerifManager = require('../../hakurei').serif_manager;
var serif_script = require("../../serif/objects/1"); // rename objects -> pieces

var SceneSubStageTalk = function(core, stage) {
	base_scene.apply(this, arguments);

	this.serif = new SerifManager();
};
Util.inherit(SceneSubStageTalk, base_scene);

SceneSubStageTalk.prototype.init = function(){
	base_scene.prototype.init.apply(this, arguments);

	this.serif.init(serif_script); // TODO: 他のセリフにも対応
};

SceneSubStageTalk.prototype.beforeDraw = function(){
	base_scene.prototype.beforeDraw.apply(this, arguments);

	if(this.core.input_manager.isLeftClickPush()) {
		if(this.serif.is_end()) {
			// セリフ終わり
			this.mainStage().changeSubScene("play");
		}
		else {
			// セリフを送る
			this.serif.next();
		}
	}

};

SceneSubStageTalk.prototype.draw = function(){
	base_scene.prototype.draw.apply(this, arguments);
	var ctx = this.core.ctx;

	ctx.save();

	// メッセージウィンドウ表示
	this._showMessageWindow();

	// メッセージ表示
	this._showMessage();

	ctx.restore();
};



// セリフウィンドウ表示
SceneSubStageTalk.prototype._showMessageWindow = function(){
	var ctx = this.core.ctx;
	ctx.save();

	var x = this.koishi().x() - 0;
	var y = this.koishi().y() - 330;

	var fukidashi = this.core.image_loader.getImage('fukidashi');

	// TODO: 実装
	if(false) {
		x = -x; // 反転
		ctx.transform(-1, 0, 0, 1, fukidashi.width, 0); // 左右反転
	}

	ctx.drawImage(fukidashi,
					x,
					y,
					fukidashi.width * 0.4,
					fukidashi.height * 0.4
	);
	ctx.restore();
};

// セリフ表示
SceneSubStageTalk.prototype._showMessage = function() {
	var ctx = this.core.ctx;
	ctx.save();

	/*
	// セリフの色
	var font_color = this.serif.font_color();
	if(font_color) {
		font_color = util.hexToRGBString(font_color);
	}
	else {
		font_color = 'rgb(255, 255, 255)';
	}
	*/

	ctx.font = "18px 'OradanoGSRR'";
	ctx.textAlign = 'left';
	ctx.textBaseAlign = 'middle';

	var x = this.koishi().x() + 20;
	var y = this.koishi().y() - 300;

	x = x + 60;
	// セリフ表示
	var lines = this.serif.lines();
	if (lines.length) {
		// セリフテキストの y 座標初期位置
		y = y + 40;

		for(var i = 0, len = lines.length; i < len; i++) {
			ctx.fillStyle = "black";
			ctx.fillText(lines[i], x, y); // 1行表示

			y+= 30;
		}
	}

	ctx.restore();
};




module.exports = SceneSubStageTalk;

},{"../../hakurei":15,"../../serif/objects/1":68,"./base":63}],67:[function(require,module,exports){
'use strict';

var base_scene = require('../hakurei').scene.base;
var util = require('../hakurei').util;
var H_CONSTANT = require('../hakurei').constant;
var CONSTANT = require('../constant');

var UIParts = require('../hakurei').object.ui_parts;

var SHOW_TRANSITION_COUNT = 100;

var MENU = [
	["New Game", function (core) { return true; }, function (core) {
		core.changeScene("stage", "chapter0_myroom");
	}],
	["Continue", function (core) { return true; }, function (core) {
		core.changeScene("stage", "chapter0_myroom");
	}],
	["Options", function (core) { return true; }, function (core) {
		core.changeScene("stage", "chapter0_myroom");
	}],
];

var SceneTitle = function(core) {
	base_scene.apply(this, arguments);

	var self = this;

	self.menu_ui = [];

	// メニュー一覧表示
	for(var i = 0, len = MENU.length; i < len; i++) {
		var menu = MENU[i];

		(function (menu) {
			self.menu_ui.push(new UIParts(self, 780, 300 + i*75, 240, 60, function draw () {
				var ctx = this.core.ctx;
				ctx.textAlign = 'center';
				ctx.textBaseline = 'middle';
				ctx.fillStyle = 'rgb( 255, 255, 255 )';

				if (this.is_big) {
					ctx.font = "64px 'OradanoGSRR'";
				}
				else {
					ctx.font = "56px 'OradanoGSRR'";
				}

				ctx.fillText(menu[0], this.x(), this.y());
			}));
		})(menu);
	}
	self.addObjects(self.menu_ui);
};
util.inherit(SceneTitle, base_scene);

SceneTitle.prototype.init = function(){
	base_scene.prototype.init.apply(this, arguments);

	//TODO: this.core.stopBGM();

	// フェードインする
	this.setFadeIn(SHOW_TRANSITION_COUNT);
	this.setFadeOut(30, "black");
};


SceneTitle.prototype.beforeDraw = function(){
	base_scene.prototype.beforeDraw.apply(this, arguments);

	if(this.frame_count === 60) {
		//TODO: this.core.playBGM();
	}

	// マウスの位置を取得
	var x = this.core.input_manager.mousePositionX();
	var y = this.core.input_manager.mousePositionY();

	var self = this;
	if(this.core.input_manager.isLeftClickPush()) {
		this.menu_ui.forEach(function(menu, i) {
			// クリックしたら
			if(menu.checkCollisionWithPosition(x, y)) {
				MENU[i][2](self.core);
			}
		});
	}
	else {
		this.menu_ui.forEach(function(menu, i) {
			// マウスカーソルが当たったら
			if(menu.checkCollisionWithPosition(x, y)) {
				menu.setVariable("is_big", true);
			}
			else {
				menu.setVariable("is_big", false);
			}
		});
	}
};

// 画面更新
SceneTitle.prototype.draw = function(){
	this.core.clearCanvas();
	var ctx = this.core.ctx;

	ctx.save();

	var title_bg = this.core.image_loader.getImage('title');

	// 背景画像表示
	ctx.drawImage(title_bg,
					0,
					0,
					title_bg.width,
					title_bg.height,
					0,
					0,
					this.core.width,
					this.core.height);

	var logo = this.core.image_loader.getImage('logo_wht');
	// ロゴ画像表示
		ctx.drawImage(logo,
		180,
		-180,
		logo.width*0.3, logo.height*0.3);

	ctx.restore();

	base_scene.prototype.draw.apply(this, arguments);
};

module.exports = SceneTitle;

},{"../constant":4,"../hakurei":15}],68:[function(require,module,exports){
'use strict';

// セリフ
var Serif= [
	{"chara":"koishi","serif":"花が枯れちゃいそう..."},
	{"chara":"koishi","serif":"お水をあげなくちゃ！"},
];
module.exports = Serif;

},{}],69:[function(require,module,exports){
//-----------------------------------------------------------
// Ss5ConverterToSSAJSON v1.0.3
//
// Copyright(C) Web Technology Corp.
// http://www.webtech.co.jp/
//
// Ss5ConverterToSSAJSON
// https://github.com/SpriteStudio/Ss5ConverterToSSAJSON/wiki
// �����o�͂���JSON�t�@�C����HTML5�ōĐ������T���v���v���O�����ł��B
//
//-----------------------------------------------------------

////////////////////////////////////////////////////////////
// SsImageList
////////////////////////////////////////////////////////////

function SsImageList(imageFiles, aFileRoot, loadImmediately, aOnLoad) {

	this.fileRoot = aFileRoot;
	this.imagePaths = new Array();
	this.images = new Array();

	// ���[�h�������ɌĂ΂����R�[���o�b�N
	// Callback that is called when the load is finished.
	this.onLoad = aOnLoad;

	// �S���ǂݍ��܂ꂽ�ꍇ�̂݃��[�U�[���ݒ肵���R�[���o�b�N���Ă�
	// Only when it is all loaded, is called a callback set by the user.
	this.onLoad_ = function () {
		for (var i in this.images)
			if (i != null && i.complete == false)
				return;
		if (this.onLoad != null)
			this.onLoad();
	}

	for (var i = 0; i < imageFiles.length; i++) {
		var path = this.fileRoot + imageFiles[i];
//        console.log(path);
		this.imagePaths.push(path);
		var image = new Image();
		if (loadImmediately)
		{
			image.onload = this.onLoad_;
			image.src = path;
		}
		this.images.push(image);
	}
}

// �w�肵���C���f�b�N�X��Image���Ԃ�
// Get image at specified index.
SsImageList.prototype.getImage = function (index) {
	if (index < 0 || index >= this.images.length) return null;
	return this.images[index];
}

// �w�肵���C���f�b�N�X�̉摜��imagePath�ō����ւ����B
// Replace image of specified index at imagePath.
SsImageList.prototype.setImage = function (index, imagePath) {
	if (index < 0 || index >= this.images.length) return null;
	this.imagePaths[index] = this.fileRoot + imagePath;
	this.images[index].onload = this.onLoad_;
	this.images[index].src = this.imagePaths[index];
}

// ���[�h�������R�[���o�b�N���ݒ肷��
// Set a callback when load is finished.
SsImageList.prototype.setOnLoad = function (cb) {
	this.onLoad = cb;
}


////////////////////////////////////////////////////////////
// SsPartState
////////////////////////////////////////////////////////////

function SsPartState(name) {

	// �p�[�c��
	// Parts name.
	this.name = name;
	// ���݂̕`��X�|�W�V����
	// Current x position at drawing.
	this.x = 0;
	// ���݂̕`��Y�|�W�V����
	// Current x position at drawing.
	this.y = 0;
}


////////////////////////////////////////////////////////////
// SsAnimation
////////////////////////////////////////////////////////////

function SsAnimation(ssaData, imageList) {

	this.ssaData = ssaData;
	this.imageList = imageList;

	this.partsMap = new Array();
	this.parts = ssaData.parts;
	for (var i = 0; i < this.parts.length; i++) {
		this.partsMap[this.parts[i]] = i;
	}
}

// ���̃A�j���[�V������FPS
// This animation FPS.
SsAnimation.prototype.getFPS = function () {
	return this.ssaData.fps;
}

// �g�[�^���t���[�������Ԃ�
// Get total frame count.
SsAnimation.prototype.getFrameCount = function () {
	return this.ssaData.ssa.length;
}

// �p�[�c���X�g���Ԃ�
// Get parts list.
SsAnimation.prototype.getParts = function () {
	return this.ssaData.parts;
}

// �p�[�c������No���擾�����}�b�v���Ԃ�
// Return the map, to get the parts from number.
SsAnimation.prototype.getPartsMap = function () {
	return this.partsMap;
}

// �`�惁�\�b�h
// Draw method.
SsAnimation.prototype.drawFunc = function (ctx2, frameNo, x, y, flipH, flipV, partStates, rootScaleX, rootScaleY) {

	var iPartNo = 0;
	var iImageNo = 1;
	var iSouX = 2;
	var iSouY = 3;
	var iSouW = 4;
	var iSouH = 5;
	var iDstX = 6;
	var iDstY = 7;
	var iDstAngle = 8;
	var iDstScaleX = 9;
	var iDstScaleY = 10;
	var iOrgX = 11;
	var iOrgY = 12;
	var iFlipH = 13;
	var iFlipV = 14;
	var iAlpha = 15;
	var iBlend = 16;

	var blendOperations = new Array(
		"source-over",
		"source-over",
		"lighter",
		"source-over"
	);

	var frameData = this.ssaData.ssa[frameNo];
	for (var refNo = 0; refNo < frameData.length; refNo++) {

		var partData = frameData[refNo];
		var partDataLen = partData.length;

		var partNo = partData[iPartNo];
		var img = this.imageList.getImage(partData[iImageNo]);
		var sx = partData[iSouX];
		var sy = partData[iSouY];
		var sw = partData[iSouW];
		var sh = partData[iSouH];
		var dx = partData[iDstX] * rootScaleX;
		var dy = partData[iDstY] * rootScaleY;

		var odx = partData[iDstX];
		var ody = partData[iDstY];



		if (partNo != 7) {
			//continue;
		}



		var vdw = sw;
		var vdh = sh;

		dx += x;
		dy += y;

		if (sw > 0 && sh > 0) {
			var dang = partData[iDstAngle];
			var scaleX = partData[iDstScaleX];
			var scaleY = partData[iDstScaleY];

			var ox = (partDataLen > iOrgX) ? partData[iOrgX] : 0;
			var oy = (partDataLen > iOrgY) ? partData[iOrgY] : 0;
			var fh = (partDataLen > iFlipH) ? (partData[iFlipH] != 0 ? -1 : 1) : (1);
			var fv = (partDataLen > iFlipV) ? (partData[iFlipV] != 0 ? -1 : 1) : (1);
			var alpha = (partDataLen > iAlpha) ? partData[iAlpha] : 1.0;
			var blend = (partDataLen > iBlend) ? partData[iBlend] : 0;


			var canvas = document.createElement('canvas');
			var canvas_size = vdw > vdh ? vdw : vdh;
			canvas.width  = canvas_size;
			canvas.height = canvas_size;
			var ctx = canvas.getContext('2d');

			ctx.globalCompositeOperation = blendOperations[blend];
			ctx.globalAlpha = alpha;
			//ctx.setTransform(1, 0, 0, 1, dx, dy); 		// �ŏI�I�ȕ\���ʒu��. To display the final position.
			//ctx.setTransform(1 * rootScaleX, 0, 0, 1 * rootScaleY, 0, 0); 	// �ŏI�I�ȕ\���ʒu��. To display the final position.
			ctx.rotate(-dang);
			ctx.scale(scaleX, scaleY);
			ctx.translate(vdw / 2,vdh / 2); 	// �p�[�c�̌��_��. To the origin of the parts.
			ctx.scale(fh, fv); 						    	// �p�[�c�̒��S�_�Ńt���b�v. Flip at the center point of the parts.

			// check
			//
			//      console.log(sx, sy, sw, sh);
			//      sw = (sx + sw < img.width) ? sw : img.width - sx;
			//      sh = (sy + sh < img.height) ? sh : img.height - sy;
			//      sw = (sw < 0) ? 0 : sw;
			//      sh = (sh < 0) ? 0 : sh;
			//      sx = (sx < 0) ? 0 : sx;
			//      sy = (sy < 0) ? 0 : sy;
			//      console.log(sx, sy, sw, sh);

			ctx.drawImage(img, sx, sy, sw, sh, -vdw/2, -vdh/2, vdw, vdh);
			//ctx2.drawImage(canvas, dx-ox*rootScaleX, dy-oy*rootScaleY);
			//ctx2.drawImage(canvas, 
			var ddx = dx-ox*rootScaleX;
			var ddy = dy-oy*rootScaleY;

			var iVertULX = 17;
			var iVertULY = 18;
			var iVertURX = 19;
			var iVertURY = 20;
			var iVertDLX = 21;
			var iVertDLY = 22;
			var iVertDRX = 23;
			var iVertDRY = 24;

			// ���_�ό`���W
			var t = [
                    (partDataLen > iVertULX) ? partData[iVertULX] : 0,
                    (partDataLen > iVertULY) ? partData[iVertULY] : 0,
                    (partDataLen > iVertURX) ? partData[iVertURX] : 0,
                    (partDataLen > iVertURY) ? partData[iVertURY] : 0,
                    (partDataLen > iVertDLX) ? partData[iVertDLX] : 0,
                    (partDataLen > iVertDLY) ? partData[iVertDLY] : 0,
                    (partDataLen > iVertDRX) ? partData[iVertDRX] : 0,
                    (partDataLen > iVertDRY) ? partData[iVertDRY] : 0 ];
			var p = [
				new Point(ddx + t[0],ddy + t[1]),
				new Point(canvas_size*rootScaleX + ddx + t[2], ddy + t[3]),
				new Point(ddx + t[4], canvas_size*rootScaleY + ddy + t[5]),
				new Point(canvas_size*rootScaleX + ddx + t[6], canvas_size*rootScaleY + ddy + t[7])
			];
			/*
			var p = [
				new Point(0 + partData[17],0 + partData[18]),
				new Point(1000 + partData[19], 0 + partData[20]),
				new Point(0 + partData[21], 1000 + partData[22]),
				new Point(1000 + partData[23], 1000 + partData[24])
			];
			*/

			drawTriangle(ctx2, canvas, p);
		}

		var state = partStates[partNo];
		state.x = dx;
		state.y = dy;
	}
}


////////////////////////////////////////////////////////////
// SsSprite
////////////////////////////////////////////////////////////

function SsSprite(animation) {

	// �v���C�x�[�g�ϐ�
	// Private variables.
	this.inner = {
		animation: animation,
		playingFrame: 0,
		prevDrawnTime: 0,
		step: 1,
		loop: 0,
		loopCount: 0,
		endCallBack: null,    // draw end callback

		partStates: null,
		initPartStates: function () {
			this.partStates = null;
			if (this.animation != null) {
				var parts = this.animation.getParts();
				var states = new Array();
				for (var i = 0; i < parts.length; i++) {
					states.push(new SsPartState(parts[i]));
				}
				this.partStates = states;
			}
		}
	};

	this.inner.initPartStates();
}

// �`��X�|�W�V����
// X position at drawing.
SsSprite.prototype.x = 0;

// �`��Y�|�W�V����
// Y position at drawing
SsSprite.prototype.y = 0;

// ��������
// *Not implemented.
SsSprite.prototype.flipH = false;
SsSprite.prototype.flipV = false;

// scale
SsSprite.prototype.rootScaleX = 1.0;
SsSprite.prototype.rootScaleY = 1.0;

// �A�j���[�V�����̐ݒ�
// Set animation.
SsSprite.prototype.setAnimation = function (animation) {
	this.inner.animation = animation;
	this.inner.initPartStates();
	this.inner.playingFrame = 0;
	this.inner.prevDrawnTime = 0;
	this.clearLoopCount();
}

// �A�j���[�V�����̎擾
// Get animation.
SsSprite.prototype.getAnimation = function () {
	return this.inner.animation;
}

// �Đ��t���[��No���ݒ�
// Set frame no of playing.
SsSprite.prototype.setFrameNo = function (frameNo) {
	this.inner.playingFrame = frameNo;
	this.inner.prevDrawnTime = 0;
}

// �Đ��t���[��No���擾
// Get frame no of playing.
SsSprite.prototype.getFrameNo = function () {
	return this.inner.playingFrame >> 0;
}

// �Đ��X�s�[�h���ݒ� (1:�W��)
// Set speed to play. (1:normal speed)
SsSprite.prototype.setStep = function (step) {
	this.inner.step = step;
}

// �Đ��X�s�[�h���擾
// Get speed to play. (1:normal speed)
SsSprite.prototype.getStep = function () {
	return this.inner.step;
}

// ���[�v�񐔂̐ݒ� (0:����)
// Set a playback loop count.  (0:infinite)
SsSprite.prototype.setLoop = function (loop) {
	if (loop < 0) return;
	this.inner.loop = loop;
}

// ���[�v�񐔂̐ݒ����擾
// Get a playback loop count of specified. (0:infinite)
SsSprite.prototype.getLoop = function () {
	return this.inner.loop;
}

// ���݂̍Đ��񐔂��擾
// Get repeat count a playback.
SsSprite.prototype.getLoopCount = function () {
	return this.inner.loopCount;
}

// ���݂̍Đ��񐔂��N���A
// Clear repeat count a playback.
SsSprite.prototype.clearLoopCount = function () {
	this.inner.loopCount = 0;
}

// �A�j���[�V�����I�����̃R�[���o�b�N���ݒ�
// Set the call back at the end of animation.
SsSprite.prototype.setEndCallBack = function (func) {
	this.inner.endCallBack = func;
}

// �p�[�c�̏��ԁi���݂�X,Y���W�Ȃǁj���擾
// Gets the state of the parts. (Current x and y positions)
SsSprite.prototype.getPartState = function (name) {
	if (this.inner.partStates == null) return null;

	var partsMap = this.inner.animation.getPartsMap();
	var partNo = partsMap[name];
	if (partNo == null) return null;
	return this.inner.partStates[partNo];
}

// �`�����s
// Drawing method.
SsSprite.prototype.draw = function (ctx, currentTime) {

	if (this.inner.animation == null) return;

	if (this.inner.loop == 0 || this.inner.loop > this.inner.loopCount) {
		// �t���[�����i�߂�
		// To next frame.
		if (this.inner.prevDrawnTime > 0) {

			var s = (currentTime - this.inner.prevDrawnTime) / (1000 / this.inner.animation.getFPS());
			this.inner.playingFrame += s * this.inner.step;

			var c = (this.inner.playingFrame / this.inner.animation.getFrameCount()) >> 0;

			if (this.inner.step >= 0) {
				if (this.inner.playingFrame >= this.inner.animation.getFrameCount()) {
					// ���[�v�񐔍X�V
					// Update repeat count.
					this.inner.loopCount += c;
					if (this.inner.loop == 0 || this.inner.loopCount < this.inner.loop) {
						// �t���[���ԍ��X�V�A�Đ��𑱂���
						// Update frame no, and playing.
						this.inner.playingFrame %= this.inner.animation.getFrameCount();
					}
					else {
						// �Đ����~�A�ŏI�t���[����
						// Stop animation, to last frame.
						this.inner.playingFrame = this.inner.animation.getFrameCount() - 1;
						// ���~���R�[���o�b�N�Ăяo��
						// Call finished callback.
						if (this.inner.endCallBack != null) {
							this.inner.endCallBack();
						}
					}
				}
			}
			else {
				if (this.inner.playingFrame < 0) {
					// ���[�v�񐔍X�V
					// Update repeat count.
					this.inner.loopCount += 1 + -c;
					if (this.inner.loop == 0 || this.inner.loopCount < this.inner.loop) {
						// �t���[���ԍ��X�V�A�Đ��𑱂���
						// Update frame no, and playing.
						this.inner.playingFrame %= this.inner.animation.getFrameCount();
						if (this.inner.playingFrame < 0) this.inner.playingFrame += this.inner.animation.getFrameCount();
					}
					else {
						// �Đ����~�A�擪�t���[����
						// Stop animation, to first frame.
						this.inner.playingFrame = 0;
						// ���~���R�[���o�b�N�Ăяo��
						// Call finished callback.
						if (this.inner.endCallBack != null) {
							this.inner.endCallBack();
						}
					}
				}
			}

		}
	}
	//else {
	//	// �Đ����~
	//	// Stop animation.
	//	this.inner.playingFrame = 0;
	//}

	this.inner.prevDrawnTime = currentTime;

	this.inner.animation.drawFunc(ctx, this.getFrameNo(), this.x, this.y, this.flipH, this.flipV, this.inner.partStates, this.rootScaleX, this.rootScaleY);
}
	function drawTriangle (ctx, img, p) {
		var w = img.width;
		var h = img.height;
		//�Z�O�����g1
		ctx.save();
		//�l�p�`�̃p�X���`��
		ctx.beginPath();
		ctx.strokeStyle = "yellow";
		ctx.moveTo(p[0].x, p[0].y);
		ctx.lineTo(p[1].x, p[1].y);
		ctx.lineTo(p[3].x, p[3].y);
		ctx.lineTo(p[2].x, p[2].y);
		ctx.closePath();
		//�l�p�`�̃p�X�I��
		
		ctx.clip(); //�ȉ��ɕ`�悳�����摜���A�����܂ŕ`�����l�p�`�Ń}�X�N����
	//ctx.stroke();	
		/*�`�����Ԃ��ό`�i�ϊ��}�g���b�N�X���v�Z�j*/
		var t1=(p[1].x-p[0].x)/w;
		var t2=(p[1].y-p[0].y)/w;
		var t3=(p[2].x-p[0].x)/h; 
		var t4=(p[2].y-p[0].y)/h;
		var t5=p[0].x;
		var t6=p[0].y;
		
		//���L��t1�`t6�̌v�Z���ʂŕ`�����Ԃ��ό`������
		ctx.setTransform(t1,t2,t3,t4,t5,t6);
		
		//�ό`�������Ԃɉ摜�i�ʐ^�j���z�u
		ctx.drawImage(img, 0,0);
		
		ctx.restore(); //�N���b�v�i�}�X�N�j�̈������Z�b�g
		
		//�Z�O�����g2
		ctx.save();
		// �E���̎O�p�`���`��
		ctx.beginPath();
		ctx.strokeStyle = "red";
		ctx.moveTo(p[1].x, p[1].y);
		ctx.lineTo(p[2].x, p[2].y);
		ctx.lineTo(p[3].x, p[3].y);
		ctx.closePath();
		// �E���̎O�p�`�̃p�X�I��
		
		ctx.clip(); //�ȉ��ɕ`�悳�����摜���A�����܂ŕ`�����O�p�`�Ń}�X�N����
	//ctx.stroke();	
		
		/*�`�����Ԃ��ό`�i�ϊ��}�g���b�N�X���v�Z�j*/
		t1=(p[3].x-p[2].x)/w;
		t2=(p[3].y-p[2].y)/w;
		t3=(p[3].x-p[1].x)/h;
		t4=(p[3].y-p[1].y)/h;
		t5=p[2].x;
		t6=p[2].y;
		
		//���L��t1�`t6�̌v�Z���ʂŕ`�����Ԃ��ό`������
		ctx.setTransform(t1,t2,t3,t4,t5,t6);

		//�ό`�������Ԃɉ摜�i�ʐ^�j���z�u
		ctx.drawImage(img, 0, 0-h);
		
		ctx.restore(); //�N���b�v�i�}�X�N�j�̈������Z�b�g
		
		}
		
		//Point�N���X
		function Point (x, y) {
			this.x = x;
			this.y = y;
			return {x:this.x, y:this.y};
		}
		







module.exports = {
	SsImageList: SsImageList,
	SsAnimation: SsAnimation,
	SsSprite:    SsSprite,
};

},{}]},{},[51]);
